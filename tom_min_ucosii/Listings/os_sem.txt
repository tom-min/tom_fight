; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\os_sem.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_sem.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Libraries\CMSIS\CM3\CoreSupport -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I.\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\main -I.\User -I.\User\include -I.\fatfs -I.\Utilities\STM32_EVAL -I.\Utilities\STM32_EVAL\Common -I.\Utilities\STM32_EVAL\STM3210E_EVAL -I.\UCOSII\CORE -I.\UCOSII\PORTS -I.\UCOSII\CONFIG -I.\RTE\_Target_1 -I"D:\program files (x86)\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"D:\program files (x86)\keil5\ARM\CMSIS\Include" -D__UVISION_VERSION=523 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL --omf_browse=.\objects\os_sem.crf UCOSII\CORE\os_sem.c]
                          THUMB

                          AREA ||i.OSSemAccept||, CODE, READONLY, ALIGN=1

                  OSSemAccept PROC
;;;50     #if OS_SEM_ACCEPT_EN > 0u
;;;51     INT16U  OSSemAccept (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;52     {
000002  4604              MOV      r4,r0
;;;53         INT16U     cnt;
;;;54     #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;55         OS_CPU_SR  cpu_sr = 0u;
000004  2600              MOVS     r6,#0
;;;56     #endif
;;;57     
;;;58     
;;;59     
;;;60     #if OS_ARG_CHK_EN > 0u
;;;61         if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;62             return (0u);
;;;63         }
;;;64     #endif
;;;65         if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
000006  7820              LDRB     r0,[r4,#0]
000008  2803              CMP      r0,#3
00000a  d001              BEQ      |L1.16|
;;;66             return (0u);
00000c  2000              MOVS     r0,#0
                  |L1.14|
;;;67         }
;;;68         OS_ENTER_CRITICAL();
;;;69         cnt = pevent->OSEventCnt;
;;;70         if (cnt > 0u) {                                   /* See if resource is available                  */
;;;71             pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
;;;72         }
;;;73         OS_EXIT_CRITICAL();
;;;74         return (cnt);                                     /* Return semaphore count                        */
;;;75     }
00000e  bd70              POP      {r4-r6,pc}
                  |L1.16|
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4606              MOV      r6,r0                 ;68
000016  8925              LDRH     r5,[r4,#8]            ;69
000018  b115              CBZ      r5,|L1.32|
00001a  8920              LDRH     r0,[r4,#8]            ;71
00001c  1e40              SUBS     r0,r0,#1              ;71
00001e  8120              STRH     r0,[r4,#8]            ;71
                  |L1.32|
000020  4630              MOV      r0,r6                 ;73
000022  f7fffffe          BL       OS_CPU_SR_Restore
000026  4628              MOV      r0,r5                 ;74
000028  e7f1              B        |L1.14|
;;;76     #endif
                          ENDP


                          AREA ||i.OSSemCreate||, CODE, READONLY, ALIGN=2

                  OSSemCreate PROC
;;;95     
;;;96     OS_EVENT  *OSSemCreate (INT16U cnt)
000000  b570              PUSH     {r4-r6,lr}
;;;97     {
000002  4605              MOV      r5,r0
;;;98         OS_EVENT  *pevent;
;;;99     #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;100        OS_CPU_SR  cpu_sr = 0u;
000004  2600              MOVS     r6,#0
;;;101    #endif
;;;102    
;;;103    
;;;104    
;;;105    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;106        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;107            OS_SAFETY_CRITICAL_EXCEPTION();
;;;108            return ((OS_EVENT *)0);
;;;109        }
;;;110    #endif
;;;111    
;;;112        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
000006  480f              LDR      r0,|L2.68|
000008  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000a  b108              CBZ      r0,|L2.16|
;;;113            return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
00000c  2000              MOVS     r0,#0
                  |L2.14|
;;;114        }
;;;115        OS_ENTER_CRITICAL();
;;;116        pevent = OSEventFreeList;                              /* Get next free event control block        */
;;;117        if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
;;;118            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;119        }
;;;120        OS_EXIT_CRITICAL();
;;;121        if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
;;;122            pevent->OSEventType    = OS_EVENT_TYPE_SEM;
;;;123            pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
;;;124            pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
;;;125    #if OS_EVENT_NAME_EN > 0u
;;;126            pevent->OSEventName    = (INT8U *)(void *)"?";
;;;127    #endif
;;;128            OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
;;;129        }
;;;130        return (pevent);
;;;131    }
00000e  bd70              POP      {r4-r6,pc}
                  |L2.16|
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4606              MOV      r6,r0                 ;115
000016  480c              LDR      r0,|L2.72|
000018  6804              LDR      r4,[r0,#0]            ;116  ; OSEventFreeList
00001a  6800              LDR      r0,[r0,#0]            ;117  ; OSEventFreeList
00001c  b120              CBZ      r0,|L2.40|
00001e  480a              LDR      r0,|L2.72|
000020  6800              LDR      r0,[r0,#0]            ;118  ; OSEventFreeList
000022  6840              LDR      r0,[r0,#4]            ;118
000024  4908              LDR      r1,|L2.72|
000026  6008              STR      r0,[r1,#0]            ;118  ; OSEventFreeList
                  |L2.40|
000028  4630              MOV      r0,r6                 ;120
00002a  f7fffffe          BL       OS_CPU_SR_Restore
00002e  b13c              CBZ      r4,|L2.64|
000030  2003              MOVS     r0,#3                 ;122
000032  7020              STRB     r0,[r4,#0]            ;122
000034  8125              STRH     r5,[r4,#8]            ;123
000036  2000              MOVS     r0,#0                 ;124
000038  6060              STR      r0,[r4,#4]            ;124
00003a  4620              MOV      r0,r4                 ;128
00003c  f7fffffe          BL       OS_EventWaitListInit
                  |L2.64|
000040  4620              MOV      r0,r4                 ;130
000042  e7e4              B        |L2.14|
;;;132    
                          ENDP

                  |L2.68|
                          DCD      OSIntNesting
                  |L2.72|
                          DCD      OSEventFreeList

                          AREA ||i.OSSemDel||, CODE, READONLY, ALIGN=2

                  OSSemDel PROC
;;;173    #if OS_SEM_DEL_EN > 0u
;;;174    OS_EVENT  *OSSemDel (OS_EVENT  *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;175                         INT8U      opt,
;;;176                         INT8U     *perr)
;;;177    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;178        BOOLEAN    tasks_waiting;
;;;179        OS_EVENT  *pevent_return;
;;;180    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;181        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0900          MOV      r9,#0
;;;182    #endif
;;;183    
;;;184    
;;;185    
;;;186    #ifdef OS_SAFETY_CRITICAL
;;;187        if (perr == (INT8U *)0) {
;;;188            OS_SAFETY_CRITICAL_EXCEPTION();
;;;189            return ((OS_EVENT *)0);
;;;190        }
;;;191    #endif
;;;192    
;;;193    #if OS_ARG_CHK_EN > 0u
;;;194        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;195            *perr = OS_ERR_PEVENT_NULL;
;;;196            return (pevent);
;;;197        }
;;;198    #endif
;;;199        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2803              CMP      r0,#3
000012  d004              BEQ      |L3.30|
;;;200            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;201            return (pevent);
000018  4620              MOV      r0,r4
                  |L3.26|
;;;202        }
;;;203        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;204            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;205            return (pevent);
;;;206        }
;;;207        OS_ENTER_CRITICAL();
;;;208        if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on semaphore    */
;;;209            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;210        } else {
;;;211            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;212        }
;;;213        switch (opt) {
;;;214            case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
;;;215                 if (tasks_waiting == OS_FALSE) {
;;;216    #if OS_EVENT_NAME_EN > 0u
;;;217                     pevent->OSEventName    = (INT8U *)(void *)"?";
;;;218    #endif
;;;219                     pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;220                     pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
;;;221                     pevent->OSEventCnt     = 0u;
;;;222                     OSEventFreeList        = pevent;          /* Get next free event control block        */
;;;223                     OS_EXIT_CRITICAL();
;;;224                     *perr                  = OS_ERR_NONE;
;;;225                     pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
;;;226                 } else {
;;;227                     OS_EXIT_CRITICAL();
;;;228                     *perr                  = OS_ERR_TASK_WAITING;
;;;229                     pevent_return          = pevent;
;;;230                 }
;;;231                 break;
;;;232    
;;;233            case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
;;;234                 while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for semaphore    */
;;;235                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
;;;236                 }
;;;237    #if OS_EVENT_NAME_EN > 0u
;;;238                 pevent->OSEventName    = (INT8U *)(void *)"?";
;;;239    #endif
;;;240                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;241                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;242                 pevent->OSEventCnt     = 0u;
;;;243                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;244                 OS_EXIT_CRITICAL();
;;;245                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;246                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;247                 }
;;;248                 *perr                  = OS_ERR_NONE;
;;;249                 pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
;;;250                 break;
;;;251    
;;;252            default:
;;;253                 OS_EXIT_CRITICAL();
;;;254                 *perr                  = OS_ERR_INVALID_OPT;
;;;255                 pevent_return          = pevent;
;;;256                 break;
;;;257        }
;;;258        return (pevent_return);
;;;259    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L3.30|
00001e  482a              LDR      r0,|L3.200|
000020  7800              LDRB     r0,[r0,#0]            ;203  ; OSIntNesting
000022  b118              CBZ      r0,|L3.44|
000024  200f              MOVS     r0,#0xf               ;204
000026  7028              STRB     r0,[r5,#0]            ;204
000028  4620              MOV      r0,r4                 ;205
00002a  e7f6              B        |L3.26|
                  |L3.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  4681              MOV      r9,r0                 ;207
000032  7aa0              LDRB     r0,[r4,#0xa]          ;208
000034  b108              CBZ      r0,|L3.58|
000036  2701              MOVS     r7,#1                 ;209
000038  e000              B        |L3.60|
                  |L3.58|
00003a  2700              MOVS     r7,#0                 ;211
                  |L3.60|
00003c  f1b80f00          CMP      r8,#0                 ;213
000040  d003              BEQ      |L3.74|
000042  f1b80f01          CMP      r8,#1                 ;213
000046  d135              BNE      |L3.180|
000048  e017              B        |L3.122|
                  |L3.74|
00004a  b97f              CBNZ     r7,|L3.108|
00004c  2000              MOVS     r0,#0                 ;219
00004e  7020              STRB     r0,[r4,#0]            ;219
000050  481e              LDR      r0,|L3.204|
000052  6800              LDR      r0,[r0,#0]            ;220  ; OSEventFreeList
000054  6060              STR      r0,[r4,#4]            ;220
000056  2000              MOVS     r0,#0                 ;221
000058  8120              STRH     r0,[r4,#8]            ;221
00005a  481c              LDR      r0,|L3.204|
00005c  6004              STR      r4,[r0,#0]            ;222  ; OSEventFreeList
00005e  4648              MOV      r0,r9                 ;223
000060  f7fffffe          BL       OS_CPU_SR_Restore
000064  2000              MOVS     r0,#0                 ;224
000066  7028              STRB     r0,[r5,#0]            ;224
000068  2600              MOVS     r6,#0                 ;225
00006a  e005              B        |L3.120|
                  |L3.108|
00006c  4648              MOV      r0,r9                 ;227
00006e  f7fffffe          BL       OS_CPU_SR_Restore
000072  2049              MOVS     r0,#0x49              ;228
000074  7028              STRB     r0,[r5,#0]            ;228
000076  4626              MOV      r6,r4                 ;229
                  |L3.120|
000078  e023              B        |L3.194|
                  |L3.122|
00007a  e005              B        |L3.136|
                  |L3.124|
00007c  2302              MOVS     r3,#2                 ;235
00007e  2201              MOVS     r2,#1                 ;235
000080  2100              MOVS     r1,#0                 ;235
000082  4620              MOV      r0,r4                 ;235
000084  f7fffffe          BL       OS_EventTaskRdy
                  |L3.136|
000088  7aa0              LDRB     r0,[r4,#0xa]          ;234
00008a  2800              CMP      r0,#0                 ;234
00008c  d1f6              BNE      |L3.124|
00008e  7020              STRB     r0,[r4,#0]            ;240
000090  480e              LDR      r0,|L3.204|
000092  6800              LDR      r0,[r0,#0]            ;241  ; OSEventFreeList
000094  6060              STR      r0,[r4,#4]            ;241
000096  2000              MOVS     r0,#0                 ;242
000098  8120              STRH     r0,[r4,#8]            ;242
00009a  480c              LDR      r0,|L3.204|
00009c  6004              STR      r4,[r0,#0]            ;243  ; OSEventFreeList
00009e  4648              MOV      r0,r9                 ;244
0000a0  f7fffffe          BL       OS_CPU_SR_Restore
0000a4  2f01              CMP      r7,#1                 ;245
0000a6  d101              BNE      |L3.172|
0000a8  f7fffffe          BL       OS_Sched
                  |L3.172|
0000ac  2000              MOVS     r0,#0                 ;248
0000ae  7028              STRB     r0,[r5,#0]            ;248
0000b0  2600              MOVS     r6,#0                 ;249
0000b2  e006              B        |L3.194|
                  |L3.180|
0000b4  4648              MOV      r0,r9                 ;253
0000b6  f7fffffe          BL       OS_CPU_SR_Restore
0000ba  2007              MOVS     r0,#7                 ;254
0000bc  7028              STRB     r0,[r5,#0]            ;254
0000be  4626              MOV      r6,r4                 ;255
0000c0  bf00              NOP                            ;256
                  |L3.194|
0000c2  bf00              NOP                            ;231
0000c4  4630              MOV      r0,r6                 ;258
0000c6  e7a8              B        |L3.26|
;;;260    #endif
                          ENDP

                  |L3.200|
                          DCD      OSIntNesting
                  |L3.204|
                          DCD      OSEventFreeList

                          AREA ||i.OSSemPend||, CODE, READONLY, ALIGN=2

                  OSSemPend PROC
;;;294    /*$PAGE*/
;;;295    void  OSSemPend (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;296                     INT32U     timeout,
;;;297                     INT8U     *perr)
;;;298    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;299    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;300        OS_CPU_SR  cpu_sr = 0u;
00000a  2700              MOVS     r7,#0
;;;301    #endif
;;;302    
;;;303    
;;;304    
;;;305    #ifdef OS_SAFETY_CRITICAL
;;;306        if (perr == (INT8U *)0) {
;;;307            OS_SAFETY_CRITICAL_EXCEPTION();
;;;308            return;
;;;309        }
;;;310    #endif
;;;311    
;;;312    #if OS_ARG_CHK_EN > 0u
;;;313        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;314            *perr = OS_ERR_PEVENT_NULL;
;;;315            return;
;;;316        }
;;;317    #endif
;;;318        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
00000c  7828              LDRB     r0,[r5,#0]
00000e  2803              CMP      r0,#3
000010  d003              BEQ      |L4.26|
;;;319            *perr = OS_ERR_EVENT_TYPE;
000012  2001              MOVS     r0,#1
000014  7020              STRB     r0,[r4,#0]
                  |L4.22|
;;;320            return;
;;;321        }
;;;322        if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
;;;323            *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
;;;324            return;
;;;325        }
;;;326        if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
;;;327            *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
;;;328            return;
;;;329        }
;;;330        OS_ENTER_CRITICAL();
;;;331        if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
;;;332            pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
;;;333            OS_EXIT_CRITICAL();
;;;334            *perr = OS_ERR_NONE;
;;;335            return;
;;;336        }
;;;337                                                          /* Otherwise, must wait until event occurs       */
;;;338        OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
;;;339        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;340        OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
;;;341        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;342        OS_EXIT_CRITICAL();
;;;343        OS_Sched();                                       /* Find next highest priority task ready         */
;;;344        OS_ENTER_CRITICAL();
;;;345        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;346            case OS_STAT_PEND_OK:
;;;347                 *perr = OS_ERR_NONE;
;;;348                 break;
;;;349    
;;;350            case OS_STAT_PEND_ABORT:
;;;351                 *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;352                 break;
;;;353    
;;;354            case OS_STAT_PEND_TO:
;;;355            default:
;;;356                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;357                 *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;358                 break;
;;;359        }
;;;360        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;361        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;362        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;363    #if (OS_EVENT_MULTI_EN > 0u)
;;;364        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;365    #endif
;;;366        OS_EXIT_CRITICAL();
;;;367    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L4.26|
00001a  4831              LDR      r0,|L4.224|
00001c  7800              LDRB     r0,[r0,#0]            ;322  ; OSIntNesting
00001e  b110              CBZ      r0,|L4.38|
000020  2002              MOVS     r0,#2                 ;323
000022  7020              STRB     r0,[r4,#0]            ;323
000024  e7f7              B        |L4.22|
                  |L4.38|
000026  482f              LDR      r0,|L4.228|
000028  7800              LDRB     r0,[r0,#0]            ;326  ; OSLockNesting
00002a  b110              CBZ      r0,|L4.50|
00002c  200d              MOVS     r0,#0xd               ;327
00002e  7020              STRB     r0,[r4,#0]            ;327
000030  e7f1              B        |L4.22|
                  |L4.50|
000032  f7fffffe          BL       OS_CPU_SR_Save
000036  4607              MOV      r7,r0                 ;330
000038  8928              LDRH     r0,[r5,#8]            ;331
00003a  b140              CBZ      r0,|L4.78|
00003c  8928              LDRH     r0,[r5,#8]            ;332
00003e  1e40              SUBS     r0,r0,#1              ;332
000040  8128              STRH     r0,[r5,#8]            ;332
000042  4638              MOV      r0,r7                 ;333
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2000              MOVS     r0,#0                 ;334
00004a  7020              STRB     r0,[r4,#0]            ;334
00004c  e7e3              B        |L4.22|
                  |L4.78|
00004e  4826              LDR      r0,|L4.232|
000050  6800              LDR      r0,[r0,#0]            ;338  ; OSTCBCur
000052  f8900030          LDRB     r0,[r0,#0x30]         ;338
000056  f0400001          ORR      r0,r0,#1              ;338
00005a  4923              LDR      r1,|L4.232|
00005c  6809              LDR      r1,[r1,#0]            ;338  ; OSTCBCur
00005e  f8810030          STRB     r0,[r1,#0x30]         ;338
000062  2000              MOVS     r0,#0                 ;339
000064  4920              LDR      r1,|L4.232|
000066  6809              LDR      r1,[r1,#0]            ;339  ; OSTCBCur
000068  f8810031          STRB     r0,[r1,#0x31]         ;339
00006c  481e              LDR      r0,|L4.232|
00006e  6800              LDR      r0,[r0,#0]            ;340  ; OSTCBCur
000070  62c6              STR      r6,[r0,#0x2c]         ;340
000072  4628              MOV      r0,r5                 ;341
000074  f7fffffe          BL       OS_EventTaskWait
000078  4638              MOV      r0,r7                 ;342
00007a  f7fffffe          BL       OS_CPU_SR_Restore
00007e  f7fffffe          BL       OS_Sched
000082  f7fffffe          BL       OS_CPU_SR_Save
000086  4607              MOV      r7,r0                 ;344
000088  4817              LDR      r0,|L4.232|
00008a  6800              LDR      r0,[r0,#0]            ;345  ; OSTCBCur
00008c  f8900031          LDRB     r0,[r0,#0x31]         ;345
000090  b120              CBZ      r0,|L4.156|
000092  2801              CMP      r0,#1                 ;345
000094  d009              BEQ      |L4.170|
000096  2802              CMP      r0,#2                 ;345
000098  d106              BNE      |L4.168|
00009a  e002              B        |L4.162|
                  |L4.156|
00009c  2000              MOVS     r0,#0                 ;347
00009e  7020              STRB     r0,[r4,#0]            ;347
0000a0  e00b              B        |L4.186|
                  |L4.162|
0000a2  200e              MOVS     r0,#0xe               ;351
0000a4  7020              STRB     r0,[r4,#0]            ;351
0000a6  e008              B        |L4.186|
                  |L4.168|
0000a8  bf00              NOP                            ;354
                  |L4.170|
0000aa  4629              MOV      r1,r5                 ;356
0000ac  480e              LDR      r0,|L4.232|
0000ae  6800              LDR      r0,[r0,#0]            ;356  ; OSTCBCur
0000b0  f7fffffe          BL       OS_EventTaskRemove
0000b4  200a              MOVS     r0,#0xa               ;357
0000b6  7020              STRB     r0,[r4,#0]            ;357
0000b8  bf00              NOP                            ;358
                  |L4.186|
0000ba  bf00              NOP                            ;348
0000bc  2000              MOVS     r0,#0                 ;360
0000be  490a              LDR      r1,|L4.232|
0000c0  6809              LDR      r1,[r1,#0]            ;360  ; OSTCBCur
0000c2  f8810030          STRB     r0,[r1,#0x30]         ;360
0000c6  4908              LDR      r1,|L4.232|
0000c8  6809              LDR      r1,[r1,#0]            ;361  ; OSTCBCur
0000ca  f8810031          STRB     r0,[r1,#0x31]         ;361
0000ce  4906              LDR      r1,|L4.232|
0000d0  6809              LDR      r1,[r1,#0]            ;362  ; OSTCBCur
0000d2  61c8              STR      r0,[r1,#0x1c]         ;362
0000d4  4638              MOV      r0,r7                 ;366
0000d6  f7fffffe          BL       OS_CPU_SR_Restore
0000da  bf00              NOP      
0000dc  e79b              B        |L4.22|
;;;368    
                          ENDP

0000de  0000              DCW      0x0000
                  |L4.224|
                          DCD      OSIntNesting
                  |L4.228|
                          DCD      OSLockNesting
                  |L4.232|
                          DCD      OSTCBCur

                          AREA ||i.OSSemPendAbort||, CODE, READONLY, ALIGN=1

                  OSSemPendAbort PROC
;;;403    #if OS_SEM_PEND_ABORT_EN > 0u
;;;404    INT8U  OSSemPendAbort (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;405                           INT8U      opt,
;;;406                           INT8U     *perr)
;;;407    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;408        INT8U      nbr_tasks;
;;;409    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;410        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;411    #endif
;;;412    
;;;413    
;;;414    
;;;415    #ifdef OS_SAFETY_CRITICAL
;;;416        if (perr == (INT8U *)0) {
;;;417            OS_SAFETY_CRITICAL_EXCEPTION();
;;;418            return (0u);
;;;419        }
;;;420    #endif
;;;421    
;;;422    #if OS_ARG_CHK_EN > 0u
;;;423        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;424            *perr = OS_ERR_PEVENT_NULL;
;;;425            return (0u);
;;;426        }
;;;427    #endif
;;;428        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
00000e  7820              LDRB     r0,[r4,#0]
000010  2803              CMP      r0,#3
000012  d004              BEQ      |L5.30|
;;;429            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;430            return (0u);
000018  2000              MOVS     r0,#0
                  |L5.26|
;;;431        }
;;;432        OS_ENTER_CRITICAL();
;;;433        if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting on semaphore?         */
;;;434            nbr_tasks = 0u;
;;;435            switch (opt) {
;;;436                case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
;;;437                     while (pevent->OSEventGrp != 0u) {   /* Yes, ready ALL tasks waiting on semaphore     */
;;;438                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
;;;439                         nbr_tasks++;
;;;440                     }
;;;441                     break;
;;;442    
;;;443                case OS_PEND_OPT_NONE:
;;;444                default:                                  /* No,  ready HPT       waiting on semaphore     */
;;;445                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
;;;446                     nbr_tasks++;
;;;447                     break;
;;;448            }
;;;449            OS_EXIT_CRITICAL();
;;;450            OS_Sched();                                   /* Find HPT ready to run                         */
;;;451            *perr = OS_ERR_PEND_ABORT;
;;;452            return (nbr_tasks);
;;;453        }
;;;454        OS_EXIT_CRITICAL();
;;;455        *perr = OS_ERR_NONE;
;;;456        return (0u);                                      /* No tasks waiting on semaphore                 */
;;;457    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L5.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4680              MOV      r8,r0                 ;432
000024  7aa0              LDRB     r0,[r4,#0xa]          ;433
000026  b320              CBZ      r0,|L5.114|
000028  2600              MOVS     r6,#0                 ;434
00002a  b17f              CBZ      r7,|L5.76|
00002c  2f01              CMP      r7,#1                 ;435
00002e  d10c              BNE      |L5.74|
000030  e007              B        |L5.66|
                  |L5.50|
000032  2302              MOVS     r3,#2                 ;438
000034  2201              MOVS     r2,#1                 ;438
000036  2100              MOVS     r1,#0                 ;438
000038  4620              MOV      r0,r4                 ;438
00003a  f7fffffe          BL       OS_EventTaskRdy
00003e  1c70              ADDS     r0,r6,#1              ;439
000040  b2c6              UXTB     r6,r0                 ;439
                  |L5.66|
000042  7aa0              LDRB     r0,[r4,#0xa]          ;437
000044  2800              CMP      r0,#0                 ;437
000046  d1f4              BNE      |L5.50|
000048  e009              B        |L5.94|
                  |L5.74|
00004a  bf00              NOP                            ;443
                  |L5.76|
00004c  2302              MOVS     r3,#2                 ;445
00004e  2201              MOVS     r2,#1                 ;445
000050  2100              MOVS     r1,#0                 ;445
000052  4620              MOV      r0,r4                 ;445
000054  f7fffffe          BL       OS_EventTaskRdy
000058  1c70              ADDS     r0,r6,#1              ;446
00005a  b2c6              UXTB     r6,r0                 ;446
00005c  bf00              NOP                            ;447
                  |L5.94|
00005e  bf00              NOP                            ;441
000060  4640              MOV      r0,r8                 ;449
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  f7fffffe          BL       OS_Sched
00006a  200e              MOVS     r0,#0xe               ;451
00006c  7028              STRB     r0,[r5,#0]            ;451
00006e  4630              MOV      r0,r6                 ;452
000070  e7d3              B        |L5.26|
                  |L5.114|
000072  4640              MOV      r0,r8                 ;454
000074  f7fffffe          BL       OS_CPU_SR_Restore
000078  2000              MOVS     r0,#0                 ;455
00007a  7028              STRB     r0,[r5,#0]            ;455
00007c  bf00              NOP                            ;456
00007e  e7cc              B        |L5.26|
;;;458    #endif
                          ENDP


                          AREA ||i.OSSemPost||, CODE, READONLY, ALIGN=1

                  OSSemPost PROC
;;;478    
;;;479    INT8U  OSSemPost (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;480    {
000002  4604              MOV      r4,r0
;;;481    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;482        OS_CPU_SR  cpu_sr = 0u;
000004  2500              MOVS     r5,#0
;;;483    #endif
;;;484    
;;;485    
;;;486    
;;;487    #if OS_ARG_CHK_EN > 0u
;;;488        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;489            return (OS_ERR_PEVENT_NULL);
;;;490        }
;;;491    #endif
;;;492        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
000006  7820              LDRB     r0,[r4,#0]
000008  2803              CMP      r0,#3
00000a  d001              BEQ      |L6.16|
;;;493            return (OS_ERR_EVENT_TYPE);
00000c  2001              MOVS     r0,#1
                  |L6.14|
;;;494        }
;;;495        OS_ENTER_CRITICAL();
;;;496        if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
;;;497                                                          /* Ready HPT waiting on event                    */
;;;498            (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
;;;499            OS_EXIT_CRITICAL();
;;;500            OS_Sched();                                   /* Find HPT ready to run                         */
;;;501            return (OS_ERR_NONE);
;;;502        }
;;;503        if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
;;;504            pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
;;;505            OS_EXIT_CRITICAL();
;;;506            return (OS_ERR_NONE);
;;;507        }
;;;508        OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
;;;509        return (OS_ERR_SEM_OVF);
;;;510    }
00000e  bd70              POP      {r4-r6,pc}
                  |L6.16|
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4605              MOV      r5,r0                 ;495
000016  7aa0              LDRB     r0,[r4,#0xa]          ;496
000018  b160              CBZ      r0,|L6.52|
00001a  2300              MOVS     r3,#0                 ;498
00001c  2201              MOVS     r2,#1                 ;498
00001e  4619              MOV      r1,r3                 ;498
000020  4620              MOV      r0,r4                 ;498
000022  f7fffffe          BL       OS_EventTaskRdy
000026  4628              MOV      r0,r5                 ;499
000028  f7fffffe          BL       OS_CPU_SR_Restore
00002c  f7fffffe          BL       OS_Sched
000030  2000              MOVS     r0,#0                 ;501
000032  e7ec              B        |L6.14|
                  |L6.52|
000034  8920              LDRH     r0,[r4,#8]            ;503
000036  f64f71ff          MOV      r1,#0xffff            ;503
00003a  4288              CMP      r0,r1                 ;503
00003c  d207              BCS      |L6.78|
00003e  8920              LDRH     r0,[r4,#8]            ;504
000040  1c40              ADDS     r0,r0,#1              ;504
000042  8120              STRH     r0,[r4,#8]            ;504
000044  4628              MOV      r0,r5                 ;505
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  2000              MOVS     r0,#0                 ;506
00004c  e7df              B        |L6.14|
                  |L6.78|
00004e  4628              MOV      r0,r5                 ;508
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  2033              MOVS     r0,#0x33              ;509
000056  e7da              B        |L6.14|
;;;511    
                          ENDP


                          AREA ||i.OSSemQuery||, CODE, READONLY, ALIGN=1

                  OSSemQuery PROC
;;;532    #if OS_SEM_QUERY_EN > 0u
;;;533    INT8U  OSSemQuery (OS_EVENT     *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;534                       OS_SEM_DATA  *p_sem_data)
;;;535    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;536        INT8U       i;
;;;537        OS_PRIO    *psrc;
;;;538        OS_PRIO    *pdest;
;;;539    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;540        OS_CPU_SR   cpu_sr = 0u;
000008  f04f0900          MOV      r9,#0
;;;541    #endif
;;;542    
;;;543    
;;;544    
;;;545    #if OS_ARG_CHK_EN > 0u
;;;546        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;547            return (OS_ERR_PEVENT_NULL);
;;;548        }
;;;549        if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
;;;550            return (OS_ERR_PDATA_NULL);
;;;551        }
;;;552    #endif
;;;553        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
00000c  7820              LDRB     r0,[r4,#0]
00000e  2803              CMP      r0,#3
000010  d002              BEQ      |L7.24|
;;;554            return (OS_ERR_EVENT_TYPE);
000012  2001              MOVS     r0,#1
                  |L7.20|
;;;555        }
;;;556        OS_ENTER_CRITICAL();
;;;557        p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
;;;558        psrc                   = &pevent->OSEventTbl[0];
;;;559        pdest                  = &p_sem_data->OSEventTbl[0];
;;;560        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
;;;561            *pdest++ = *psrc++;
;;;562        }
;;;563        p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
;;;564        OS_EXIT_CRITICAL();
;;;565        return (OS_ERR_NONE);
;;;566    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L7.24|
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4681              MOV      r9,r0                 ;556
00001e  7aa0              LDRB     r0,[r4,#0xa]          ;557
000020  72a8              STRB     r0,[r5,#0xa]          ;557
000022  f104070b          ADD      r7,r4,#0xb            ;558
000026  f1050802          ADD      r8,r5,#2              ;559
00002a  2600              MOVS     r6,#0                 ;560
00002c  e005              B        |L7.58|
                  |L7.46|
00002e  f8170b01          LDRB     r0,[r7],#1            ;561
000032  f8080b01          STRB     r0,[r8],#1            ;561
000036  1c70              ADDS     r0,r6,#1              ;560
000038  b2c6              UXTB     r6,r0                 ;560
                  |L7.58|
00003a  2e08              CMP      r6,#8                 ;560
00003c  d3f7              BCC      |L7.46|
00003e  8920              LDRH     r0,[r4,#8]            ;563
000040  8028              STRH     r0,[r5,#0]            ;563
000042  4648              MOV      r0,r9                 ;564
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2000              MOVS     r0,#0                 ;565
00004a  e7e3              B        |L7.20|
;;;567    #endif                                                     /* OS_SEM_QUERY_EN                          */
                          ENDP


                          AREA ||i.OSSemSet||, CODE, READONLY, ALIGN=1

                  OSSemSet PROC
;;;594    #if OS_SEM_SET_EN > 0u
;;;595    void  OSSemSet (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;596                    INT16U     cnt,
;;;597                    INT8U     *perr)
;;;598    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;599    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;600        OS_CPU_SR  cpu_sr = 0u;
00000a  2700              MOVS     r7,#0
;;;601    #endif
;;;602    
;;;603    
;;;604    
;;;605    #ifdef OS_SAFETY_CRITICAL
;;;606        if (perr == (INT8U *)0) {
;;;607            OS_SAFETY_CRITICAL_EXCEPTION();
;;;608            return;
;;;609        }
;;;610    #endif
;;;611    
;;;612    #if OS_ARG_CHK_EN > 0u
;;;613        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;614            *perr = OS_ERR_PEVENT_NULL;
;;;615            return;
;;;616        }
;;;617    #endif
;;;618        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
00000c  7820              LDRB     r0,[r4,#0]
00000e  2803              CMP      r0,#3
000010  d003              BEQ      |L8.26|
;;;619            *perr = OS_ERR_EVENT_TYPE;
000012  2001              MOVS     r0,#1
000014  7028              STRB     r0,[r5,#0]
                  |L8.22|
;;;620            return;
;;;621        }
;;;622        OS_ENTER_CRITICAL();
;;;623        *perr = OS_ERR_NONE;
;;;624        if (pevent->OSEventCnt > 0u) {                    /* See if semaphore already has a count          */
;;;625            pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
;;;626        } else {                                          /* No                                            */
;;;627            if (pevent->OSEventGrp == 0u) {               /*      See if task(s) waiting?                  */
;;;628                pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
;;;629            } else {
;;;630                *perr              = OS_ERR_TASK_WAITING;
;;;631            }
;;;632        }
;;;633        OS_EXIT_CRITICAL();
;;;634    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L8.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4607              MOV      r7,r0                 ;622
000020  2000              MOVS     r0,#0                 ;623
000022  7028              STRB     r0,[r5,#0]            ;623
000024  8920              LDRH     r0,[r4,#8]            ;624
000026  b108              CBZ      r0,|L8.44|
000028  8126              STRH     r6,[r4,#8]            ;625
00002a  e005              B        |L8.56|
                  |L8.44|
00002c  7aa0              LDRB     r0,[r4,#0xa]          ;627
00002e  b908              CBNZ     r0,|L8.52|
000030  8126              STRH     r6,[r4,#8]            ;628
000032  e001              B        |L8.56|
                  |L8.52|
000034  2049              MOVS     r0,#0x49              ;630
000036  7028              STRB     r0,[r5,#0]            ;630
                  |L8.56|
000038  4638              MOV      r0,r7                 ;633
00003a  f7fffffe          BL       OS_CPU_SR_Restore
00003e  bf00              NOP      
000040  e7e9              B        |L8.22|
;;;635    #endif
                          ENDP

