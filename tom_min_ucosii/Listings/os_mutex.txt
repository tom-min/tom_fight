; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\os_mutex.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_mutex.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Libraries\CMSIS\CM3\CoreSupport -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I.\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\main -I.\User -I.\User\include -I.\fatfs -I.\Utilities\STM32_EVAL -I.\Utilities\STM32_EVAL\Common -I.\Utilities\STM32_EVAL\STM3210E_EVAL -I.\UCOSII\CORE -I.\UCOSII\PORTS -I.\UCOSII\CONFIG -I.\RTE\_Target_1 -I"D:\program files (x86)\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"D:\program files (x86)\keil5\ARM\CMSIS\Include" -D__UVISION_VERSION=523 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL --omf_browse=.\objects\os_mutex.crf UCOSII\CORE\os_mutex.c]
                          THUMB

                          AREA ||i.OSMutexAccept||, CODE, READONLY, ALIGN=2

                  OSMutexAccept PROC
;;;85     #if OS_MUTEX_ACCEPT_EN > 0u
;;;86     BOOLEAN  OSMutexAccept (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;87                             INT8U     *perr)
;;;88     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;89         INT8U      pcp;                                    /* Priority Ceiling Priority (PCP)              */
;;;90     #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;91         OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;92     #endif
;;;93     
;;;94     
;;;95     
;;;96     #ifdef OS_SAFETY_CRITICAL
;;;97         if (perr == (INT8U *)0) {
;;;98             OS_SAFETY_CRITICAL_EXCEPTION();
;;;99             return (OS_FALSE);
;;;100        }
;;;101    #endif
;;;102    
;;;103    #if OS_ARG_CHK_EN > 0u
;;;104        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;105            *perr = OS_ERR_PEVENT_NULL;
;;;106            return (OS_FALSE);
;;;107        }
;;;108    #endif
;;;109        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
00000a  7820              LDRB     r0,[r4,#0]
00000c  2804              CMP      r0,#4
00000e  d004              BEQ      |L1.26|
;;;110            *perr = OS_ERR_EVENT_TYPE;
000010  2001              MOVS     r0,#1
000012  7028              STRB     r0,[r5,#0]
;;;111            return (OS_FALSE);
000014  2000              MOVS     r0,#0
                  |L1.22|
;;;112        }
;;;113        if (OSIntNesting > 0u) {                           /* Make sure it's not called from an ISR        */
;;;114            *perr = OS_ERR_PEND_ISR;
;;;115            return (OS_FALSE);
;;;116        }
;;;117        OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
;;;118        pcp = (INT8U)(pevent->OSEventCnt >> 8u);           /* Get PCP from mutex                           */
;;;119        if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;120            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
;;;121            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
;;;122            pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
;;;123            if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
;;;124                (OSTCBCur->OSTCBPrio <= pcp)) {            /*      PCP 'must' have a SMALLER prio ...      */
;;;125                 OS_EXIT_CRITICAL();                       /*      ... than current task!                  */
;;;126                *perr = OS_ERR_PCP_LOWER;
;;;127            } else {
;;;128                 OS_EXIT_CRITICAL();
;;;129                *perr = OS_ERR_NONE;
;;;130            }
;;;131            return (OS_TRUE);
;;;132        }
;;;133        OS_EXIT_CRITICAL();
;;;134        *perr = OS_ERR_NONE;
;;;135        return (OS_FALSE);
;;;136    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L1.26|
00001a  481c              LDR      r0,|L1.140|
00001c  7800              LDRB     r0,[r0,#0]            ;113  ; OSIntNesting
00001e  b118              CBZ      r0,|L1.40|
000020  2002              MOVS     r0,#2                 ;114
000022  7028              STRB     r0,[r5,#0]            ;114
000024  2000              MOVS     r0,#0                 ;115
000026  e7f6              B        |L1.22|
                  |L1.40|
000028  f7fffffe          BL       OS_CPU_SR_Save
00002c  4607              MOV      r7,r0                 ;117
00002e  8920              LDRH     r0,[r4,#8]            ;118
000030  1206              ASRS     r6,r0,#8              ;118
000032  7a20              LDRB     r0,[r4,#8]            ;119
000034  28ff              CMP      r0,#0xff              ;119
000036  d122              BNE      |L1.126|
000038  8920              LDRH     r0,[r4,#8]            ;120
00003a  f400407f          AND      r0,r0,#0xff00         ;120
00003e  8120              STRH     r0,[r4,#8]            ;120
000040  8920              LDRH     r0,[r4,#8]            ;121
000042  4913              LDR      r1,|L1.144|
000044  6809              LDR      r1,[r1,#0]            ;121  ; OSTCBCur
000046  f8911032          LDRB     r1,[r1,#0x32]         ;121
00004a  4308              ORRS     r0,r0,r1              ;121
00004c  8120              STRH     r0,[r4,#8]            ;121
00004e  4810              LDR      r0,|L1.144|
000050  6800              LDR      r0,[r0,#0]            ;122  ; OSTCBCur
000052  6060              STR      r0,[r4,#4]            ;122
000054  2eff              CMP      r6,#0xff              ;123
000056  d00b              BEQ      |L1.112|
000058  480d              LDR      r0,|L1.144|
00005a  6800              LDR      r0,[r0,#0]            ;124  ; OSTCBCur
00005c  f8900032          LDRB     r0,[r0,#0x32]         ;124
000060  42b0              CMP      r0,r6                 ;124
000062  dc05              BGT      |L1.112|
000064  4638              MOV      r0,r7                 ;125
000066  f7fffffe          BL       OS_CPU_SR_Restore
00006a  2078              MOVS     r0,#0x78              ;126
00006c  7028              STRB     r0,[r5,#0]            ;126
00006e  e004              B        |L1.122|
                  |L1.112|
000070  4638              MOV      r0,r7                 ;128
000072  f7fffffe          BL       OS_CPU_SR_Restore
000076  2000              MOVS     r0,#0                 ;129
000078  7028              STRB     r0,[r5,#0]            ;129
                  |L1.122|
00007a  2001              MOVS     r0,#1                 ;131
00007c  e7cb              B        |L1.22|
                  |L1.126|
00007e  4638              MOV      r0,r7                 ;133
000080  f7fffffe          BL       OS_CPU_SR_Restore
000084  2000              MOVS     r0,#0                 ;134
000086  7028              STRB     r0,[r5,#0]            ;134
000088  bf00              NOP                            ;135
00008a  e7c4              B        |L1.22|
;;;137    #endif
                          ENDP

                  |L1.140|
                          DCD      OSIntNesting
                  |L1.144|
                          DCD      OSTCBCur

                          AREA ||i.OSMutexCreate||, CODE, READONLY, ALIGN=2

                  OSMutexCreate PROC
;;;176    
;;;177    OS_EVENT  *OSMutexCreate (INT8U   prio,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;178                              INT8U  *perr)
;;;179    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;180        OS_EVENT  *pevent;
;;;181    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;182        OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;183    #endif
;;;184    
;;;185    
;;;186    
;;;187    #ifdef OS_SAFETY_CRITICAL
;;;188        if (perr == (INT8U *)0) {
;;;189            OS_SAFETY_CRITICAL_EXCEPTION();
;;;190            return ((OS_EVENT *)0);
;;;191        }
;;;192    #endif
;;;193    
;;;194    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;195        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;196            OS_SAFETY_CRITICAL_EXCEPTION();
;;;197            return ((OS_EVENT *)0);
;;;198        }
;;;199    #endif
;;;200    
;;;201    #if OS_ARG_CHK_EN > 0u
;;;202        if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
;;;203            if (prio >= OS_LOWEST_PRIO) {                      /* Validate PCP                             */
;;;204               *perr = OS_ERR_PRIO_INVALID;
;;;205                return ((OS_EVENT *)0);
;;;206            }
;;;207        }
;;;208    #endif
;;;209        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
00000a  4821              LDR      r0,|L2.144|
00000c  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000e  b120              CBZ      r0,|L2.26|
;;;210            *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
000010  2010              MOVS     r0,#0x10
000012  7030              STRB     r0,[r6,#0]
;;;211            return ((OS_EVENT *)0);
000014  2000              MOVS     r0,#0
                  |L2.22|
;;;212        }
;;;213        OS_ENTER_CRITICAL();
;;;214        if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
;;;215            if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {           /* Mutex priority must not already exist    */
;;;216                OS_EXIT_CRITICAL();                            /* Task already exist at priority ...       */
;;;217               *perr = OS_ERR_PRIO_EXIST;                      /* ... ceiling priority                     */
;;;218                return ((OS_EVENT *)0);
;;;219            }
;;;220            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;              /* Reserve the table entry                  */
;;;221        }
;;;222    
;;;223        pevent = OSEventFreeList;                              /* Get next free event control block        */
;;;224        if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
;;;225            if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
;;;226                OSTCBPrioTbl[prio] = (OS_TCB *)0;              /* No, Release the table entry              */
;;;227            }
;;;228            OS_EXIT_CRITICAL();
;;;229           *perr = OS_ERR_PEVENT_NULL;                         /* No more event control blocks             */
;;;230            return (pevent);
;;;231        }
;;;232        OSEventFreeList     = (OS_EVENT *)OSEventFreeList->OSEventPtr; /* Adjust the free list             */
;;;233        OS_EXIT_CRITICAL();
;;;234        pevent->OSEventType = OS_EVENT_TYPE_MUTEX;
;;;235        pevent->OSEventCnt  = (INT16U)((INT16U)prio << 8u) | OS_MUTEX_AVAILABLE; /* Resource is avail.     */
;;;236        pevent->OSEventPtr  = (void *)0;                       /* No task owning the mutex                 */
;;;237    #if OS_EVENT_NAME_EN > 0u
;;;238        pevent->OSEventName = (INT8U *)(void *)"?";
;;;239    #endif
;;;240        OS_EventWaitListInit(pevent);
;;;241       *perr = OS_ERR_NONE;
;;;242        return (pevent);
;;;243    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L2.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4607              MOV      r7,r0                 ;213
000020  2cff              CMP      r4,#0xff              ;214
000022  d00e              BEQ      |L2.66|
000024  481b              LDR      r0,|L2.148|
000026  f8500024          LDR      r0,[r0,r4,LSL #2]     ;215
00002a  b130              CBZ      r0,|L2.58|
00002c  4638              MOV      r0,r7                 ;216
00002e  f7fffffe          BL       OS_CPU_SR_Restore
000032  2028              MOVS     r0,#0x28              ;217
000034  7030              STRB     r0,[r6,#0]            ;217
000036  2000              MOVS     r0,#0                 ;218
000038  e7ed              B        |L2.22|
                  |L2.58|
00003a  2001              MOVS     r0,#1                 ;220
00003c  4915              LDR      r1,|L2.148|
00003e  f8410024          STR      r0,[r1,r4,LSL #2]     ;220
                  |L2.66|
000042  4815              LDR      r0,|L2.152|
000044  6805              LDR      r5,[r0,#0]            ;223  ; OSEventFreeList
000046  b965              CBNZ     r5,|L2.98|
000048  2cff              CMP      r4,#0xff              ;225
00004a  d003              BEQ      |L2.84|
00004c  2000              MOVS     r0,#0                 ;226
00004e  4911              LDR      r1,|L2.148|
000050  f8410024          STR      r0,[r1,r4,LSL #2]     ;226
                  |L2.84|
000054  4638              MOV      r0,r7                 ;228
000056  f7fffffe          BL       OS_CPU_SR_Restore
00005a  2004              MOVS     r0,#4                 ;229
00005c  7030              STRB     r0,[r6,#0]            ;229
00005e  4628              MOV      r0,r5                 ;230
000060  e7d9              B        |L2.22|
                  |L2.98|
000062  480d              LDR      r0,|L2.152|
000064  6800              LDR      r0,[r0,#0]            ;232  ; OSEventFreeList
000066  6840              LDR      r0,[r0,#4]            ;232
000068  490b              LDR      r1,|L2.152|
00006a  6008              STR      r0,[r1,#0]            ;232  ; OSEventFreeList
00006c  4638              MOV      r0,r7                 ;233
00006e  f7fffffe          BL       OS_CPU_SR_Restore
000072  2004              MOVS     r0,#4                 ;234
000074  7028              STRB     r0,[r5,#0]            ;234
000076  20ff              MOVS     r0,#0xff              ;235
000078  ea402004          ORR      r0,r0,r4,LSL #8       ;235
00007c  8128              STRH     r0,[r5,#8]            ;235
00007e  2000              MOVS     r0,#0                 ;236
000080  6068              STR      r0,[r5,#4]            ;236
000082  4628              MOV      r0,r5                 ;240
000084  f7fffffe          BL       OS_EventWaitListInit
000088  2000              MOVS     r0,#0                 ;241
00008a  7030              STRB     r0,[r6,#0]            ;241
00008c  4628              MOV      r0,r5                 ;242
00008e  e7c2              B        |L2.22|
;;;244    
                          ENDP

                  |L2.144|
                          DCD      OSIntNesting
                  |L2.148|
                          DCD      OSTCBPrioTbl
                  |L2.152|
                          DCD      OSEventFreeList

                          AREA ||i.OSMutexDel||, CODE, READONLY, ALIGN=2

                  OSMutexDel PROC
;;;286    #if OS_MUTEX_DEL_EN > 0u
;;;287    OS_EVENT  *OSMutexDel (OS_EVENT  *pevent,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;288                           INT8U      opt,
;;;289                           INT8U     *perr)
;;;290    {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
000008  4616              MOV      r6,r2
;;;291        BOOLEAN    tasks_waiting;
;;;292        OS_EVENT  *pevent_return;
;;;293        INT8U      pcp;                                        /* Priority ceiling priority                */
;;;294        INT8U      prio;
;;;295        OS_TCB    *ptcb;
;;;296    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;297        OS_CPU_SR  cpu_sr = 0u;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;298    #endif
;;;299    
;;;300    
;;;301    
;;;302    #ifdef OS_SAFETY_CRITICAL
;;;303        if (perr == (INT8U *)0) {
;;;304            OS_SAFETY_CRITICAL_EXCEPTION();
;;;305            return ((OS_EVENT *)0);
;;;306        }
;;;307    #endif
;;;308    
;;;309    #if OS_ARG_CHK_EN > 0u
;;;310        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;311            *perr = OS_ERR_PEVENT_NULL;
;;;312            return (pevent);
;;;313        }
;;;314    #endif
;;;315        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2804              CMP      r0,#4
000012  d004              BEQ      |L3.30|
;;;316            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7030              STRB     r0,[r6,#0]
;;;317            return (pevent);
000018  4620              MOV      r0,r4
                  |L3.26|
;;;318        }
;;;319        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;320            *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
;;;321            return (pevent);
;;;322        }
;;;323        OS_ENTER_CRITICAL();
;;;324        if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mutex        */
;;;325            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;326        } else {
;;;327            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;328        }
;;;329        switch (opt) {
;;;330            case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
;;;331                 if (tasks_waiting == OS_FALSE) {
;;;332    #if OS_EVENT_NAME_EN > 0u
;;;333                     pevent->OSEventName   = (INT8U *)(void *)"?";
;;;334    #endif
;;;335                     pcp                   = (INT8U)(pevent->OSEventCnt >> 8u);
;;;336                     if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;337                         OSTCBPrioTbl[pcp] = (OS_TCB *)0;      /* Free up the PCP                          */
;;;338                     }
;;;339                     pevent->OSEventType   = OS_EVENT_TYPE_UNUSED;
;;;340                     pevent->OSEventPtr    = OSEventFreeList;  /* Return Event Control Block to free list  */
;;;341                     pevent->OSEventCnt    = 0u;
;;;342                     OSEventFreeList       = pevent;
;;;343                     OS_EXIT_CRITICAL();
;;;344                     *perr                 = OS_ERR_NONE;
;;;345                     pevent_return         = (OS_EVENT *)0;    /* Mutex has been deleted                   */
;;;346                 } else {
;;;347                     OS_EXIT_CRITICAL();
;;;348                     *perr                 = OS_ERR_TASK_WAITING;
;;;349                     pevent_return         = pevent;
;;;350                 }
;;;351                 break;
;;;352    
;;;353            case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
;;;354                 pcp  = (INT8U)(pevent->OSEventCnt >> 8u);                       /* Get PCP of mutex       */
;;;355                 if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;356                     prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8); /* Get owner's orig prio  */
;;;357                     ptcb = (OS_TCB *)pevent->OSEventPtr;
;;;358                     if (ptcb != (OS_TCB *)0) {                /* See if any task owns the mutex           */
;;;359                         if (ptcb->OSTCBPrio == pcp) {         /* See if original prio was changed         */
;;;360                             OSMutex_RdyAtPrio(ptcb, prio);    /* Yes, Restore the task's original prio    */
;;;361                         }
;;;362                     }
;;;363                 }
;;;364                 while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mutex        */
;;;365                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_ABORT);
;;;366                 }
;;;367    #if OS_EVENT_NAME_EN > 0u
;;;368                 pevent->OSEventName   = (INT8U *)(void *)"?";
;;;369    #endif
;;;370                 pcp                   = (INT8U)(pevent->OSEventCnt >> 8u);
;;;371                 if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;372                     OSTCBPrioTbl[pcp] = (OS_TCB *)0;          /* Free up the PCP                          */
;;;373                 }
;;;374                 pevent->OSEventType   = OS_EVENT_TYPE_UNUSED;
;;;375                 pevent->OSEventPtr    = OSEventFreeList;      /* Return Event Control Block to free list  */
;;;376                 pevent->OSEventCnt    = 0u;
;;;377                 OSEventFreeList       = pevent;               /* Get next free event control block        */
;;;378                 OS_EXIT_CRITICAL();
;;;379                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;380                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;381                 }
;;;382                 *perr         = OS_ERR_NONE;
;;;383                 pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
;;;384                 break;
;;;385    
;;;386            default:
;;;387                 OS_EXIT_CRITICAL();
;;;388                 *perr         = OS_ERR_INVALID_OPT;
;;;389                 pevent_return = pevent;
;;;390                 break;
;;;391        }
;;;392        return (pevent_return);
;;;393    }
00001a  e8bd8ff8          POP      {r3-r11,pc}
                  |L3.30|
00001e  483f              LDR      r0,|L3.284|
000020  7800              LDRB     r0,[r0,#0]            ;319  ; OSIntNesting
000022  b118              CBZ      r0,|L3.44|
000024  200f              MOVS     r0,#0xf               ;320
000026  7030              STRB     r0,[r6,#0]            ;320
000028  4620              MOV      r0,r4                 ;321
00002a  e7f6              B        |L3.26|
                  |L3.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  9000              STR      r0,[sp,#0]            ;323
000032  7aa0              LDRB     r0,[r4,#0xa]          ;324
000034  b110              CBZ      r0,|L3.60|
000036  f04f0801          MOV      r8,#1                 ;325
00003a  e001              B        |L3.64|
                  |L3.60|
00003c  f04f0800          MOV      r8,#0                 ;327
                  |L3.64|
000040  f1ba0f00          CMP      r10,#0                ;329
000044  d003              BEQ      |L3.78|
000046  f1ba0f01          CMP      r10,#1                ;329
00004a  d15c              BNE      |L3.262|
00004c  e021              B        |L3.146|
                  |L3.78|
00004e  f1b80f00          CMP      r8,#0                 ;331
000052  d117              BNE      |L3.132|
000054  8920              LDRH     r0,[r4,#8]            ;335
000056  1205              ASRS     r5,r0,#8              ;335
000058  2dff              CMP      r5,#0xff              ;336
00005a  d003              BEQ      |L3.100|
00005c  2000              MOVS     r0,#0                 ;337
00005e  4930              LDR      r1,|L3.288|
000060  f8410025          STR      r0,[r1,r5,LSL #2]     ;337
                  |L3.100|
000064  2000              MOVS     r0,#0                 ;339
000066  7020              STRB     r0,[r4,#0]            ;339
000068  482e              LDR      r0,|L3.292|
00006a  6800              LDR      r0,[r0,#0]            ;340  ; OSEventFreeList
00006c  6060              STR      r0,[r4,#4]            ;340
00006e  2000              MOVS     r0,#0                 ;341
000070  8120              STRH     r0,[r4,#8]            ;341
000072  482c              LDR      r0,|L3.292|
000074  6004              STR      r4,[r0,#0]            ;342  ; OSEventFreeList
000076  9800              LDR      r0,[sp,#0]            ;343
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  2000              MOVS     r0,#0                 ;344
00007e  7030              STRB     r0,[r6,#0]            ;344
000080  2700              MOVS     r7,#0                 ;345
000082  e005              B        |L3.144|
                  |L3.132|
000084  9800              LDR      r0,[sp,#0]            ;347
000086  f7fffffe          BL       OS_CPU_SR_Restore
00008a  2049              MOVS     r0,#0x49              ;348
00008c  7030              STRB     r0,[r6,#0]            ;348
00008e  4627              MOV      r7,r4                 ;349
                  |L3.144|
000090  e040              B        |L3.276|
                  |L3.146|
000092  8920              LDRH     r0,[r4,#8]            ;354
000094  1205              ASRS     r5,r0,#8              ;354
000096  2dff              CMP      r5,#0xff              ;355
000098  d00e              BEQ      |L3.184|
00009a  f894b008          LDRB     r11,[r4,#8]           ;356
00009e  f8d49004          LDR      r9,[r4,#4]            ;357
0000a2  f1b90f00          CMP      r9,#0                 ;358
0000a6  d007              BEQ      |L3.184|
0000a8  f8990032          LDRB     r0,[r9,#0x32]         ;359
0000ac  42a8              CMP      r0,r5                 ;359
0000ae  d103              BNE      |L3.184|
0000b0  4659              MOV      r1,r11                ;360
0000b2  4648              MOV      r0,r9                 ;360
0000b4  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L3.184|
0000b8  e005              B        |L3.198|
                  |L3.186|
0000ba  2302              MOVS     r3,#2                 ;365
0000bc  2210              MOVS     r2,#0x10              ;365
0000be  2100              MOVS     r1,#0                 ;365
0000c0  4620              MOV      r0,r4                 ;365
0000c2  f7fffffe          BL       OS_EventTaskRdy
                  |L3.198|
0000c6  7aa0              LDRB     r0,[r4,#0xa]          ;364
0000c8  2800              CMP      r0,#0                 ;364
0000ca  d1f6              BNE      |L3.186|
0000cc  8920              LDRH     r0,[r4,#8]            ;370
0000ce  1205              ASRS     r5,r0,#8              ;370
0000d0  2dff              CMP      r5,#0xff              ;371
0000d2  d003              BEQ      |L3.220|
0000d4  2000              MOVS     r0,#0                 ;372
0000d6  4912              LDR      r1,|L3.288|
0000d8  f8410025          STR      r0,[r1,r5,LSL #2]     ;372
                  |L3.220|
0000dc  2000              MOVS     r0,#0                 ;374
0000de  7020              STRB     r0,[r4,#0]            ;374
0000e0  4810              LDR      r0,|L3.292|
0000e2  6800              LDR      r0,[r0,#0]            ;375  ; OSEventFreeList
0000e4  6060              STR      r0,[r4,#4]            ;375
0000e6  2000              MOVS     r0,#0                 ;376
0000e8  8120              STRH     r0,[r4,#8]            ;376
0000ea  480e              LDR      r0,|L3.292|
0000ec  6004              STR      r4,[r0,#0]            ;377  ; OSEventFreeList
0000ee  9800              LDR      r0,[sp,#0]            ;378
0000f0  f7fffffe          BL       OS_CPU_SR_Restore
0000f4  f1b80f01          CMP      r8,#1                 ;379
0000f8  d101              BNE      |L3.254|
0000fa  f7fffffe          BL       OS_Sched
                  |L3.254|
0000fe  2000              MOVS     r0,#0                 ;382
000100  7030              STRB     r0,[r6,#0]            ;382
000102  2700              MOVS     r7,#0                 ;383
000104  e006              B        |L3.276|
                  |L3.262|
000106  9800              LDR      r0,[sp,#0]            ;387
000108  f7fffffe          BL       OS_CPU_SR_Restore
00010c  2007              MOVS     r0,#7                 ;388
00010e  7030              STRB     r0,[r6,#0]            ;388
000110  4627              MOV      r7,r4                 ;389
000112  bf00              NOP                            ;390
                  |L3.276|
000114  bf00              NOP                            ;351
000116  4638              MOV      r0,r7                 ;392
000118  e77f              B        |L3.26|
;;;394    #endif
                          ENDP

00011a  0000              DCW      0x0000
                  |L3.284|
                          DCD      OSIntNesting
                  |L3.288|
                          DCD      OSTCBPrioTbl
                  |L3.292|
                          DCD      OSEventFreeList

                          AREA ||i.OSMutexPend||, CODE, READONLY, ALIGN=2

                  OSMutexPend PROC
;;;436    
;;;437    void  OSMutexPend (OS_EVENT  *pevent,
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;438                       INT32U     timeout,
;;;439                       INT8U     *perr)
;;;440    {
000004  b082              SUB      sp,sp,#8
000006  4605              MOV      r5,r0
000008  4617              MOV      r7,r2
;;;441        INT8U      pcp;                                        /* Priority Ceiling Priority (PCP)          */
;;;442        INT8U      mprio;                                      /* Mutex owner priority                     */
;;;443        BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
;;;444        OS_TCB    *ptcb;
;;;445        OS_EVENT  *pevent2;
;;;446        INT8U      y;
;;;447    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;448        OS_CPU_SR  cpu_sr = 0u;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;449    #endif
;;;450    
;;;451    
;;;452    
;;;453    #ifdef OS_SAFETY_CRITICAL
;;;454        if (perr == (INT8U *)0) {
;;;455            OS_SAFETY_CRITICAL_EXCEPTION();
;;;456            return;
;;;457        }
;;;458    #endif
;;;459    
;;;460    #if OS_ARG_CHK_EN > 0u
;;;461        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;462            *perr = OS_ERR_PEVENT_NULL;
;;;463            return;
;;;464        }
;;;465    #endif
;;;466        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
00000e  7828              LDRB     r0,[r5,#0]
000010  2804              CMP      r0,#4
000012  d004              BEQ      |L4.30|
;;;467            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7038              STRB     r0,[r7,#0]
                  |L4.24|
;;;468            return;
;;;469        }
;;;470        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;471            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
;;;472            return;
;;;473        }
;;;474        if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
;;;475            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;476            return;
;;;477        }
;;;478    /*$PAGE*/
;;;479        OS_ENTER_CRITICAL();
;;;480        pcp = (INT8U)(pevent->OSEventCnt >> 8u);               /* Get PCP from mutex                       */
;;;481                                                               /* Is Mutex available?                      */
;;;482        if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;483            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
;;;484            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
;;;485            pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
;;;486            if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
;;;487                (OSTCBCur->OSTCBPrio <= pcp)) {                /*      PCP 'must' have a SMALLER prio ...  */
;;;488                 OS_EXIT_CRITICAL();                           /*      ... than current task!              */
;;;489                *perr = OS_ERR_PCP_LOWER;
;;;490            } else {
;;;491                 OS_EXIT_CRITICAL();
;;;492                *perr = OS_ERR_NONE;
;;;493            }
;;;494            return;
;;;495        }
;;;496        if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;497            mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8); /*  Get priority of mutex owner   */
;;;498            ptcb  = (OS_TCB *)(pevent->OSEventPtr);                   /*     Point to TCB of mutex owner   */
;;;499            if (ptcb->OSTCBPrio > pcp) {                              /*     Need to promote prio of owner?*/
;;;500                if (mprio > OSTCBCur->OSTCBPrio) {
;;;501                    y = ptcb->OSTCBY;
;;;502                    if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0u) {      /*     See if mutex owner is ready   */
;;;503                        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;     /*     Yes, Remove owner from Rdy ...*/
;;;504                        if (OSRdyTbl[y] == 0u) {                      /*          ... list at current prio */
;;;505                            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;506                        }
;;;507                        rdy = OS_TRUE;
;;;508                    } else {
;;;509                        pevent2 = ptcb->OSTCBEventPtr;
;;;510                        if (pevent2 != (OS_EVENT *)0) {               /* Remove from event wait list       */
;;;511                            y = ptcb->OSTCBY;
;;;512                            pevent2->OSEventTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
;;;513                            if (pevent2->OSEventTbl[y] == 0u) {
;;;514                                pevent2->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;515                            }
;;;516                        }
;;;517                        rdy = OS_FALSE;                        /* No                                       */
;;;518                    }
;;;519                    ptcb->OSTCBPrio = pcp;                     /* Change owner task prio to PCP            */
;;;520    #if OS_LOWEST_PRIO <= 63u
;;;521                    ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3u);
;;;522                    ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07u);
;;;523    #else
;;;524                    ptcb->OSTCBY    = (INT8U)((INT8U)(ptcb->OSTCBPrio >> 4u) & 0xFFu);
;;;525                    ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0Fu);
;;;526    #endif
;;;527                    ptcb->OSTCBBitY = (OS_PRIO)(1uL << ptcb->OSTCBY);
;;;528                    ptcb->OSTCBBitX = (OS_PRIO)(1uL << ptcb->OSTCBX);
;;;529    
;;;530                    if (rdy == OS_TRUE) {                      /* If task was ready at owner's priority ...*/
;;;531                        OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.   */
;;;532                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;533                    } else {
;;;534                        pevent2 = ptcb->OSTCBEventPtr;
;;;535                        if (pevent2 != (OS_EVENT *)0) {        /* Add to event wait list                   */
;;;536                            pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
;;;537                            pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;538                        }
;;;539                    }
;;;540                    OSTCBPrioTbl[pcp] = ptcb;
;;;541                }
;;;542            }
;;;543        }
;;;544        OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
;;;545        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;546        OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
;;;547        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;548        OS_EXIT_CRITICAL();
;;;549        OS_Sched();                                       /* Find next highest priority task ready         */
;;;550        OS_ENTER_CRITICAL();
;;;551        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;552            case OS_STAT_PEND_OK:
;;;553                 *perr = OS_ERR_NONE;
;;;554                 break;
;;;555    
;;;556            case OS_STAT_PEND_ABORT:
;;;557                 *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
;;;558                 break;
;;;559    
;;;560            case OS_STAT_PEND_TO:
;;;561            default:
;;;562                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;563                 *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
;;;564                 break;
;;;565        }
;;;566        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;567        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;568        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;569    #if (OS_EVENT_MULTI_EN > 0u)
;;;570        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;571    #endif
;;;572        OS_EXIT_CRITICAL();
;;;573    }
000018  b005              ADD      sp,sp,#0x14
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.30|
00001e  4884              LDR      r0,|L4.560|
000020  7800              LDRB     r0,[r0,#0]            ;470  ; OSIntNesting
000022  b110              CBZ      r0,|L4.42|
000024  2002              MOVS     r0,#2                 ;471
000026  7038              STRB     r0,[r7,#0]            ;471
000028  e7f6              B        |L4.24|
                  |L4.42|
00002a  4882              LDR      r0,|L4.564|
00002c  7800              LDRB     r0,[r0,#0]            ;474  ; OSLockNesting
00002e  b110              CBZ      r0,|L4.54|
000030  200d              MOVS     r0,#0xd               ;475
000032  7038              STRB     r0,[r7,#0]            ;475
000034  e7f0              B        |L4.24|
                  |L4.54|
000036  f7fffffe          BL       OS_CPU_SR_Save
00003a  9001              STR      r0,[sp,#4]            ;479
00003c  8928              LDRH     r0,[r5,#8]            ;480
00003e  ea4f2920          ASR      r9,r0,#8              ;480
000042  7a28              LDRB     r0,[r5,#8]            ;482
000044  28ff              CMP      r0,#0xff              ;482
000046  d122              BNE      |L4.142|
000048  8928              LDRH     r0,[r5,#8]            ;483
00004a  f400407f          AND      r0,r0,#0xff00         ;483
00004e  8128              STRH     r0,[r5,#8]            ;483
000050  8928              LDRH     r0,[r5,#8]            ;484
000052  4979              LDR      r1,|L4.568|
000054  6809              LDR      r1,[r1,#0]            ;484  ; OSTCBCur
000056  f8911032          LDRB     r1,[r1,#0x32]         ;484
00005a  4308              ORRS     r0,r0,r1              ;484
00005c  8128              STRH     r0,[r5,#8]            ;484
00005e  4876              LDR      r0,|L4.568|
000060  6800              LDR      r0,[r0,#0]            ;485  ; OSTCBCur
000062  6068              STR      r0,[r5,#4]            ;485
000064  f1b90fff          CMP      r9,#0xff              ;486
000068  d00b              BEQ      |L4.130|
00006a  4873              LDR      r0,|L4.568|
00006c  6800              LDR      r0,[r0,#0]            ;487  ; OSTCBCur
00006e  f8900032          LDRB     r0,[r0,#0x32]         ;487
000072  4548              CMP      r0,r9                 ;487
000074  dc05              BGT      |L4.130|
000076  9801              LDR      r0,[sp,#4]            ;488
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  2078              MOVS     r0,#0x78              ;489
00007e  7038              STRB     r0,[r7,#0]            ;489
000080  e004              B        |L4.140|
                  |L4.130|
000082  9801              LDR      r0,[sp,#4]            ;491
000084  f7fffffe          BL       OS_CPU_SR_Restore
000088  2000              MOVS     r0,#0                 ;492
00008a  7038              STRB     r0,[r7,#0]            ;492
                  |L4.140|
00008c  e7c4              B        |L4.24|
                  |L4.142|
00008e  f1b90fff          CMP      r9,#0xff              ;496
000092  d07c              BEQ      |L4.398|
000094  f895b008          LDRB     r11,[r5,#8]           ;497
000098  686c              LDR      r4,[r5,#4]            ;498
00009a  f8940032          LDRB     r0,[r4,#0x32]         ;499
00009e  4548              CMP      r0,r9                 ;499
0000a0  dd7c              BLE      |L4.412|
0000a2  4865              LDR      r0,|L4.568|
0000a4  6800              LDR      r0,[r0,#0]            ;500  ; OSTCBCur
0000a6  f8900032          LDRB     r0,[r0,#0x32]         ;500
0000aa  4558              CMP      r0,r11                ;500
0000ac  da76              BGE      |L4.412|
0000ae  f8948034          LDRB     r8,[r4,#0x34]         ;501
0000b2  4862              LDR      r0,|L4.572|
0000b4  f8100008          LDRB     r0,[r0,r8]            ;502
0000b8  f8941035          LDRB     r1,[r4,#0x35]         ;502
0000bc  4008              ANDS     r0,r0,r1              ;502
0000be  b1b0              CBZ      r0,|L4.238|
0000c0  485e              LDR      r0,|L4.572|
0000c2  f8100008          LDRB     r0,[r0,r8]            ;503
0000c6  f8941035          LDRB     r1,[r4,#0x35]         ;503
0000ca  4388              BICS     r0,r0,r1              ;503
0000cc  495b              LDR      r1,|L4.572|
0000ce  f8010008          STRB     r0,[r1,r8]            ;503
0000d2  4608              MOV      r0,r1                 ;504
0000d4  f8100008          LDRB     r0,[r0,r8]            ;504
0000d8  b930              CBNZ     r0,|L4.232|
0000da  f8941036          LDRB     r1,[r4,#0x36]         ;505
0000de  4858              LDR      r0,|L4.576|
0000e0  7800              LDRB     r0,[r0,#0]            ;505  ; OSRdyGrp
0000e2  4388              BICS     r0,r0,r1              ;505
0000e4  4956              LDR      r1,|L4.576|
0000e6  7008              STRB     r0,[r1,#0]            ;505
                  |L4.232|
0000e8  f04f0a01          MOV      r10,#1                ;507
0000ec  e019              B        |L4.290|
                  |L4.238|
0000ee  69e6              LDR      r6,[r4,#0x1c]         ;509
0000f0  b1ae              CBZ      r6,|L4.286|
0000f2  f8948034          LDRB     r8,[r4,#0x34]         ;511
0000f6  f106000b          ADD      r0,r6,#0xb            ;512
0000fa  f8100008          LDRB     r0,[r0,r8]            ;512
0000fe  f8941035          LDRB     r1,[r4,#0x35]         ;512
000102  4388              BICS     r0,r0,r1              ;512
000104  f106010b          ADD      r1,r6,#0xb            ;512
000108  f8010008          STRB     r0,[r1,r8]            ;512
00010c  4608              MOV      r0,r1                 ;513
00010e  f8100008          LDRB     r0,[r0,r8]            ;513
000112  b920              CBNZ     r0,|L4.286|
000114  7ab0              LDRB     r0,[r6,#0xa]          ;514
000116  f8941036          LDRB     r1,[r4,#0x36]         ;514
00011a  4388              BICS     r0,r0,r1              ;514
00011c  72b0              STRB     r0,[r6,#0xa]          ;514
                  |L4.286|
00011e  f04f0a00          MOV      r10,#0                ;517
                  |L4.290|
000122  f8049f32          STRB     r9,[r4,#0x32]!        ;519
000126  7820              LDRB     r0,[r4,#0]            ;521
000128  10c0              ASRS     r0,r0,#3              ;521
00012a  70a0              STRB     r0,[r4,#2]            ;521
00012c  7820              LDRB     r0,[r4,#0]            ;522
00012e  f0000007          AND      r0,r0,#7              ;522
000132  7060              STRB     r0,[r4,#1]            ;522
000134  78a1              LDRB     r1,[r4,#2]            ;527
000136  2001              MOVS     r0,#1                 ;527
000138  4088              LSLS     r0,r0,r1              ;527
00013a  7120              STRB     r0,[r4,#4]            ;527
00013c  7861              LDRB     r1,[r4,#1]            ;528
00013e  2001              MOVS     r0,#1                 ;528
000140  4088              LSLS     r0,r0,r1              ;528
000142  70e0              STRB     r0,[r4,#3]            ;528
000144  3c32              SUBS     r4,r4,#0x32           ;528
000146  f1ba0f01          CMP      r10,#1                ;530
00014a  d110              BNE      |L4.366|
00014c  3434              ADDS     r4,r4,#0x34           ;531
00014e  78a0              LDRB     r0,[r4,#2]            ;531
000150  493b              LDR      r1,|L4.576|
000152  7809              LDRB     r1,[r1,#0]            ;531  ; OSRdyGrp
000154  4308              ORRS     r0,r0,r1              ;531
000156  493a              LDR      r1,|L4.576|
000158  7008              STRB     r0,[r1,#0]            ;531
00015a  7820              LDRB     r0,[r4,#0]            ;532
00015c  4937              LDR      r1,|L4.572|
00015e  5c08              LDRB     r0,[r1,r0]            ;532
000160  7861              LDRB     r1,[r4,#1]            ;532
000162  4308              ORRS     r0,r0,r1              ;532
000164  f8141934          LDRB     r1,[r4],#-0x34        ;532
000168  4a34              LDR      r2,|L4.572|
00016a  5450              STRB     r0,[r2,r1]            ;532
00016c  e013              B        |L4.406|
                  |L4.366|
00016e  69e6              LDR      r6,[r4,#0x1c]         ;534
000170  b18e              CBZ      r6,|L4.406|
000172  7ab0              LDRB     r0,[r6,#0xa]          ;536
000174  3434              ADDS     r4,r4,#0x34           ;536
000176  78a1              LDRB     r1,[r4,#2]            ;536
000178  4308              ORRS     r0,r0,r1              ;536
00017a  72b0              STRB     r0,[r6,#0xa]          ;536
00017c  7821              LDRB     r1,[r4,#0]            ;537
00017e  f106000b          ADD      r0,r6,#0xb            ;537
000182  5c40              LDRB     r0,[r0,r1]            ;537
000184  7861              LDRB     r1,[r4,#1]            ;537
000186  4308              ORRS     r0,r0,r1              ;537
000188  f8142934          LDRB     r2,[r4],#-0x34        ;537
00018c  e000              B        |L4.400|
                  |L4.398|
00018e  e005              B        |L4.412|
                  |L4.400|
000190  f106010b          ADD      r1,r6,#0xb            ;537
000194  5488              STRB     r0,[r1,r2]            ;537
                  |L4.406|
000196  482b              LDR      r0,|L4.580|
000198  f8404029          STR      r4,[r0,r9,LSL #2]     ;540
                  |L4.412|
00019c  4826              LDR      r0,|L4.568|
00019e  6800              LDR      r0,[r0,#0]            ;544  ; OSTCBCur
0001a0  f8900030          LDRB     r0,[r0,#0x30]         ;544
0001a4  f0400010          ORR      r0,r0,#0x10           ;544
0001a8  4923              LDR      r1,|L4.568|
0001aa  6809              LDR      r1,[r1,#0]            ;544  ; OSTCBCur
0001ac  f8810030          STRB     r0,[r1,#0x30]         ;544
0001b0  2000              MOVS     r0,#0                 ;545
0001b2  4921              LDR      r1,|L4.568|
0001b4  6809              LDR      r1,[r1,#0]            ;545  ; OSTCBCur
0001b6  f8810031          STRB     r0,[r1,#0x31]         ;545
0001ba  491f              LDR      r1,|L4.568|
0001bc  9803              LDR      r0,[sp,#0xc]          ;546
0001be  6809              LDR      r1,[r1,#0]            ;546  ; OSTCBCur
0001c0  62c8              STR      r0,[r1,#0x2c]         ;546
0001c2  4628              MOV      r0,r5                 ;547
0001c4  f7fffffe          BL       OS_EventTaskWait
0001c8  9801              LDR      r0,[sp,#4]            ;548
0001ca  f7fffffe          BL       OS_CPU_SR_Restore
0001ce  f7fffffe          BL       OS_Sched
0001d2  f7fffffe          BL       OS_CPU_SR_Save
0001d6  9001              STR      r0,[sp,#4]            ;550
0001d8  4817              LDR      r0,|L4.568|
0001da  6800              LDR      r0,[r0,#0]            ;551  ; OSTCBCur
0001dc  f8900031          LDRB     r0,[r0,#0x31]         ;551
0001e0  b120              CBZ      r0,|L4.492|
0001e2  2801              CMP      r0,#1                 ;551
0001e4  d009              BEQ      |L4.506|
0001e6  2802              CMP      r0,#2                 ;551
0001e8  d106              BNE      |L4.504|
0001ea  e002              B        |L4.498|
                  |L4.492|
0001ec  2000              MOVS     r0,#0                 ;553
0001ee  7038              STRB     r0,[r7,#0]            ;553
0001f0  e00b              B        |L4.522|
                  |L4.498|
0001f2  200e              MOVS     r0,#0xe               ;557
0001f4  7038              STRB     r0,[r7,#0]            ;557
0001f6  e008              B        |L4.522|
                  |L4.504|
0001f8  bf00              NOP                            ;560
                  |L4.506|
0001fa  4629              MOV      r1,r5                 ;562
0001fc  480e              LDR      r0,|L4.568|
0001fe  6800              LDR      r0,[r0,#0]            ;562  ; OSTCBCur
000200  f7fffffe          BL       OS_EventTaskRemove
000204  200a              MOVS     r0,#0xa               ;563
000206  7038              STRB     r0,[r7,#0]            ;563
000208  bf00              NOP                            ;564
                  |L4.522|
00020a  bf00              NOP                            ;554
00020c  2000              MOVS     r0,#0                 ;566
00020e  490a              LDR      r1,|L4.568|
000210  6809              LDR      r1,[r1,#0]            ;566  ; OSTCBCur
000212  f8810030          STRB     r0,[r1,#0x30]         ;566
000216  4908              LDR      r1,|L4.568|
000218  6809              LDR      r1,[r1,#0]            ;567  ; OSTCBCur
00021a  f8810031          STRB     r0,[r1,#0x31]         ;567
00021e  4906              LDR      r1,|L4.568|
000220  6809              LDR      r1,[r1,#0]            ;568  ; OSTCBCur
000222  61c8              STR      r0,[r1,#0x1c]         ;568
000224  9801              LDR      r0,[sp,#4]            ;572
000226  f7fffffe          BL       OS_CPU_SR_Restore
00022a  bf00              NOP      
00022c  e6f4              B        |L4.24|
;;;574    /*$PAGE*/
                          ENDP

00022e  0000              DCW      0x0000
                  |L4.560|
                          DCD      OSIntNesting
                  |L4.564|
                          DCD      OSLockNesting
                  |L4.568|
                          DCD      OSTCBCur
                  |L4.572|
                          DCD      OSRdyTbl
                  |L4.576|
                          DCD      OSRdyGrp
                  |L4.580|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSMutexPost||, CODE, READONLY, ALIGN=2

                  OSMutexPost PROC
;;;598    
;;;599    INT8U  OSMutexPost (OS_EVENT *pevent)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;600    {
000004  4604              MOV      r4,r0
;;;601        INT8U      pcp;                                   /* Priority ceiling priority                     */
;;;602        INT8U      prio;
;;;603    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;604        OS_CPU_SR  cpu_sr = 0u;
000006  2700              MOVS     r7,#0
;;;605    #endif
;;;606    
;;;607    
;;;608    
;;;609        if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
000008  482e              LDR      r0,|L5.196|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  b110              CBZ      r0,|L5.20|
;;;610            return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
00000e  2005              MOVS     r0,#5
                  |L5.16|
;;;611        }
;;;612    #if OS_ARG_CHK_EN > 0u
;;;613        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;614            return (OS_ERR_PEVENT_NULL);
;;;615        }
;;;616    #endif
;;;617        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
;;;618            return (OS_ERR_EVENT_TYPE);
;;;619        }
;;;620        OS_ENTER_CRITICAL();
;;;621        pcp  = (INT8U)(pevent->OSEventCnt >> 8u);         /* Get priority ceiling priority of mutex        */
;;;622        prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
;;;623        if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
;;;624            OS_EXIT_CRITICAL();
;;;625            return (OS_ERR_NOT_MUTEX_OWNER);
;;;626        }
;;;627        if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;628            if (OSTCBCur->OSTCBPrio == pcp) {             /* Did we have to raise current task's priority? */
;;;629                OSMutex_RdyAtPrio(OSTCBCur, prio);        /* Restore the task's original priority          */
;;;630            }
;;;631            OSTCBPrioTbl[pcp] = OS_TCB_RESERVED;          /* Reserve table entry                           */
;;;632        }
;;;633        if (pevent->OSEventGrp != 0u) {                   /* Any task waiting for the mutex?               */
;;;634                                                          /* Yes, Make HPT waiting for mutex ready         */
;;;635            prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
;;;636            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
;;;637            pevent->OSEventCnt |= prio;
;;;638            pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
;;;639            if ((pcp  != OS_PRIO_MUTEX_CEIL_DIS) &&
;;;640                (prio <= pcp)) {                          /*      PCP 'must' have a SMALLER prio ...       */
;;;641                OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
;;;642                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;643                return (OS_ERR_PCP_LOWER);
;;;644            } else {
;;;645                OS_EXIT_CRITICAL();
;;;646                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;647                return (OS_ERR_NONE);
;;;648            }
;;;649        }
;;;650        pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
;;;651        pevent->OSEventPtr  = (void *)0;
;;;652        OS_EXIT_CRITICAL();
;;;653        return (OS_ERR_NONE);
;;;654    }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L5.20|
000014  7820              LDRB     r0,[r4,#0]            ;617
000016  2804              CMP      r0,#4                 ;617
000018  d001              BEQ      |L5.30|
00001a  2001              MOVS     r0,#1                 ;618
00001c  e7f8              B        |L5.16|
                  |L5.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4607              MOV      r7,r0                 ;620
000024  8920              LDRH     r0,[r4,#8]            ;621
000026  1205              ASRS     r5,r0,#8              ;621
000028  7a26              LDRB     r6,[r4,#8]            ;622
00002a  4927              LDR      r1,|L5.200|
00002c  6860              LDR      r0,[r4,#4]            ;623
00002e  6809              LDR      r1,[r1,#0]            ;623  ; OSTCBCur
000030  4288              CMP      r0,r1                 ;623
000032  d004              BEQ      |L5.62|
000034  4638              MOV      r0,r7                 ;624
000036  f7fffffe          BL       OS_CPU_SR_Restore
00003a  2064              MOVS     r0,#0x64              ;625
00003c  e7e8              B        |L5.16|
                  |L5.62|
00003e  2dff              CMP      r5,#0xff              ;627
000040  d00e              BEQ      |L5.96|
000042  4821              LDR      r0,|L5.200|
000044  6800              LDR      r0,[r0,#0]            ;628  ; OSTCBCur
000046  f8900032          LDRB     r0,[r0,#0x32]         ;628
00004a  42a8              CMP      r0,r5                 ;628
00004c  d104              BNE      |L5.88|
00004e  4631              MOV      r1,r6                 ;629
000050  481d              LDR      r0,|L5.200|
000052  6800              LDR      r0,[r0,#0]            ;629  ; OSTCBCur
000054  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L5.88|
000058  2001              MOVS     r0,#1                 ;631
00005a  491c              LDR      r1,|L5.204|
00005c  f8410025          STR      r0,[r1,r5,LSL #2]     ;631
                  |L5.96|
000060  7aa0              LDRB     r0,[r4,#0xa]          ;633
000062  b318              CBZ      r0,|L5.172|
000064  2300              MOVS     r3,#0                 ;635
000066  2210              MOVS     r2,#0x10              ;635
000068  4619              MOV      r1,r3                 ;635
00006a  4620              MOV      r0,r4                 ;635
00006c  f7fffffe          BL       OS_EventTaskRdy
000070  4606              MOV      r6,r0                 ;635
000072  8920              LDRH     r0,[r4,#8]            ;636
000074  f400407f          AND      r0,r0,#0xff00         ;636
000078  8120              STRH     r0,[r4,#8]            ;636
00007a  8920              LDRH     r0,[r4,#8]            ;637
00007c  4330              ORRS     r0,r0,r6              ;637
00007e  8120              STRH     r0,[r4,#8]            ;637
000080  4812              LDR      r0,|L5.204|
000082  f8500026          LDR      r0,[r0,r6,LSL #2]     ;638
000086  6060              STR      r0,[r4,#4]            ;638
000088  2dff              CMP      r5,#0xff              ;639
00008a  d008              BEQ      |L5.158|
00008c  42ae              CMP      r6,r5                 ;640
00008e  dc06              BGT      |L5.158|
000090  4638              MOV      r0,r7                 ;641
000092  f7fffffe          BL       OS_CPU_SR_Restore
000096  f7fffffe          BL       OS_Sched
00009a  2078              MOVS     r0,#0x78              ;643
00009c  e7b8              B        |L5.16|
                  |L5.158|
00009e  4638              MOV      r0,r7                 ;645
0000a0  f7fffffe          BL       OS_CPU_SR_Restore
0000a4  f7fffffe          BL       OS_Sched
0000a8  2000              MOVS     r0,#0                 ;647
0000aa  e7b1              B        |L5.16|
                  |L5.172|
0000ac  8920              LDRH     r0,[r4,#8]            ;650
0000ae  f04000ff          ORR      r0,r0,#0xff           ;650
0000b2  8120              STRH     r0,[r4,#8]            ;650
0000b4  2000              MOVS     r0,#0                 ;651
0000b6  6060              STR      r0,[r4,#4]            ;651
0000b8  4638              MOV      r0,r7                 ;652
0000ba  f7fffffe          BL       OS_CPU_SR_Restore
0000be  2000              MOVS     r0,#0                 ;653
0000c0  e7a6              B        |L5.16|
;;;655    /*$PAGE*/
                          ENDP

0000c2  0000              DCW      0x0000
                  |L5.196|
                          DCD      OSIntNesting
                  |L5.200|
                          DCD      OSTCBCur
                  |L5.204|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSMutexQuery||, CODE, READONLY, ALIGN=2

                  OSMutexQuery PROC
;;;674    #if OS_MUTEX_QUERY_EN > 0u
;;;675    INT8U  OSMutexQuery (OS_EVENT       *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;676                         OS_MUTEX_DATA  *p_mutex_data)
;;;677    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;678        INT8U       i;
;;;679        OS_PRIO    *psrc;
;;;680        OS_PRIO    *pdest;
;;;681    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;682        OS_CPU_SR   cpu_sr = 0u;
000008  f04f0900          MOV      r9,#0
;;;683    #endif
;;;684    
;;;685    
;;;686    
;;;687        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
00000c  4817              LDR      r0,|L6.108|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000010  b110              CBZ      r0,|L6.24|
;;;688            return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
000012  2006              MOVS     r0,#6
                  |L6.20|
;;;689        }
;;;690    #if OS_ARG_CHK_EN > 0u
;;;691        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;692            return (OS_ERR_PEVENT_NULL);
;;;693        }
;;;694        if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
;;;695            return (OS_ERR_PDATA_NULL);
;;;696        }
;;;697    #endif
;;;698        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
;;;699            return (OS_ERR_EVENT_TYPE);
;;;700        }
;;;701        OS_ENTER_CRITICAL();
;;;702        p_mutex_data->OSMutexPCP  = (INT8U)(pevent->OSEventCnt >> 8u);
;;;703        p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
;;;704        if (p_mutex_data->OSOwnerPrio == 0xFFu) {
;;;705            p_mutex_data->OSValue = OS_TRUE;
;;;706        } else {
;;;707            p_mutex_data->OSValue = OS_FALSE;
;;;708        }
;;;709        p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
;;;710        psrc                      = &pevent->OSEventTbl[0];
;;;711        pdest                     = &p_mutex_data->OSEventTbl[0];
;;;712        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
;;;713            *pdest++ = *psrc++;
;;;714        }
;;;715        OS_EXIT_CRITICAL();
;;;716        return (OS_ERR_NONE);
;;;717    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L6.24|
000018  7828              LDRB     r0,[r5,#0]            ;698
00001a  2804              CMP      r0,#4                 ;698
00001c  d001              BEQ      |L6.34|
00001e  2001              MOVS     r0,#1                 ;699
000020  e7f8              B        |L6.20|
                  |L6.34|
000022  f7fffffe          BL       OS_CPU_SR_Save
000026  4681              MOV      r9,r0                 ;701
000028  8928              LDRH     r0,[r5,#8]            ;702
00002a  1200              ASRS     r0,r0,#8              ;702
00002c  72e0              STRB     r0,[r4,#0xb]          ;702
00002e  7a28              LDRB     r0,[r5,#8]            ;703
000030  72a0              STRB     r0,[r4,#0xa]          ;703
000032  7aa0              LDRB     r0,[r4,#0xa]          ;704
000034  28ff              CMP      r0,#0xff              ;704
000036  d102              BNE      |L6.62|
000038  2001              MOVS     r0,#1                 ;705
00003a  7260              STRB     r0,[r4,#9]            ;705
00003c  e001              B        |L6.66|
                  |L6.62|
00003e  2000              MOVS     r0,#0                 ;707
000040  7260              STRB     r0,[r4,#9]            ;707
                  |L6.66|
000042  7aa8              LDRB     r0,[r5,#0xa]          ;709
000044  7220              STRB     r0,[r4,#8]            ;709
000046  f105080b          ADD      r8,r5,#0xb            ;710
00004a  4626              MOV      r6,r4                 ;711
00004c  2700              MOVS     r7,#0                 ;712
00004e  e005              B        |L6.92|
                  |L6.80|
000050  f8180b01          LDRB     r0,[r8],#1            ;713
000054  f8060b01          STRB     r0,[r6],#1            ;713
000058  1c78              ADDS     r0,r7,#1              ;712
00005a  b2c7              UXTB     r7,r0                 ;712
                  |L6.92|
00005c  2f08              CMP      r7,#8                 ;712
00005e  d3f7              BCC      |L6.80|
000060  4648              MOV      r0,r9                 ;715
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  2000              MOVS     r0,#0                 ;716
000068  e7d4              B        |L6.20|
;;;718    #endif                                                     /* OS_MUTEX_QUERY_EN                        */
                          ENDP

00006a  0000              DCW      0x0000
                  |L6.108|
                          DCD      OSIntNesting

                          AREA ||i.OSMutex_RdyAtPrio||, CODE, READONLY, ALIGN=2

                  OSMutex_RdyAtPrio PROC
;;;734    
;;;735    static  void  OSMutex_RdyAtPrio (OS_TCB  *ptcb,
000000  b530              PUSH     {r4,r5,lr}
;;;736                                     INT8U    prio)
;;;737    {
;;;738        INT8U  y;
;;;739    
;;;740    
;;;741        y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pcp'    */
000002  f8902034          LDRB     r2,[r0,#0x34]
;;;742        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
000006  4b1b              LDR      r3,|L7.116|
000008  5c9b              LDRB     r3,[r3,r2]
00000a  f8904035          LDRB     r4,[r0,#0x35]
00000e  43a3              BICS     r3,r3,r4
000010  4c18              LDR      r4,|L7.116|
000012  54a3              STRB     r3,[r4,r2]
;;;743        if (OSRdyTbl[y] == 0u) {
000014  4623              MOV      r3,r4
000016  5c9b              LDRB     r3,[r3,r2]
000018  b933              CBNZ     r3,|L7.40|
;;;744            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
00001a  f8904036          LDRB     r4,[r0,#0x36]
00001e  4b16              LDR      r3,|L7.120|
000020  781b              LDRB     r3,[r3,#0]  ; OSRdyGrp
000022  43a3              BICS     r3,r3,r4
000024  4c14              LDR      r4,|L7.120|
000026  7023              STRB     r3,[r4,#0]
                  |L7.40|
;;;745        }
;;;746        ptcb->OSTCBPrio         = prio;
000028  f8001f32          STRB     r1,[r0,#0x32]!
;;;747        OSPrioCur               = prio;                        /* The current task is now at this priority */
00002c  4b13              LDR      r3,|L7.124|
00002e  7019              STRB     r1,[r3,#0]
;;;748    #if OS_LOWEST_PRIO <= 63u
;;;749        ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 3u) & 0x07u);
000030  f3c103c2          UBFX     r3,r1,#3,#3
000034  7083              STRB     r3,[r0,#2]
;;;750        ptcb->OSTCBX            = (INT8U)(prio & 0x07u);
000036  f0010307          AND      r3,r1,#7
00003a  7043              STRB     r3,[r0,#1]
;;;751    #else
;;;752        ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 4u) & 0x0Fu);
;;;753        ptcb->OSTCBX            = (INT8U) (prio & 0x0Fu);
;;;754    #endif
;;;755        ptcb->OSTCBBitY         = (OS_PRIO)(1uL << ptcb->OSTCBY);
00003c  7884              LDRB     r4,[r0,#2]
00003e  2301              MOVS     r3,#1
000040  40a3              LSLS     r3,r3,r4
000042  7103              STRB     r3,[r0,#4]
;;;756        ptcb->OSTCBBitX         = (OS_PRIO)(1uL << ptcb->OSTCBX);
000044  7844              LDRB     r4,[r0,#1]
000046  2301              MOVS     r3,#1
000048  40a3              LSLS     r3,r3,r4
00004a  70c3              STRB     r3,[r0,#3]
;;;757        OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
00004c  7903              LDRB     r3,[r0,#4]
00004e  4c0a              LDR      r4,|L7.120|
000050  7824              LDRB     r4,[r4,#0]  ; OSRdyGrp
000052  4323              ORRS     r3,r3,r4
000054  4c08              LDR      r4,|L7.120|
000056  7023              STRB     r3,[r4,#0]
;;;758        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
000058  7883              LDRB     r3,[r0,#2]
00005a  4c06              LDR      r4,|L7.116|
00005c  5ce3              LDRB     r3,[r4,r3]
00005e  78c4              LDRB     r4,[r0,#3]
000060  4323              ORRS     r3,r3,r4
000062  7884              LDRB     r4,[r0,#2]
000064  3832              SUBS     r0,r0,#0x32
000066  4d03              LDR      r5,|L7.116|
000068  552b              STRB     r3,[r5,r4]
;;;759        OSTCBPrioTbl[prio]      = ptcb;
00006a  4b05              LDR      r3,|L7.128|
00006c  f8430021          STR      r0,[r3,r1,LSL #2]
;;;760    }
000070  bd30              POP      {r4,r5,pc}
;;;761    
                          ENDP

000072  0000              DCW      0x0000
                  |L7.116|
                          DCD      OSRdyTbl
                  |L7.120|
                          DCD      OSRdyGrp
                  |L7.124|
                          DCD      OSPrioCur
                  |L7.128|
                          DCD      OSTCBPrioTbl
