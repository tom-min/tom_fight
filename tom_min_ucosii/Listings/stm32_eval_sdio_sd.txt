; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32_eval_sdio_sd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32_eval_sdio_sd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Libraries\CMSIS\CM3\CoreSupport -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I.\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\main -I.\FreeRTOS\include -I.\FreeRTOS\portable\RVDS\ARM_CM3 -I.\User -I.\User\include -I.\fatfs -I.\Utilities\STM32_EVAL -I.\Utilities\STM32_EVAL\Common -I.\Utilities\STM32_EVAL\STM3210E_EVAL -I.\RTE\_Target_1 -I"D:\program files (x86)\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"D:\program files (x86)\keil5\ARM\CMSIS\Include" -D__UVISION_VERSION=523 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL --omf_browse=.\objects\stm32_eval_sdio_sd.crf Utilities\STM32_EVAL\Common\stm32_eval_sdio_sd.c]
                          THUMB

                          AREA ||i.CmdError||, CODE, READONLY, ALIGN=1

                  CmdError PROC
;;;2227     */
;;;2228   static SD_Error CmdError(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2229   {
;;;2230     SD_Error errorstatus = SD_OK;
000002  252a              MOVS     r5,#0x2a
;;;2231     uint32_t timeout;
;;;2232   
;;;2233     timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */
000004  f44f3480          MOV      r4,#0x10000
;;;2234   
;;;2235     while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
000008  e000              B        |L1.12|
                  |L1.10|
;;;2236     {
;;;2237       timeout--;
00000a  1e64              SUBS     r4,r4,#1
                  |L1.12|
00000c  b124              CBZ      r4,|L1.24|
00000e  2080              MOVS     r0,#0x80              ;2235
000010  f7fffffe          BL       SDIO_GetFlagStatus
000014  2800              CMP      r0,#0                 ;2235
000016  d0f8              BEQ      |L1.10|
                  |L1.24|
;;;2238     }
;;;2239   
;;;2240     if (timeout == 0)
000018  b914              CBNZ     r4,|L1.32|
;;;2241     {
;;;2242       errorstatus = SD_CMD_RSP_TIMEOUT;
00001a  2503              MOVS     r5,#3
;;;2243       return(errorstatus);
00001c  4628              MOV      r0,r5
                  |L1.30|
;;;2244     }
;;;2245   
;;;2246     /*!< Clear all the static flags */
;;;2247     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2248   
;;;2249     return(errorstatus);
;;;2250   }
00001e  bd70              POP      {r4-r6,pc}
                  |L1.32|
000020  f24050ff          MOV      r0,#0x5ff             ;2247
000024  f7fffffe          BL       SDIO_ClearFlag
000028  4628              MOV      r0,r5                 ;2249
00002a  e7f8              B        |L1.30|
;;;2251   
                          ENDP


                          AREA ||i.CmdResp1Error||, CODE, READONLY, ALIGN=2

                  CmdResp1Error PROC
;;;2293     */
;;;2294   static SD_Error CmdResp1Error(uint8_t cmd)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2295   {
000004  4606              MOV      r6,r0
;;;2296     SD_Error errorstatus = SD_OK;
000006  272a              MOVS     r7,#0x2a
;;;2297     uint32_t status;
;;;2298     uint32_t response_r1;
;;;2299   
;;;2300     status = SDIO->STA;
000008  4848              LDR      r0,|L2.300|
00000a  6b45              LDR      r5,[r0,#0x34]
;;;2301   
;;;2302     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
00000c  e001              B        |L2.18|
                  |L2.14|
;;;2303     {
;;;2304       status = SDIO->STA;
00000e  4847              LDR      r0,|L2.300|
000010  6b45              LDR      r5,[r0,#0x34]
                  |L2.18|
000012  f0050045          AND      r0,r5,#0x45           ;2302
000016  2800              CMP      r0,#0                 ;2302
000018  d0f9              BEQ      |L2.14|
;;;2305     }
;;;2306   
;;;2307     if (status & SDIO_FLAG_CTIMEOUT)
00001a  f0050004          AND      r0,r5,#4
00001e  b130              CBZ      r0,|L2.46|
;;;2308     {
;;;2309       errorstatus = SD_CMD_RSP_TIMEOUT;
000020  2703              MOVS     r7,#3
;;;2310       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000022  2004              MOVS     r0,#4
000024  f7fffffe          BL       SDIO_ClearFlag
;;;2311       return(errorstatus);
000028  4638              MOV      r0,r7
                  |L2.42|
;;;2312     }
;;;2313     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2314     {
;;;2315       errorstatus = SD_CMD_CRC_FAIL;
;;;2316       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2317       return(errorstatus);
;;;2318     }
;;;2319   
;;;2320     /*!< Check response received is of desired command */
;;;2321     if (SDIO_GetCommandResponse() != cmd)
;;;2322     {
;;;2323       errorstatus = SD_ILLEGAL_CMD;
;;;2324       return(errorstatus);
;;;2325     }
;;;2326   
;;;2327     /*!< Clear all the static flags */
;;;2328     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2329   
;;;2330     /*!< We have received response, retrieve it for analysis  */
;;;2331     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;2332   
;;;2333     if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2334     {
;;;2335       return(errorstatus);
;;;2336     }
;;;2337   
;;;2338     if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2339     {
;;;2340       return(SD_ADDR_OUT_OF_RANGE);
;;;2341     }
;;;2342   
;;;2343     if (response_r1 & SD_OCR_ADDR_MISALIGNED)
;;;2344     {
;;;2345       return(SD_ADDR_MISALIGNED);
;;;2346     }
;;;2347   
;;;2348     if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
;;;2349     {
;;;2350       return(SD_BLOCK_LEN_ERR);
;;;2351     }
;;;2352   
;;;2353     if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
;;;2354     {
;;;2355       return(SD_ERASE_SEQ_ERR);
;;;2356     }
;;;2357   
;;;2358     if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
;;;2359     {
;;;2360       return(SD_BAD_ERASE_PARAM);
;;;2361     }
;;;2362   
;;;2363     if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2364     {
;;;2365       return(SD_WRITE_PROT_VIOLATION);
;;;2366     }
;;;2367   
;;;2368     if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2369     {
;;;2370       return(SD_LOCK_UNLOCK_FAILED);
;;;2371     }
;;;2372   
;;;2373     if (response_r1 & SD_OCR_COM_CRC_FAILED)
;;;2374     {
;;;2375       return(SD_COM_CRC_FAILED);
;;;2376     }
;;;2377   
;;;2378     if (response_r1 & SD_OCR_ILLEGAL_CMD)
;;;2379     {
;;;2380       return(SD_ILLEGAL_CMD);
;;;2381     }
;;;2382   
;;;2383     if (response_r1 & SD_OCR_CARD_ECC_FAILED)
;;;2384     {
;;;2385       return(SD_CARD_ECC_FAILED);
;;;2386     }
;;;2387   
;;;2388     if (response_r1 & SD_OCR_CC_ERROR)
;;;2389     {
;;;2390       return(SD_CC_ERROR);
;;;2391     }
;;;2392   
;;;2393     if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2394     {
;;;2395       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2396     }
;;;2397   
;;;2398     if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2399     {
;;;2400       return(SD_STREAM_READ_UNDERRUN);
;;;2401     }
;;;2402   
;;;2403     if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2404     {
;;;2405       return(SD_STREAM_WRITE_OVERRUN);
;;;2406     }
;;;2407   
;;;2408     if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2409     {
;;;2410       return(SD_CID_CSD_OVERWRITE);
;;;2411     }
;;;2412   
;;;2413     if (response_r1 & SD_OCR_WP_ERASE_SKIP)
;;;2414     {
;;;2415       return(SD_WP_ERASE_SKIP);
;;;2416     }
;;;2417   
;;;2418     if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
;;;2419     {
;;;2420       return(SD_CARD_ECC_DISABLED);
;;;2421     }
;;;2422   
;;;2423     if (response_r1 & SD_OCR_ERASE_RESET)
;;;2424     {
;;;2425       return(SD_ERASE_RESET);
;;;2426     }
;;;2427   
;;;2428     if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
;;;2429     {
;;;2430       return(SD_AKE_SEQ_ERROR);
;;;2431     }
;;;2432     return(errorstatus);
;;;2433   }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L2.46|
00002e  f0050001          AND      r0,r5,#1              ;2313
000032  b128              CBZ      r0,|L2.64|
000034  2701              MOVS     r7,#1                 ;2315
000036  2001              MOVS     r0,#1                 ;2316
000038  f7fffffe          BL       SDIO_ClearFlag
00003c  4638              MOV      r0,r7                 ;2317
00003e  e7f4              B        |L2.42|
                  |L2.64|
000040  f7fffffe          BL       SDIO_GetCommandResponse
000044  42b0              CMP      r0,r6                 ;2321
000046  d002              BEQ      |L2.78|
000048  2710              MOVS     r7,#0x10              ;2323
00004a  4638              MOV      r0,r7                 ;2324
00004c  e7ed              B        |L2.42|
                  |L2.78|
00004e  f24050ff          MOV      r0,#0x5ff             ;2328
000052  f7fffffe          BL       SDIO_ClearFlag
000056  2000              MOVS     r0,#0                 ;2331
000058  f7fffffe          BL       SDIO_GetResponse
00005c  4604              MOV      r4,r0                 ;2331
00005e  4834              LDR      r0,|L2.304|
000060  4020              ANDS     r0,r0,r4              ;2333
000062  b908              CBNZ     r0,|L2.104|
000064  4638              MOV      r0,r7                 ;2335
000066  e7e0              B        |L2.42|
                  |L2.104|
000068  f0044000          AND      r0,r4,#0x80000000     ;2338
00006c  b108              CBZ      r0,|L2.114|
00006e  201c              MOVS     r0,#0x1c              ;2340
000070  e7db              B        |L2.42|
                  |L2.114|
000072  f0044080          AND      r0,r4,#0x40000000     ;2343
000076  b108              CBZ      r0,|L2.124|
000078  2009              MOVS     r0,#9                 ;2345
00007a  e7d6              B        |L2.42|
                  |L2.124|
00007c  f0045000          AND      r0,r4,#0x20000000     ;2348
000080  b108              CBZ      r0,|L2.134|
000082  200a              MOVS     r0,#0xa               ;2350
000084  e7d1              B        |L2.42|
                  |L2.134|
000086  f0045080          AND      r0,r4,#0x10000000     ;2353
00008a  b108              CBZ      r0,|L2.144|
00008c  200b              MOVS     r0,#0xb               ;2355
00008e  e7cc              B        |L2.42|
                  |L2.144|
000090  f0046000          AND      r0,r4,#0x8000000      ;2358
000094  b108              CBZ      r0,|L2.154|
000096  200c              MOVS     r0,#0xc               ;2360
000098  e7c7              B        |L2.42|
                  |L2.154|
00009a  f0046080          AND      r0,r4,#0x4000000      ;2363
00009e  b108              CBZ      r0,|L2.164|
0000a0  200d              MOVS     r0,#0xd               ;2365
0000a2  e7c2              B        |L2.42|
                  |L2.164|
0000a4  f0047080          AND      r0,r4,#0x1000000      ;2368
0000a8  b108              CBZ      r0,|L2.174|
0000aa  200e              MOVS     r0,#0xe               ;2370
0000ac  e7bd              B        |L2.42|
                  |L2.174|
0000ae  f4040000          AND      r0,r4,#0x800000       ;2373
0000b2  b108              CBZ      r0,|L2.184|
0000b4  200f              MOVS     r0,#0xf               ;2375
0000b6  e7b8              B        |L2.42|
                  |L2.184|
0000b8  f4040080          AND      r0,r4,#0x400000       ;2378
0000bc  b108              CBZ      r0,|L2.194|
0000be  2010              MOVS     r0,#0x10              ;2380
0000c0  e7b3              B        |L2.42|
                  |L2.194|
0000c2  f4041000          AND      r0,r4,#0x200000       ;2383
0000c6  b108              CBZ      r0,|L2.204|
0000c8  2011              MOVS     r0,#0x11              ;2385
0000ca  e7ae              B        |L2.42|
                  |L2.204|
0000cc  f4041080          AND      r0,r4,#0x100000       ;2388
0000d0  b108              CBZ      r0,|L2.214|
0000d2  2012              MOVS     r0,#0x12              ;2390
0000d4  e7a9              B        |L2.42|
                  |L2.214|
0000d6  f4042000          AND      r0,r4,#0x80000        ;2393
0000da  b108              CBZ      r0,|L2.224|
0000dc  2013              MOVS     r0,#0x13              ;2395
0000de  e7a4              B        |L2.42|
                  |L2.224|
0000e0  f4042080          AND      r0,r4,#0x40000        ;2398
0000e4  b108              CBZ      r0,|L2.234|
0000e6  2014              MOVS     r0,#0x14              ;2400
0000e8  e79f              B        |L2.42|
                  |L2.234|
0000ea  f4043000          AND      r0,r4,#0x20000        ;2403
0000ee  b108              CBZ      r0,|L2.244|
0000f0  2015              MOVS     r0,#0x15              ;2405
0000f2  e79a              B        |L2.42|
                  |L2.244|
0000f4  f4043080          AND      r0,r4,#0x10000        ;2408
0000f8  b108              CBZ      r0,|L2.254|
0000fa  2016              MOVS     r0,#0x16              ;2410
0000fc  e795              B        |L2.42|
                  |L2.254|
0000fe  f4044000          AND      r0,r4,#0x8000         ;2413
000102  b108              CBZ      r0,|L2.264|
000104  2017              MOVS     r0,#0x17              ;2415
000106  e790              B        |L2.42|
                  |L2.264|
000108  f4044080          AND      r0,r4,#0x4000         ;2418
00010c  b108              CBZ      r0,|L2.274|
00010e  2018              MOVS     r0,#0x18              ;2420
000110  e78b              B        |L2.42|
                  |L2.274|
000112  f4045000          AND      r0,r4,#0x2000         ;2423
000116  b108              CBZ      r0,|L2.284|
000118  2019              MOVS     r0,#0x19              ;2425
00011a  e786              B        |L2.42|
                  |L2.284|
00011c  f0040008          AND      r0,r4,#8              ;2428
000120  b108              CBZ      r0,|L2.294|
000122  201a              MOVS     r0,#0x1a              ;2430
000124  e781              B        |L2.42|
                  |L2.294|
000126  4638              MOV      r0,r7                 ;2432
000128  e77f              B        |L2.42|
;;;2434   
                          ENDP

00012a  0000              DCW      0x0000
                  |L2.300|
                          DCD      0x40018000
                  |L2.304|
                          DCD      0xfdffe008

                          AREA ||i.CmdResp2Error||, CODE, READONLY, ALIGN=2

                  CmdResp2Error PROC
;;;2467     */
;;;2468   static SD_Error CmdResp2Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2469   {
;;;2470     SD_Error errorstatus = SD_OK;
000002  252a              MOVS     r5,#0x2a
;;;2471     uint32_t status;
;;;2472   
;;;2473     status = SDIO->STA;
000004  4810              LDR      r0,|L3.72|
000006  6b44              LDR      r4,[r0,#0x34]
;;;2474   
;;;2475     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
000008  e001              B        |L3.14|
                  |L3.10|
;;;2476     {
;;;2477       status = SDIO->STA;
00000a  480f              LDR      r0,|L3.72|
00000c  6b44              LDR      r4,[r0,#0x34]
                  |L3.14|
00000e  f0040045          AND      r0,r4,#0x45           ;2475
000012  2800              CMP      r0,#0                 ;2475
000014  d0f9              BEQ      |L3.10|
;;;2478     }
;;;2479   
;;;2480     if (status & SDIO_FLAG_CTIMEOUT)
000016  f0040004          AND      r0,r4,#4
00001a  b128              CBZ      r0,|L3.40|
;;;2481     {
;;;2482       errorstatus = SD_CMD_RSP_TIMEOUT;
00001c  2503              MOVS     r5,#3
;;;2483       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_ClearFlag
;;;2484       return(errorstatus);
000024  4628              MOV      r0,r5
                  |L3.38|
;;;2485     }
;;;2486     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2487     {
;;;2488       errorstatus = SD_CMD_CRC_FAIL;
;;;2489       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2490       return(errorstatus);
;;;2491     }
;;;2492   
;;;2493     /*!< Clear all the static flags */
;;;2494     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2495   
;;;2496     return(errorstatus);
;;;2497   }
000026  bd70              POP      {r4-r6,pc}
                  |L3.40|
000028  f0040001          AND      r0,r4,#1              ;2486
00002c  b128              CBZ      r0,|L3.58|
00002e  2501              MOVS     r5,#1                 ;2488
000030  2001              MOVS     r0,#1                 ;2489
000032  f7fffffe          BL       SDIO_ClearFlag
000036  4628              MOV      r0,r5                 ;2490
000038  e7f5              B        |L3.38|
                  |L3.58|
00003a  f24050ff          MOV      r0,#0x5ff             ;2494
00003e  f7fffffe          BL       SDIO_ClearFlag
000042  4628              MOV      r0,r5                 ;2496
000044  e7ef              B        |L3.38|
;;;2498   
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      0x40018000

                          AREA ||i.CmdResp3Error||, CODE, READONLY, ALIGN=2

                  CmdResp3Error PROC
;;;2439     */
;;;2440   static SD_Error CmdResp3Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2441   {
;;;2442     SD_Error errorstatus = SD_OK;
000002  252a              MOVS     r5,#0x2a
;;;2443     uint32_t status;
;;;2444   
;;;2445     status = SDIO->STA;
000004  480b              LDR      r0,|L4.52|
000006  6b44              LDR      r4,[r0,#0x34]
;;;2446   
;;;2447     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000008  e001              B        |L4.14|
                  |L4.10|
;;;2448     {
;;;2449       status = SDIO->STA;
00000a  480a              LDR      r0,|L4.52|
00000c  6b44              LDR      r4,[r0,#0x34]
                  |L4.14|
00000e  f0040045          AND      r0,r4,#0x45           ;2447
000012  2800              CMP      r0,#0                 ;2447
000014  d0f9              BEQ      |L4.10|
;;;2450     }
;;;2451   
;;;2452     if (status & SDIO_FLAG_CTIMEOUT)
000016  f0040004          AND      r0,r4,#4
00001a  b128              CBZ      r0,|L4.40|
;;;2453     {
;;;2454       errorstatus = SD_CMD_RSP_TIMEOUT;
00001c  2503              MOVS     r5,#3
;;;2455       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_ClearFlag
;;;2456       return(errorstatus);
000024  4628              MOV      r0,r5
                  |L4.38|
;;;2457     }
;;;2458     /*!< Clear all the static flags */
;;;2459     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2460     return(errorstatus);
;;;2461   }
000026  bd70              POP      {r4-r6,pc}
                  |L4.40|
000028  f24050ff          MOV      r0,#0x5ff             ;2459
00002c  f7fffffe          BL       SDIO_ClearFlag
000030  4628              MOV      r0,r5                 ;2460
000032  e7f8              B        |L4.38|
;;;2462   
                          ENDP

                  |L4.52|
                          DCD      0x40018000

                          AREA ||i.CmdResp6Error||, CODE, READONLY, ALIGN=2

                  CmdResp6Error PROC
;;;2505     */
;;;2506   static SD_Error CmdResp6Error(uint8_t cmd, uint16_t *prca)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2507   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;2508     SD_Error errorstatus = SD_OK;
000008  f04f082a          MOV      r8,#0x2a
;;;2509     uint32_t status;
;;;2510     uint32_t response_r1;
;;;2511   
;;;2512     status = SDIO->STA;
00000c  4822              LDR      r0,|L5.152|
00000e  6b45              LDR      r5,[r0,#0x34]
;;;2513   
;;;2514     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
000010  e001              B        |L5.22|
                  |L5.18|
;;;2515     {
;;;2516       status = SDIO->STA;
000012  4821              LDR      r0,|L5.152|
000014  6b45              LDR      r5,[r0,#0x34]
                  |L5.22|
000016  f0050045          AND      r0,r5,#0x45           ;2514
00001a  2800              CMP      r0,#0                 ;2514
00001c  d0f9              BEQ      |L5.18|
;;;2517     }
;;;2518   
;;;2519     if (status & SDIO_FLAG_CTIMEOUT)
00001e  f0050004          AND      r0,r5,#4
000022  b138              CBZ      r0,|L5.52|
;;;2520     {
;;;2521       errorstatus = SD_CMD_RSP_TIMEOUT;
000024  f04f0803          MOV      r8,#3
;;;2522       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       SDIO_ClearFlag
;;;2523       return(errorstatus);
00002e  4640              MOV      r0,r8
                  |L5.48|
;;;2524     }
;;;2525     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2526     {
;;;2527       errorstatus = SD_CMD_CRC_FAIL;
;;;2528       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2529       return(errorstatus);
;;;2530     }
;;;2531   
;;;2532     /*!< Check response received is of desired command */
;;;2533     if (SDIO_GetCommandResponse() != cmd)
;;;2534     {
;;;2535       errorstatus = SD_ILLEGAL_CMD;
;;;2536       return(errorstatus);
;;;2537     }
;;;2538   
;;;2539     /*!< Clear all the static flags */
;;;2540     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2541   
;;;2542     /*!< We have received response, retrieve it.  */
;;;2543     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;2544   
;;;2545     if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
;;;2546     {
;;;2547       *prca = (uint16_t) (response_r1 >> 16);
;;;2548       return(errorstatus);
;;;2549     }
;;;2550   
;;;2551     if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
;;;2552     {
;;;2553       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2554     }
;;;2555   
;;;2556     if (response_r1 & SD_R6_ILLEGAL_CMD)
;;;2557     {
;;;2558       return(SD_ILLEGAL_CMD);
;;;2559     }
;;;2560   
;;;2561     if (response_r1 & SD_R6_COM_CRC_FAILED)
;;;2562     {
;;;2563       return(SD_COM_CRC_FAILED);
;;;2564     }
;;;2565   
;;;2566     return(errorstatus);
;;;2567   }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L5.52|
000034  f0050001          AND      r0,r5,#1              ;2525
000038  b130              CBZ      r0,|L5.72|
00003a  f04f0801          MOV      r8,#1                 ;2527
00003e  2001              MOVS     r0,#1                 ;2528
000040  f7fffffe          BL       SDIO_ClearFlag
000044  4640              MOV      r0,r8                 ;2529
000046  e7f3              B        |L5.48|
                  |L5.72|
000048  f7fffffe          BL       SDIO_GetCommandResponse
00004c  42b0              CMP      r0,r6                 ;2533
00004e  d003              BEQ      |L5.88|
000050  f04f0810          MOV      r8,#0x10              ;2535
000054  4640              MOV      r0,r8                 ;2536
000056  e7eb              B        |L5.48|
                  |L5.88|
000058  f24050ff          MOV      r0,#0x5ff             ;2540
00005c  f7fffffe          BL       SDIO_ClearFlag
000060  2000              MOVS     r0,#0                 ;2543
000062  f7fffffe          BL       SDIO_GetResponse
000066  4604              MOV      r4,r0                 ;2543
000068  f4044060          AND      r0,r4,#0xe000         ;2545
00006c  b918              CBNZ     r0,|L5.118|
00006e  0c20              LSRS     r0,r4,#16             ;2547
000070  8038              STRH     r0,[r7,#0]            ;2547
000072  4640              MOV      r0,r8                 ;2548
000074  e7dc              B        |L5.48|
                  |L5.118|
000076  f4045000          AND      r0,r4,#0x2000         ;2551
00007a  b108              CBZ      r0,|L5.128|
00007c  2013              MOVS     r0,#0x13              ;2553
00007e  e7d7              B        |L5.48|
                  |L5.128|
000080  f4044080          AND      r0,r4,#0x4000         ;2556
000084  b108              CBZ      r0,|L5.138|
000086  2010              MOVS     r0,#0x10              ;2558
000088  e7d2              B        |L5.48|
                  |L5.138|
00008a  f4044000          AND      r0,r4,#0x8000         ;2561
00008e  b108              CBZ      r0,|L5.148|
000090  200f              MOVS     r0,#0xf               ;2563
000092  e7cd              B        |L5.48|
                  |L5.148|
000094  4640              MOV      r0,r8                 ;2566
000096  e7cb              B        |L5.48|
;;;2568   
                          ENDP

                  |L5.152|
                          DCD      0x40018000

                          AREA ||i.CmdResp7Error||, CODE, READONLY, ALIGN=2

                  CmdResp7Error PROC
;;;2256     */
;;;2257   static SD_Error CmdResp7Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2258   {
;;;2259     SD_Error errorstatus = SD_OK;
000002  262a              MOVS     r6,#0x2a
;;;2260     uint32_t status;
;;;2261     uint32_t timeout = SDIO_CMD0TIMEOUT;
000004  f44f3580          MOV      r5,#0x10000
;;;2262   
;;;2263     status = SDIO->STA;
000008  480f              LDR      r0,|L6.72|
00000a  6b44              LDR      r4,[r0,#0x34]
;;;2264   
;;;2265     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
00000c  e002              B        |L6.20|
                  |L6.14|
;;;2266     {
;;;2267       timeout--;
00000e  1e6d              SUBS     r5,r5,#1
;;;2268       status = SDIO->STA;
000010  480d              LDR      r0,|L6.72|
000012  6b44              LDR      r4,[r0,#0x34]
                  |L6.20|
000014  f0040045          AND      r0,r4,#0x45           ;2265
000018  b908              CBNZ     r0,|L6.30|
00001a  2d00              CMP      r5,#0                 ;2265
00001c  d1f7              BNE      |L6.14|
                  |L6.30|
;;;2269     }
;;;2270   
;;;2271     if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
00001e  b115              CBZ      r5,|L6.38|
000020  f0040004          AND      r0,r4,#4
000024  b128              CBZ      r0,|L6.50|
                  |L6.38|
;;;2272     {
;;;2273       /*!< Card is not V2.0 complient or card does not support the set voltage range */
;;;2274       errorstatus = SD_CMD_RSP_TIMEOUT;
000026  2603              MOVS     r6,#3
;;;2275       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       SDIO_ClearFlag
;;;2276       return(errorstatus);
00002e  4630              MOV      r0,r6
                  |L6.48|
;;;2277     }
;;;2278   
;;;2279     if (status & SDIO_FLAG_CMDREND)
;;;2280     {
;;;2281       /*!< Card is SD V2.0 compliant */
;;;2282       errorstatus = SD_OK;
;;;2283       SDIO_ClearFlag(SDIO_FLAG_CMDREND);
;;;2284       return(errorstatus);
;;;2285     }
;;;2286     return(errorstatus);
;;;2287   }
000030  bd70              POP      {r4-r6,pc}
                  |L6.50|
000032  f0040040          AND      r0,r4,#0x40           ;2279
000036  b128              CBZ      r0,|L6.68|
000038  262a              MOVS     r6,#0x2a              ;2282
00003a  2040              MOVS     r0,#0x40              ;2283
00003c  f7fffffe          BL       SDIO_ClearFlag
000040  4630              MOV      r0,r6                 ;2284
000042  e7f5              B        |L6.48|
                  |L6.68|
000044  4630              MOV      r0,r6                 ;2286
000046  e7f3              B        |L6.48|
;;;2288   
                          ENDP

                  |L6.72|
                          DCD      0x40018000

                          AREA ||i.FindSCR||, CODE, READONLY, ALIGN=2

                  FindSCR PROC
;;;2847     */
;;;2848   static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;2849   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;2850     uint32_t index = 0;
000008  2600              MOVS     r6,#0
;;;2851     SD_Error errorstatus = SD_OK;
00000a  242a              MOVS     r4,#0x2a
;;;2852     uint32_t tempscr[2] = {0, 0};
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  9001              STR      r0,[sp,#4]
;;;2853   
;;;2854     /*!< Set Block Size To 8 Bytes */
;;;2855     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;2856     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
000012  2008              MOVS     r0,#8
000014  495c              LDR      r1,|L7.392|
000016  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;2857     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
000018  2010              MOVS     r0,#0x10
00001a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;2858     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00001c  2040              MOVS     r0,#0x40
00001e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;2859     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000020  2000              MOVS     r0,#0
000022  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;2860     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000024  f44f6080          MOV      r0,#0x400
000028  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;2861     SDIO_SendCommand(&SDIO_CmdInitStructure);
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       SDIO_SendCommand
;;;2862   
;;;2863     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000030  2010              MOVS     r0,#0x10
000032  f7fffffe          BL       CmdResp1Error
000036  4604              MOV      r4,r0
;;;2864   
;;;2865     if (errorstatus != SD_OK)
000038  2c2a              CMP      r4,#0x2a
00003a  d002              BEQ      |L7.66|
;;;2866     {
;;;2867       return(errorstatus);
00003c  4620              MOV      r0,r4
                  |L7.62|
;;;2868     }
;;;2869   
;;;2870     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;2871     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2872     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2873     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2874     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2875     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2876     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2877   
;;;2878     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2879   
;;;2880     if (errorstatus != SD_OK)
;;;2881     {
;;;2882       return(errorstatus);
;;;2883     }
;;;2884     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;2885     SDIO_DataInitStructure.SDIO_DataLength = 8;
;;;2886     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
;;;2887     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;2888     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;2889     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;2890     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;2891   
;;;2892   
;;;2893     /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
;;;2894     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;2895     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
;;;2896     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2897     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2898     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2899     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2900   
;;;2901     errorstatus = CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
;;;2902   
;;;2903     if (errorstatus != SD_OK)
;;;2904     {
;;;2905       return(errorstatus);
;;;2906     }
;;;2907   
;;;2908     while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;2909     {
;;;2910       if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;2911       {
;;;2912         *(tempscr + index) = SDIO_ReadData();
;;;2913         index++;
;;;2914       }
;;;2915     }
;;;2916   
;;;2917     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;2918     {
;;;2919       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;2920       errorstatus = SD_DATA_TIMEOUT;
;;;2921       return(errorstatus);
;;;2922     }
;;;2923     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;2924     {
;;;2925       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;2926       errorstatus = SD_DATA_CRC_FAIL;
;;;2927       return(errorstatus);
;;;2928     }
;;;2929     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;2930     {
;;;2931       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;2932       errorstatus = SD_RX_OVERRUN;
;;;2933       return(errorstatus);
;;;2934     }
;;;2935     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;2936     {
;;;2937       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;2938       errorstatus = SD_START_BIT_ERR;
;;;2939       return(errorstatus);
;;;2940     }
;;;2941   
;;;2942     /*!< Clear all the static flags */
;;;2943     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2944   
;;;2945     *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
;;;2946   
;;;2947     *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
;;;2948   
;;;2949     return(errorstatus);
;;;2950   }
00003e  e8bd81fc          POP      {r2-r8,pc}
                  |L7.66|
000042  4852              LDR      r0,|L7.396|
000044  8800              LDRH     r0,[r0,#0]            ;2871  ; RCA
000046  0400              LSLS     r0,r0,#16             ;2871
000048  494f              LDR      r1,|L7.392|
00004a  6008              STR      r0,[r1,#0]            ;2871  ; SDIO_CmdInitStructure
00004c  2037              MOVS     r0,#0x37              ;2872
00004e  6048              STR      r0,[r1,#4]            ;2872  ; SDIO_CmdInitStructure
000050  2040              MOVS     r0,#0x40              ;2873
000052  6088              STR      r0,[r1,#8]            ;2873  ; SDIO_CmdInitStructure
000054  2000              MOVS     r0,#0                 ;2874
000056  60c8              STR      r0,[r1,#0xc]          ;2874  ; SDIO_CmdInitStructure
000058  f44f6080          MOV      r0,#0x400             ;2875
00005c  6108              STR      r0,[r1,#0x10]         ;2875  ; SDIO_CmdInitStructure
00005e  4608              MOV      r0,r1                 ;2876
000060  f7fffffe          BL       SDIO_SendCommand
000064  2037              MOVS     r0,#0x37              ;2878
000066  f7fffffe          BL       CmdResp1Error
00006a  4604              MOV      r4,r0                 ;2878
00006c  2c2a              CMP      r4,#0x2a              ;2880
00006e  d001              BEQ      |L7.116|
000070  4620              MOV      r0,r4                 ;2882
000072  e7e4              B        |L7.62|
                  |L7.116|
000074  4846              LDR      r0,|L7.400|
000076  4947              LDR      r1,|L7.404|
000078  6008              STR      r0,[r1,#0]            ;2884  ; SDIO_DataInitStructure
00007a  2008              MOVS     r0,#8                 ;2885
00007c  6048              STR      r0,[r1,#4]            ;2885  ; SDIO_DataInitStructure
00007e  2030              MOVS     r0,#0x30              ;2886
000080  6088              STR      r0,[r1,#8]            ;2886  ; SDIO_DataInitStructure
000082  2002              MOVS     r0,#2                 ;2887
000084  60c8              STR      r0,[r1,#0xc]          ;2887  ; SDIO_DataInitStructure
000086  2000              MOVS     r0,#0                 ;2888
000088  6108              STR      r0,[r1,#0x10]         ;2888  ; SDIO_DataInitStructure
00008a  2001              MOVS     r0,#1                 ;2889
00008c  6148              STR      r0,[r1,#0x14]         ;2889  ; SDIO_DataInitStructure
00008e  4608              MOV      r0,r1                 ;2890
000090  f7fffffe          BL       SDIO_DataConfig
000094  2000              MOVS     r0,#0                 ;2894
000096  493c              LDR      r1,|L7.392|
000098  6008              STR      r0,[r1,#0]            ;2894  ; SDIO_CmdInitStructure
00009a  2033              MOVS     r0,#0x33              ;2895
00009c  6048              STR      r0,[r1,#4]            ;2895  ; SDIO_CmdInitStructure
00009e  2040              MOVS     r0,#0x40              ;2896
0000a0  6088              STR      r0,[r1,#8]            ;2896  ; SDIO_CmdInitStructure
0000a2  2000              MOVS     r0,#0                 ;2897
0000a4  60c8              STR      r0,[r1,#0xc]          ;2897  ; SDIO_CmdInitStructure
0000a6  f44f6080          MOV      r0,#0x400             ;2898
0000aa  6108              STR      r0,[r1,#0x10]         ;2898  ; SDIO_CmdInitStructure
0000ac  4608              MOV      r0,r1                 ;2899
0000ae  f7fffffe          BL       SDIO_SendCommand
0000b2  2033              MOVS     r0,#0x33              ;2901
0000b4  f7fffffe          BL       CmdResp1Error
0000b8  4604              MOV      r4,r0                 ;2901
0000ba  2c2a              CMP      r4,#0x2a              ;2903
0000bc  d001              BEQ      |L7.194|
0000be  4620              MOV      r0,r4                 ;2905
0000c0  e7bd              B        |L7.62|
                  |L7.194|
0000c2  e009              B        |L7.216|
                  |L7.196|
0000c4  f44f1000          MOV      r0,#0x200000          ;2910
0000c8  f7fffffe          BL       SDIO_GetFlagStatus
0000cc  b120              CBZ      r0,|L7.216|
0000ce  f7fffffe          BL       SDIO_ReadData
0000d2  f84d0026          STR      r0,[sp,r6,LSL #2]     ;2912
0000d6  1c76              ADDS     r6,r6,#1              ;2913
                  |L7.216|
0000d8  482f              LDR      r0,|L7.408|
0000da  6b40              LDR      r0,[r0,#0x34]         ;2908
0000dc  f240612a          MOV      r1,#0x62a             ;2908
0000e0  4008              ANDS     r0,r0,r1              ;2908
0000e2  2800              CMP      r0,#0                 ;2908
0000e4  d0ee              BEQ      |L7.196|
0000e6  2008              MOVS     r0,#8                 ;2917
0000e8  f7fffffe          BL       SDIO_GetFlagStatus
0000ec  b128              CBZ      r0,|L7.250|
0000ee  2008              MOVS     r0,#8                 ;2919
0000f0  f7fffffe          BL       SDIO_ClearFlag
0000f4  2404              MOVS     r4,#4                 ;2920
0000f6  4620              MOV      r0,r4                 ;2921
0000f8  e7a1              B        |L7.62|
                  |L7.250|
0000fa  2002              MOVS     r0,#2                 ;2923
0000fc  f7fffffe          BL       SDIO_GetFlagStatus
000100  b128              CBZ      r0,|L7.270|
000102  2002              MOVS     r0,#2                 ;2925
000104  f7fffffe          BL       SDIO_ClearFlag
000108  2402              MOVS     r4,#2                 ;2926
00010a  4620              MOV      r0,r4                 ;2927
00010c  e797              B        |L7.62|
                  |L7.270|
00010e  2020              MOVS     r0,#0x20              ;2929
000110  f7fffffe          BL       SDIO_GetFlagStatus
000114  b128              CBZ      r0,|L7.290|
000116  2020              MOVS     r0,#0x20              ;2931
000118  f7fffffe          BL       SDIO_ClearFlag
00011c  2406              MOVS     r4,#6                 ;2932
00011e  4620              MOV      r0,r4                 ;2933
000120  e78d              B        |L7.62|
                  |L7.290|
000122  f44f7000          MOV      r0,#0x200             ;2935
000126  f7fffffe          BL       SDIO_GetFlagStatus
00012a  b130              CBZ      r0,|L7.314|
00012c  f44f7000          MOV      r0,#0x200             ;2937
000130  f7fffffe          BL       SDIO_ClearFlag
000134  2407              MOVS     r4,#7                 ;2938
000136  4620              MOV      r0,r4                 ;2939
000138  e781              B        |L7.62|
                  |L7.314|
00013a  f24050ff          MOV      r0,#0x5ff             ;2943
00013e  f7fffffe          BL       SDIO_ClearFlag
000142  9800              LDR      r0,[sp,#0]            ;2945
000144  0600              LSLS     r0,r0,#24             ;2945
000146  9900              LDR      r1,[sp,#0]            ;2945
000148  f401417f          AND      r1,r1,#0xff00         ;2945
00014c  ea402001          ORR      r0,r0,r1,LSL #8       ;2945
000150  9900              LDR      r1,[sp,#0]            ;2945
000152  f401017f          AND      r1,r1,#0xff0000       ;2945
000156  ea402011          ORR      r0,r0,r1,LSR #8       ;2945
00015a  9900              LDR      r1,[sp,#0]            ;2945
00015c  ea406011          ORR      r0,r0,r1,LSR #24      ;2945
000160  6068              STR      r0,[r5,#4]            ;2945
000162  9801              LDR      r0,[sp,#4]            ;2947
000164  0600              LSLS     r0,r0,#24             ;2947
000166  9901              LDR      r1,[sp,#4]            ;2947
000168  f401417f          AND      r1,r1,#0xff00         ;2947
00016c  ea402001          ORR      r0,r0,r1,LSL #8       ;2947
000170  9901              LDR      r1,[sp,#4]            ;2947
000172  f401017f          AND      r1,r1,#0xff0000       ;2947
000176  ea402011          ORR      r0,r0,r1,LSR #8       ;2947
00017a  9901              LDR      r1,[sp,#4]            ;2947
00017c  ea406011          ORR      r0,r0,r1,LSR #24      ;2947
000180  6028              STR      r0,[r5,#0]            ;2947
000182  4620              MOV      r0,r4                 ;2949
000184  e75b              B        |L7.62|
;;;2951   
                          ENDP

000186  0000              DCW      0x0000
                  |L7.392|
                          DCD      SDIO_CmdInitStructure
                  |L7.396|
                          DCD      ||RCA||
                  |L7.400|
                          DCD      0x000fffff
                  |L7.404|
                          DCD      SDIO_DataInitStructure
                  |L7.408|
                          DCD      0x40018000

                          AREA ||i.IsCardProgramming||, CODE, READONLY, ALIGN=2

                  IsCardProgramming PROC
;;;2688     */
;;;2689   static SD_Error IsCardProgramming(uint8_t *pstatus)
000000  b57c              PUSH     {r2-r6,lr}
;;;2690   {
000002  4604              MOV      r4,r0
;;;2691     SD_Error errorstatus = SD_OK;
000004  252a              MOVS     r5,#0x2a
;;;2692     __IO uint32_t respR1 = 0, status = 0;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
00000a  9000              STR      r0,[sp,#0]
;;;2693   
;;;2694     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
00000c  485f              LDR      r0,|L8.396|
00000e  8800              LDRH     r0,[r0,#0]  ; RCA
000010  0400              LSLS     r0,r0,#16
000012  495f              LDR      r1,|L8.400|
000014  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;2695     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
000016  200d              MOVS     r0,#0xd
000018  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;2696     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00001a  2040              MOVS     r0,#0x40
00001c  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;2697     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00001e  2000              MOVS     r0,#0
000020  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;2698     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000022  f44f6080          MOV      r0,#0x400
000026  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;2699     SDIO_SendCommand(&SDIO_CmdInitStructure);
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       SDIO_SendCommand
;;;2700   
;;;2701     status = SDIO->STA;
00002e  4859              LDR      r0,|L8.404|
000030  6b40              LDR      r0,[r0,#0x34]
000032  9000              STR      r0,[sp,#0]
;;;2702     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000034  e002              B        |L8.60|
                  |L8.54|
;;;2703     {
;;;2704       status = SDIO->STA;
000036  4857              LDR      r0,|L8.404|
000038  6b40              LDR      r0,[r0,#0x34]
00003a  9000              STR      r0,[sp,#0]
                  |L8.60|
00003c  9800              LDR      r0,[sp,#0]            ;2702
00003e  f0000045          AND      r0,r0,#0x45           ;2702
000042  2800              CMP      r0,#0                 ;2702
000044  d0f7              BEQ      |L8.54|
;;;2705     }
;;;2706   
;;;2707     if (status & SDIO_FLAG_CTIMEOUT)
000046  9800              LDR      r0,[sp,#0]
000048  f0000004          AND      r0,r0,#4
00004c  b128              CBZ      r0,|L8.90|
;;;2708     {
;;;2709       errorstatus = SD_CMD_RSP_TIMEOUT;
00004e  2503              MOVS     r5,#3
;;;2710       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000050  2004              MOVS     r0,#4
000052  f7fffffe          BL       SDIO_ClearFlag
;;;2711       return(errorstatus);
000056  4628              MOV      r0,r5
                  |L8.88|
;;;2712     }
;;;2713     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2714     {
;;;2715       errorstatus = SD_CMD_CRC_FAIL;
;;;2716       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2717       return(errorstatus);
;;;2718     }
;;;2719   
;;;2720     status = (uint32_t)SDIO_GetCommandResponse();
;;;2721   
;;;2722     /*!< Check response received is of desired command */
;;;2723     if (status != SD_CMD_SEND_STATUS)
;;;2724     {
;;;2725       errorstatus = SD_ILLEGAL_CMD;
;;;2726       return(errorstatus);
;;;2727     }
;;;2728   
;;;2729     /*!< Clear all the static flags */
;;;2730     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2731   
;;;2732   
;;;2733     /*!< We have received response, retrieve it for analysis  */
;;;2734     respR1 = SDIO_GetResponse(SDIO_RESP1);
;;;2735   
;;;2736     /*!< Find out card status */
;;;2737     *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);
;;;2738   
;;;2739     if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2740     {
;;;2741       return(errorstatus);
;;;2742     }
;;;2743   
;;;2744     if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2745     {
;;;2746       return(SD_ADDR_OUT_OF_RANGE);
;;;2747     }
;;;2748   
;;;2749     if (respR1 & SD_OCR_ADDR_MISALIGNED)
;;;2750     {
;;;2751       return(SD_ADDR_MISALIGNED);
;;;2752     }
;;;2753   
;;;2754     if (respR1 & SD_OCR_BLOCK_LEN_ERR)
;;;2755     {
;;;2756       return(SD_BLOCK_LEN_ERR);
;;;2757     }
;;;2758   
;;;2759     if (respR1 & SD_OCR_ERASE_SEQ_ERR)
;;;2760     {
;;;2761       return(SD_ERASE_SEQ_ERR);
;;;2762     }
;;;2763   
;;;2764     if (respR1 & SD_OCR_BAD_ERASE_PARAM)
;;;2765     {
;;;2766       return(SD_BAD_ERASE_PARAM);
;;;2767     }
;;;2768   
;;;2769     if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2770     {
;;;2771       return(SD_WRITE_PROT_VIOLATION);
;;;2772     }
;;;2773   
;;;2774     if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2775     {
;;;2776       return(SD_LOCK_UNLOCK_FAILED);
;;;2777     }
;;;2778   
;;;2779     if (respR1 & SD_OCR_COM_CRC_FAILED)
;;;2780     {
;;;2781       return(SD_COM_CRC_FAILED);
;;;2782     }
;;;2783   
;;;2784     if (respR1 & SD_OCR_ILLEGAL_CMD)
;;;2785     {
;;;2786       return(SD_ILLEGAL_CMD);
;;;2787     }
;;;2788   
;;;2789     if (respR1 & SD_OCR_CARD_ECC_FAILED)
;;;2790     {
;;;2791       return(SD_CARD_ECC_FAILED);
;;;2792     }
;;;2793   
;;;2794     if (respR1 & SD_OCR_CC_ERROR)
;;;2795     {
;;;2796       return(SD_CC_ERROR);
;;;2797     }
;;;2798   
;;;2799     if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2800     {
;;;2801       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2802     }
;;;2803   
;;;2804     if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2805     {
;;;2806       return(SD_STREAM_READ_UNDERRUN);
;;;2807     }
;;;2808   
;;;2809     if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2810     {
;;;2811       return(SD_STREAM_WRITE_OVERRUN);
;;;2812     }
;;;2813   
;;;2814     if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2815     {
;;;2816       return(SD_CID_CSD_OVERWRITE);
;;;2817     }
;;;2818   
;;;2819     if (respR1 & SD_OCR_WP_ERASE_SKIP)
;;;2820     {
;;;2821       return(SD_WP_ERASE_SKIP);
;;;2822     }
;;;2823   
;;;2824     if (respR1 & SD_OCR_CARD_ECC_DISABLED)
;;;2825     {
;;;2826       return(SD_CARD_ECC_DISABLED);
;;;2827     }
;;;2828   
;;;2829     if (respR1 & SD_OCR_ERASE_RESET)
;;;2830     {
;;;2831       return(SD_ERASE_RESET);
;;;2832     }
;;;2833   
;;;2834     if (respR1 & SD_OCR_AKE_SEQ_ERROR)
;;;2835     {
;;;2836       return(SD_AKE_SEQ_ERROR);
;;;2837     }
;;;2838   
;;;2839     return(errorstatus);
;;;2840   }
000058  bd7c              POP      {r2-r6,pc}
                  |L8.90|
00005a  9800              LDR      r0,[sp,#0]            ;2713
00005c  f0000001          AND      r0,r0,#1              ;2713
000060  b128              CBZ      r0,|L8.110|
000062  2501              MOVS     r5,#1                 ;2715
000064  2001              MOVS     r0,#1                 ;2716
000066  f7fffffe          BL       SDIO_ClearFlag
00006a  4628              MOV      r0,r5                 ;2717
00006c  e7f4              B        |L8.88|
                  |L8.110|
00006e  f7fffffe          BL       SDIO_GetCommandResponse
000072  9000              STR      r0,[sp,#0]            ;2720
000074  9800              LDR      r0,[sp,#0]            ;2723
000076  280d              CMP      r0,#0xd               ;2723
000078  d002              BEQ      |L8.128|
00007a  2510              MOVS     r5,#0x10              ;2725
00007c  4628              MOV      r0,r5                 ;2726
00007e  e7eb              B        |L8.88|
                  |L8.128|
000080  f24050ff          MOV      r0,#0x5ff             ;2730
000084  f7fffffe          BL       SDIO_ClearFlag
000088  2000              MOVS     r0,#0                 ;2734
00008a  f7fffffe          BL       SDIO_GetResponse
00008e  9001              STR      r0,[sp,#4]            ;2734
000090  9801              LDR      r0,[sp,#4]            ;2737
000092  f3c02043          UBFX     r0,r0,#9,#4           ;2737
000096  7020              STRB     r0,[r4,#0]            ;2737
000098  493f              LDR      r1,|L8.408|
00009a  9801              LDR      r0,[sp,#4]            ;2739
00009c  4008              ANDS     r0,r0,r1              ;2739
00009e  b908              CBNZ     r0,|L8.164|
0000a0  4628              MOV      r0,r5                 ;2741
0000a2  e7d9              B        |L8.88|
                  |L8.164|
0000a4  9801              LDR      r0,[sp,#4]            ;2744
0000a6  f0004000          AND      r0,r0,#0x80000000     ;2744
0000aa  b108              CBZ      r0,|L8.176|
0000ac  201c              MOVS     r0,#0x1c              ;2746
0000ae  e7d3              B        |L8.88|
                  |L8.176|
0000b0  9801              LDR      r0,[sp,#4]            ;2749
0000b2  f0004080          AND      r0,r0,#0x40000000     ;2749
0000b6  b108              CBZ      r0,|L8.188|
0000b8  2009              MOVS     r0,#9                 ;2751
0000ba  e7cd              B        |L8.88|
                  |L8.188|
0000bc  9801              LDR      r0,[sp,#4]            ;2754
0000be  f0005000          AND      r0,r0,#0x20000000     ;2754
0000c2  b108              CBZ      r0,|L8.200|
0000c4  200a              MOVS     r0,#0xa               ;2756
0000c6  e7c7              B        |L8.88|
                  |L8.200|
0000c8  9801              LDR      r0,[sp,#4]            ;2759
0000ca  f0005080          AND      r0,r0,#0x10000000     ;2759
0000ce  b108              CBZ      r0,|L8.212|
0000d0  200b              MOVS     r0,#0xb               ;2761
0000d2  e7c1              B        |L8.88|
                  |L8.212|
0000d4  9801              LDR      r0,[sp,#4]            ;2764
0000d6  f0006000          AND      r0,r0,#0x8000000      ;2764
0000da  b108              CBZ      r0,|L8.224|
0000dc  200c              MOVS     r0,#0xc               ;2766
0000de  e7bb              B        |L8.88|
                  |L8.224|
0000e0  9801              LDR      r0,[sp,#4]            ;2769
0000e2  f0006080          AND      r0,r0,#0x4000000      ;2769
0000e6  b108              CBZ      r0,|L8.236|
0000e8  200d              MOVS     r0,#0xd               ;2771
0000ea  e7b5              B        |L8.88|
                  |L8.236|
0000ec  9801              LDR      r0,[sp,#4]            ;2774
0000ee  f0007080          AND      r0,r0,#0x1000000      ;2774
0000f2  b108              CBZ      r0,|L8.248|
0000f4  200e              MOVS     r0,#0xe               ;2776
0000f6  e7af              B        |L8.88|
                  |L8.248|
0000f8  9801              LDR      r0,[sp,#4]            ;2779
0000fa  f4000000          AND      r0,r0,#0x800000       ;2779
0000fe  b108              CBZ      r0,|L8.260|
000100  200f              MOVS     r0,#0xf               ;2781
000102  e7a9              B        |L8.88|
                  |L8.260|
000104  9801              LDR      r0,[sp,#4]            ;2784
000106  f4000080          AND      r0,r0,#0x400000       ;2784
00010a  b108              CBZ      r0,|L8.272|
00010c  2010              MOVS     r0,#0x10              ;2786
00010e  e7a3              B        |L8.88|
                  |L8.272|
000110  9801              LDR      r0,[sp,#4]            ;2789
000112  f4001000          AND      r0,r0,#0x200000       ;2789
000116  b108              CBZ      r0,|L8.284|
000118  2011              MOVS     r0,#0x11              ;2791
00011a  e79d              B        |L8.88|
                  |L8.284|
00011c  9801              LDR      r0,[sp,#4]            ;2794
00011e  f4001080          AND      r0,r0,#0x100000       ;2794
000122  b108              CBZ      r0,|L8.296|
000124  2012              MOVS     r0,#0x12              ;2796
000126  e797              B        |L8.88|
                  |L8.296|
000128  9801              LDR      r0,[sp,#4]            ;2799
00012a  f4002000          AND      r0,r0,#0x80000        ;2799
00012e  b108              CBZ      r0,|L8.308|
000130  2013              MOVS     r0,#0x13              ;2801
000132  e791              B        |L8.88|
                  |L8.308|
000134  9801              LDR      r0,[sp,#4]            ;2804
000136  f4002080          AND      r0,r0,#0x40000        ;2804
00013a  b108              CBZ      r0,|L8.320|
00013c  2014              MOVS     r0,#0x14              ;2806
00013e  e78b              B        |L8.88|
                  |L8.320|
000140  9801              LDR      r0,[sp,#4]            ;2809
000142  f4003000          AND      r0,r0,#0x20000        ;2809
000146  b108              CBZ      r0,|L8.332|
000148  2015              MOVS     r0,#0x15              ;2811
00014a  e785              B        |L8.88|
                  |L8.332|
00014c  9801              LDR      r0,[sp,#4]            ;2814
00014e  f4003080          AND      r0,r0,#0x10000        ;2814
000152  b108              CBZ      r0,|L8.344|
000154  2016              MOVS     r0,#0x16              ;2816
000156  e77f              B        |L8.88|
                  |L8.344|
000158  9801              LDR      r0,[sp,#4]            ;2819
00015a  f4004000          AND      r0,r0,#0x8000         ;2819
00015e  b108              CBZ      r0,|L8.356|
000160  2017              MOVS     r0,#0x17              ;2821
000162  e779              B        |L8.88|
                  |L8.356|
000164  9801              LDR      r0,[sp,#4]            ;2824
000166  f4004080          AND      r0,r0,#0x4000         ;2824
00016a  b108              CBZ      r0,|L8.368|
00016c  2018              MOVS     r0,#0x18              ;2826
00016e  e773              B        |L8.88|
                  |L8.368|
000170  9801              LDR      r0,[sp,#4]            ;2829
000172  f4005000          AND      r0,r0,#0x2000         ;2829
000176  b108              CBZ      r0,|L8.380|
000178  2019              MOVS     r0,#0x19              ;2831
00017a  e76d              B        |L8.88|
                  |L8.380|
00017c  9801              LDR      r0,[sp,#4]            ;2834
00017e  f0000008          AND      r0,r0,#8              ;2834
000182  b108              CBZ      r0,|L8.392|
000184  201a              MOVS     r0,#0x1a              ;2836
000186  e767              B        |L8.88|
                  |L8.392|
000188  4628              MOV      r0,r5                 ;2839
00018a  e765              B        |L8.88|
;;;2841   
                          ENDP

                  |L8.396|
                          DCD      ||RCA||
                  |L8.400|
                          DCD      SDIO_CmdInitStructure
                  |L8.404|
                          DCD      0x40018000
                  |L8.408|
                          DCD      0xfdffe008

                          AREA ||i.SDEnWideBus||, CODE, READONLY, ALIGN=2

                  SDEnWideBus PROC
;;;2574     */
;;;2575   static SD_Error SDEnWideBus(FunctionalState NewState)
000000  b57c              PUSH     {r2-r6,lr}
;;;2576   {
000002  4605              MOV      r5,r0
;;;2577     SD_Error errorstatus = SD_OK;
000004  242a              MOVS     r4,#0x2a
;;;2578   
;;;2579     uint32_t scr[2] = {0, 0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;2580   
;;;2581     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
00000c  f7fffffe          BL       SDIO_GetResponse
000010  f0007000          AND      r0,r0,#0x2000000
000014  b110              CBZ      r0,|L9.28|
;;;2582     {
;;;2583       errorstatus = SD_LOCK_UNLOCK_FAILED;
000016  240e              MOVS     r4,#0xe
;;;2584       return(errorstatus);
000018  4620              MOV      r0,r4
                  |L9.26|
;;;2585     }
;;;2586   
;;;2587     /*!< Get SCR Register */
;;;2588     errorstatus = FindSCR(RCA, scr);
;;;2589   
;;;2590     if (errorstatus != SD_OK)
;;;2591     {
;;;2592       return(errorstatus);
;;;2593     }
;;;2594   
;;;2595     /*!< If wide bus operation to be enabled */
;;;2596     if (NewState == ENABLE)
;;;2597     {
;;;2598       /*!< If requested card supports wide bus operation */
;;;2599       if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
;;;2600       {
;;;2601         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2602         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2603         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2604         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2605         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2606         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2607         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2608   
;;;2609         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2610   
;;;2611         if (errorstatus != SD_OK)
;;;2612         {
;;;2613           return(errorstatus);
;;;2614         }
;;;2615   
;;;2616         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2617         SDIO_CmdInitStructure.SDIO_Argument = 0x2;
;;;2618         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;2619         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2620         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2621         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2622         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2623   
;;;2624         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;2625   
;;;2626         if (errorstatus != SD_OK)
;;;2627         {
;;;2628           return(errorstatus);
;;;2629         }
;;;2630         return(errorstatus);
;;;2631       }
;;;2632       else
;;;2633       {
;;;2634         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2635         return(errorstatus);
;;;2636       }
;;;2637     }   /*!< If wide bus operation to be disabled */
;;;2638     else
;;;2639     {
;;;2640       /*!< If requested card supports 1 bit mode operation */
;;;2641       if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
;;;2642       {
;;;2643         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2644         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2645         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2646         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2647         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2648         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2649         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2650   
;;;2651   
;;;2652         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2653   
;;;2654         if (errorstatus != SD_OK)
;;;2655         {
;;;2656           return(errorstatus);
;;;2657         }
;;;2658   
;;;2659         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2660         SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;2661         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;2662         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2663         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2664         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2665         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2666   
;;;2667         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;2668   
;;;2669         if (errorstatus != SD_OK)
;;;2670         {
;;;2671           return(errorstatus);
;;;2672         }
;;;2673   
;;;2674         return(errorstatus);
;;;2675       }
;;;2676       else
;;;2677       {
;;;2678         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2679         return(errorstatus);
;;;2680       }
;;;2681     }
;;;2682   }
00001a  bd7c              POP      {r2-r6,pc}
                  |L9.28|
00001c  493f              LDR      r1,|L9.284|
00001e  8809              LDRH     r1,[r1,#0]            ;2588  ; RCA
000020  b288              UXTH     r0,r1                 ;2588
000022  4669              MOV      r1,sp                 ;2588
000024  f7fffffe          BL       FindSCR
000028  4604              MOV      r4,r0                 ;2588
00002a  2c2a              CMP      r4,#0x2a              ;2590
00002c  d001              BEQ      |L9.50|
00002e  4620              MOV      r0,r4                 ;2592
000030  e7f3              B        |L9.26|
                  |L9.50|
000032  2d01              CMP      r5,#1                 ;2596
000034  d138              BNE      |L9.168|
000036  9801              LDR      r0,[sp,#4]            ;2599
000038  f4002080          AND      r0,r0,#0x40000        ;2599
00003c  2800              CMP      r0,#0                 ;2599
00003e  d030              BEQ      |L9.162|
000040  4836              LDR      r0,|L9.284|
000042  8800              LDRH     r0,[r0,#0]            ;2602  ; RCA
000044  0400              LSLS     r0,r0,#16             ;2602
000046  4936              LDR      r1,|L9.288|
000048  6008              STR      r0,[r1,#0]            ;2602  ; SDIO_CmdInitStructure
00004a  2037              MOVS     r0,#0x37              ;2603
00004c  6048              STR      r0,[r1,#4]            ;2603  ; SDIO_CmdInitStructure
00004e  2040              MOVS     r0,#0x40              ;2604
000050  6088              STR      r0,[r1,#8]            ;2604  ; SDIO_CmdInitStructure
000052  2000              MOVS     r0,#0                 ;2605
000054  60c8              STR      r0,[r1,#0xc]          ;2605  ; SDIO_CmdInitStructure
000056  02a8              LSLS     r0,r5,#10             ;2606
000058  6108              STR      r0,[r1,#0x10]         ;2606  ; SDIO_CmdInitStructure
00005a  4608              MOV      r0,r1                 ;2607
00005c  f7fffffe          BL       SDIO_SendCommand
000060  2037              MOVS     r0,#0x37              ;2609
000062  f7fffffe          BL       CmdResp1Error
000066  4604              MOV      r4,r0                 ;2609
000068  2c2a              CMP      r4,#0x2a              ;2611
00006a  d001              BEQ      |L9.112|
00006c  4620              MOV      r0,r4                 ;2613
00006e  e7d4              B        |L9.26|
                  |L9.112|
000070  2002              MOVS     r0,#2                 ;2617
000072  492b              LDR      r1,|L9.288|
000074  6008              STR      r0,[r1,#0]            ;2617  ; SDIO_CmdInitStructure
000076  2006              MOVS     r0,#6                 ;2618
000078  6048              STR      r0,[r1,#4]            ;2618  ; SDIO_CmdInitStructure
00007a  2040              MOVS     r0,#0x40              ;2619
00007c  6088              STR      r0,[r1,#8]            ;2619  ; SDIO_CmdInitStructure
00007e  2000              MOVS     r0,#0                 ;2620
000080  60c8              STR      r0,[r1,#0xc]          ;2620  ; SDIO_CmdInitStructure
000082  f44f6080          MOV      r0,#0x400             ;2621
000086  6108              STR      r0,[r1,#0x10]         ;2621  ; SDIO_CmdInitStructure
000088  4608              MOV      r0,r1                 ;2622
00008a  f7fffffe          BL       SDIO_SendCommand
00008e  2006              MOVS     r0,#6                 ;2624
000090  f7fffffe          BL       CmdResp1Error
000094  4604              MOV      r4,r0                 ;2624
000096  2c2a              CMP      r4,#0x2a              ;2626
000098  d001              BEQ      |L9.158|
00009a  4620              MOV      r0,r4                 ;2628
00009c  e7bd              B        |L9.26|
                  |L9.158|
00009e  4620              MOV      r0,r4                 ;2630
0000a0  e7bb              B        |L9.26|
                  |L9.162|
0000a2  2425              MOVS     r4,#0x25              ;2634
0000a4  4620              MOV      r0,r4                 ;2635
0000a6  e7b8              B        |L9.26|
                  |L9.168|
0000a8  9801              LDR      r0,[sp,#4]            ;2641
0000aa  f4003080          AND      r0,r0,#0x10000        ;2641
0000ae  b378              CBZ      r0,|L9.272|
0000b0  481a              LDR      r0,|L9.284|
0000b2  8800              LDRH     r0,[r0,#0]            ;2644  ; RCA
0000b4  0400              LSLS     r0,r0,#16             ;2644
0000b6  491a              LDR      r1,|L9.288|
0000b8  6008              STR      r0,[r1,#0]            ;2644  ; SDIO_CmdInitStructure
0000ba  2037              MOVS     r0,#0x37              ;2645
0000bc  6048              STR      r0,[r1,#4]            ;2645  ; SDIO_CmdInitStructure
0000be  2040              MOVS     r0,#0x40              ;2646
0000c0  6088              STR      r0,[r1,#8]            ;2646  ; SDIO_CmdInitStructure
0000c2  2000              MOVS     r0,#0                 ;2647
0000c4  60c8              STR      r0,[r1,#0xc]          ;2647  ; SDIO_CmdInitStructure
0000c6  f44f6080          MOV      r0,#0x400             ;2648
0000ca  6108              STR      r0,[r1,#0x10]         ;2648  ; SDIO_CmdInitStructure
0000cc  4608              MOV      r0,r1                 ;2649
0000ce  f7fffffe          BL       SDIO_SendCommand
0000d2  2037              MOVS     r0,#0x37              ;2652
0000d4  f7fffffe          BL       CmdResp1Error
0000d8  4604              MOV      r4,r0                 ;2652
0000da  2c2a              CMP      r4,#0x2a              ;2654
0000dc  d001              BEQ      |L9.226|
0000de  4620              MOV      r0,r4                 ;2656
0000e0  e79b              B        |L9.26|
                  |L9.226|
0000e2  2000              MOVS     r0,#0                 ;2660
0000e4  490e              LDR      r1,|L9.288|
0000e6  6008              STR      r0,[r1,#0]            ;2660  ; SDIO_CmdInitStructure
0000e8  2006              MOVS     r0,#6                 ;2661
0000ea  6048              STR      r0,[r1,#4]            ;2661  ; SDIO_CmdInitStructure
0000ec  2040              MOVS     r0,#0x40              ;2662
0000ee  6088              STR      r0,[r1,#8]            ;2662  ; SDIO_CmdInitStructure
0000f0  2000              MOVS     r0,#0                 ;2663
0000f2  60c8              STR      r0,[r1,#0xc]          ;2663  ; SDIO_CmdInitStructure
0000f4  f44f6080          MOV      r0,#0x400             ;2664
0000f8  6108              STR      r0,[r1,#0x10]         ;2664  ; SDIO_CmdInitStructure
0000fa  4608              MOV      r0,r1                 ;2665
0000fc  f7fffffe          BL       SDIO_SendCommand
000100  2006              MOVS     r0,#6                 ;2667
000102  f7fffffe          BL       CmdResp1Error
000106  4604              MOV      r4,r0                 ;2667
000108  2c2a              CMP      r4,#0x2a              ;2669
00010a  d002              BEQ      |L9.274|
00010c  4620              MOV      r0,r4                 ;2671
00010e  e784              B        |L9.26|
                  |L9.272|
000110  e001              B        |L9.278|
                  |L9.274|
000112  4620              MOV      r0,r4                 ;2674
000114  e781              B        |L9.26|
                  |L9.278|
000116  2425              MOVS     r4,#0x25              ;2678
000118  4620              MOV      r0,r4                 ;2679
00011a  e77e              B        |L9.26|
;;;2683   
                          ENDP

                  |L9.284|
                          DCD      ||RCA||
                  |L9.288|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_DeInit||, CODE, READONLY, ALIGN=1

                  SD_DeInit PROC
;;;210      */
;;;211    void SD_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;212    { 
;;;213      SD_LowLevel_DeInit();
000002  f7fffffe          BL       SD_LowLevel_DeInit
;;;214    }
000006  bd10              POP      {r4,pc}
;;;215    
                          ENDP


                          AREA ||i.SD_Detect||, CODE, READONLY, ALIGN=2

                  SD_Detect PROC
;;;341     */
;;;342    uint8_t SD_Detect(void)
000000  b508              PUSH     {r3,lr}
;;;343    {
;;;344      __IO uint8_t status = SD_PRESENT;
000002  2001              MOVS     r0,#1
000004  9000              STR      r0,[sp,#0]
;;;345    
;;;346      /*!< Check GPIO to detect SD */
;;;347      if (GPIO_ReadInputDataBit(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != Bit_RESET)
000006  02c1              LSLS     r1,r0,#11
000008  4804              LDR      r0,|L11.28|
00000a  f7fffffe          BL       GPIO_ReadInputDataBit
00000e  b108              CBZ      r0,|L11.20|
;;;348      {
;;;349        status = SD_NOT_PRESENT;
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
                  |L11.20|
;;;350      }
;;;351      return status;
000014  f89d0000          LDRB     r0,[sp,#0]
;;;352    }
000018  bd08              POP      {r3,pc}
;;;353    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x40011c00

                          AREA ||i.SD_EnableWideBusOperation||, CODE, READONLY, ALIGN=2

                  SD_EnableWideBusOperation PROC
;;;819      */
;;;820    SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
000000  b570              PUSH     {r4-r6,lr}
;;;821    {
000002  4604              MOV      r4,r0
;;;822      SD_Error errorstatus = SD_OK;
000004  252a              MOVS     r5,#0x2a
;;;823    
;;;824      /*!< MMC Card doesn't support this feature */
;;;825      if (SDIO_MULTIMEDIA_CARD == CardType)
000006  4822              LDR      r0,|L12.144|
000008  6800              LDR      r0,[r0,#0]  ; CardType
00000a  2803              CMP      r0,#3
00000c  d102              BNE      |L12.20|
;;;826      {
;;;827        errorstatus = SD_UNSUPPORTED_FEATURE;
00000e  2527              MOVS     r5,#0x27
;;;828        return(errorstatus);
000010  4628              MOV      r0,r5
                  |L12.18|
;;;829      }
;;;830      else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;831      {
;;;832        if (SDIO_BusWide_8b == WideMode)
;;;833        {
;;;834          errorstatus = SD_UNSUPPORTED_FEATURE;
;;;835          return(errorstatus);
;;;836        }
;;;837        else if (SDIO_BusWide_4b == WideMode)
;;;838        {
;;;839          errorstatus = SDEnWideBus(ENABLE);
;;;840    
;;;841          if (SD_OK == errorstatus)
;;;842          {
;;;843            /*!< Configure the SDIO peripheral */
;;;844            SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;845            SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;846            SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;847            SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;848            SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
;;;849            SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;850            SDIO_Init(&SDIO_InitStructure);
;;;851          }
;;;852        }
;;;853        else
;;;854        {
;;;855          errorstatus = SDEnWideBus(DISABLE);
;;;856    
;;;857          if (SD_OK == errorstatus)
;;;858          {
;;;859            /*!< Configure the SDIO peripheral */
;;;860            SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;861            SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;862            SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;863            SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;864            SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;865            SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;866            SDIO_Init(&SDIO_InitStructure);
;;;867          }
;;;868        }
;;;869      }
;;;870    
;;;871      return(errorstatus);
;;;872    }
000012  bd70              POP      {r4-r6,pc}
                  |L12.20|
000014  481e              LDR      r0,|L12.144|
000016  6800              LDR      r0,[r0,#0]            ;830  ; CardType
000018  b138              CBZ      r0,|L12.42|
00001a  481d              LDR      r0,|L12.144|
00001c  6800              LDR      r0,[r0,#0]            ;830  ; CardType
00001e  2801              CMP      r0,#1                 ;830
000020  d003              BEQ      |L12.42|
000022  481b              LDR      r0,|L12.144|
000024  6800              LDR      r0,[r0,#0]            ;830  ; CardType
000026  2802              CMP      r0,#2                 ;830
000028  d130              BNE      |L12.140|
                  |L12.42|
00002a  f5b45f80          CMP      r4,#0x1000            ;832
00002e  d102              BNE      |L12.54|
000030  2527              MOVS     r5,#0x27              ;834
000032  4628              MOV      r0,r5                 ;835
000034  e7ed              B        |L12.18|
                  |L12.54|
000036  f5b46f00          CMP      r4,#0x800             ;837
00003a  d115              BNE      |L12.104|
00003c  2001              MOVS     r0,#1                 ;839
00003e  f7fffffe          BL       SDEnWideBus
000042  4605              MOV      r5,r0                 ;839
000044  2d2a              CMP      r5,#0x2a              ;841
000046  d121              BNE      |L12.140|
000048  2001              MOVS     r0,#1                 ;844
00004a  4912              LDR      r1,|L12.148|
00004c  7508              STRB     r0,[r1,#0x14]         ;844
00004e  2000              MOVS     r0,#0                 ;845
000050  6008              STR      r0,[r1,#0]            ;845  ; SDIO_InitStructure
000052  6048              STR      r0,[r1,#4]            ;846  ; SDIO_InitStructure
000054  6088              STR      r0,[r1,#8]            ;847  ; SDIO_InitStructure
000056  f44f6000          MOV      r0,#0x800             ;848
00005a  60c8              STR      r0,[r1,#0xc]          ;848  ; SDIO_InitStructure
00005c  2000              MOVS     r0,#0                 ;849
00005e  6108              STR      r0,[r1,#0x10]         ;849  ; SDIO_InitStructure
000060  4608              MOV      r0,r1                 ;850
000062  f7fffffe          BL       SDIO_Init
000066  e011              B        |L12.140|
                  |L12.104|
000068  2000              MOVS     r0,#0                 ;855
00006a  f7fffffe          BL       SDEnWideBus
00006e  4605              MOV      r5,r0                 ;855
000070  2d2a              CMP      r5,#0x2a              ;857
000072  d10b              BNE      |L12.140|
000074  2001              MOVS     r0,#1                 ;860
000076  4907              LDR      r1,|L12.148|
000078  7508              STRB     r0,[r1,#0x14]         ;860
00007a  2000              MOVS     r0,#0                 ;861
00007c  6008              STR      r0,[r1,#0]            ;861  ; SDIO_InitStructure
00007e  6048              STR      r0,[r1,#4]            ;862  ; SDIO_InitStructure
000080  6088              STR      r0,[r1,#8]            ;863  ; SDIO_InitStructure
000082  60c8              STR      r0,[r1,#0xc]          ;864  ; SDIO_InitStructure
000084  6108              STR      r0,[r1,#0x10]         ;865  ; SDIO_InitStructure
000086  4608              MOV      r0,r1                 ;866
000088  f7fffffe          BL       SDIO_Init
                  |L12.140|
00008c  4628              MOV      r0,r5                 ;871
00008e  e7c0              B        |L12.18|
;;;873    
                          ENDP

                  |L12.144|
                          DCD      CardType
                  |L12.148|
                          DCD      SDIO_InitStructure

                          AREA ||i.SD_Erase||, CODE, READONLY, ALIGN=2

                  SD_Erase PROC
;;;1842     */
;;;1843   SD_Error SD_Erase(uint32_t startaddr, uint32_t endaddr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;1844   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1845     SD_Error errorstatus = SD_OK;
000008  242a              MOVS     r4,#0x2a
;;;1846     uint32_t delay = 0;
00000a  2700              MOVS     r7,#0
;;;1847     __IO uint32_t maxdelay = 0;
00000c  2000              MOVS     r0,#0
00000e  9001              STR      r0,[sp,#4]
;;;1848     uint8_t cardstate = 0;
000010  9000              STR      r0,[sp,#0]
;;;1849   
;;;1850     /*!< Check if the card coomnd class supports erase command */
;;;1851     if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
000012  4846              LDR      r0,|L13.300|
000014  6840              LDR      r0,[r0,#4]  ; CSD_Tab
000016  2120              MOVS     r1,#0x20
000018  ea015010          AND      r0,r1,r0,LSR #20
00001c  b918              CBNZ     r0,|L13.38|
;;;1852     {
;;;1853       errorstatus = SD_REQUEST_NOT_APPLICABLE;
00001e  2425              MOVS     r4,#0x25
;;;1854       return(errorstatus);
000020  4620              MOV      r0,r4
                  |L13.34|
;;;1855     }
;;;1856   
;;;1857     maxdelay = 120000 / ((SDIO->CLKCR & 0xFF) + 2);
;;;1858   
;;;1859     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1860     {
;;;1861       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1862       return(errorstatus);
;;;1863     }
;;;1864   
;;;1865     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1866     {
;;;1867       startaddr /= 512;
;;;1868       endaddr /= 512;
;;;1869     }
;;;1870     
;;;1871     /*!< According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
;;;1872     if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1873     {
;;;1874       /*!< Send CMD32 SD_ERASE_GRP_START with argument as addr  */
;;;1875       SDIO_CmdInitStructure.SDIO_Argument = startaddr;
;;;1876       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_START;
;;;1877       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1878       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1879       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1880       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1881   
;;;1882       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_START);
;;;1883       if (errorstatus != SD_OK)
;;;1884       {
;;;1885         return(errorstatus);
;;;1886       }
;;;1887   
;;;1888       /*!< Send CMD33 SD_ERASE_GRP_END with argument as addr  */
;;;1889       SDIO_CmdInitStructure.SDIO_Argument = endaddr;
;;;1890       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_END;
;;;1891       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1892       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1893       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1894       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1895   
;;;1896       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_END);
;;;1897       if (errorstatus != SD_OK)
;;;1898       {
;;;1899         return(errorstatus);
;;;1900       }
;;;1901     }
;;;1902   
;;;1903     /*!< Send CMD38 ERASE */
;;;1904     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;1905     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ERASE;
;;;1906     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1907     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1908     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1909     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1910   
;;;1911     errorstatus = CmdResp1Error(SD_CMD_ERASE);
;;;1912   
;;;1913     if (errorstatus != SD_OK)
;;;1914     {
;;;1915       return(errorstatus);
;;;1916     }
;;;1917   
;;;1918     for (delay = 0; delay < maxdelay; delay++)
;;;1919     {}
;;;1920   
;;;1921     /*!< Wait till the card is in programming state */
;;;1922     errorstatus = IsCardProgramming(&cardstate);
;;;1923   
;;;1924     while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate)))
;;;1925     {
;;;1926       errorstatus = IsCardProgramming(&cardstate);
;;;1927     }
;;;1928   
;;;1929     return(errorstatus);
;;;1930   }
000022  e8bd81fc          POP      {r2-r8,pc}
                  |L13.38|
000026  4842              LDR      r0,|L13.304|
000028  6840              LDR      r0,[r0,#4]            ;1857
00002a  b2c0              UXTB     r0,r0                 ;1857
00002c  1c80              ADDS     r0,r0,#2              ;1857
00002e  4941              LDR      r1,|L13.308|
000030  fbb1f0f0          UDIV     r0,r1,r0              ;1857
000034  9001              STR      r0,[sp,#4]            ;1857
000036  2000              MOVS     r0,#0                 ;1859
000038  f7fffffe          BL       SDIO_GetResponse
00003c  f0007000          AND      r0,r0,#0x2000000      ;1859
000040  b110              CBZ      r0,|L13.72|
000042  240e              MOVS     r4,#0xe               ;1861
000044  4620              MOV      r0,r4                 ;1862
000046  e7ec              B        |L13.34|
                  |L13.72|
000048  483b              LDR      r0,|L13.312|
00004a  6800              LDR      r0,[r0,#0]            ;1865  ; CardType
00004c  2802              CMP      r0,#2                 ;1865
00004e  d101              BNE      |L13.84|
000050  0a6d              LSRS     r5,r5,#9              ;1867
000052  0a76              LSRS     r6,r6,#9              ;1868
                  |L13.84|
000054  4838              LDR      r0,|L13.312|
000056  6800              LDR      r0,[r0,#0]            ;1872  ; CardType
000058  b138              CBZ      r0,|L13.106|
00005a  4837              LDR      r0,|L13.312|
00005c  6800              LDR      r0,[r0,#0]            ;1872  ; CardType
00005e  2801              CMP      r0,#1                 ;1872
000060  d003              BEQ      |L13.106|
000062  4835              LDR      r0,|L13.312|
000064  6800              LDR      r0,[r0,#0]            ;1872  ; CardType
000066  2802              CMP      r0,#2                 ;1872
000068  d12d              BNE      |L13.198|
                  |L13.106|
00006a  4834              LDR      r0,|L13.316|
00006c  6005              STR      r5,[r0,#0]            ;1875  ; SDIO_CmdInitStructure
00006e  2020              MOVS     r0,#0x20              ;1876
000070  4932              LDR      r1,|L13.316|
000072  6048              STR      r0,[r1,#4]            ;1876  ; SDIO_CmdInitStructure
000074  2040              MOVS     r0,#0x40              ;1877
000076  6088              STR      r0,[r1,#8]            ;1877  ; SDIO_CmdInitStructure
000078  2000              MOVS     r0,#0                 ;1878
00007a  60c8              STR      r0,[r1,#0xc]          ;1878  ; SDIO_CmdInitStructure
00007c  f44f6080          MOV      r0,#0x400             ;1879
000080  6108              STR      r0,[r1,#0x10]         ;1879  ; SDIO_CmdInitStructure
000082  4608              MOV      r0,r1                 ;1880
000084  f7fffffe          BL       SDIO_SendCommand
000088  2020              MOVS     r0,#0x20              ;1882
00008a  f7fffffe          BL       CmdResp1Error
00008e  4604              MOV      r4,r0                 ;1882
000090  2c2a              CMP      r4,#0x2a              ;1883
000092  d001              BEQ      |L13.152|
000094  4620              MOV      r0,r4                 ;1885
000096  e7c4              B        |L13.34|
                  |L13.152|
000098  4828              LDR      r0,|L13.316|
00009a  6006              STR      r6,[r0,#0]            ;1889  ; SDIO_CmdInitStructure
00009c  2021              MOVS     r0,#0x21              ;1890
00009e  4927              LDR      r1,|L13.316|
0000a0  6048              STR      r0,[r1,#4]            ;1890  ; SDIO_CmdInitStructure
0000a2  2040              MOVS     r0,#0x40              ;1891
0000a4  6088              STR      r0,[r1,#8]            ;1891  ; SDIO_CmdInitStructure
0000a6  2000              MOVS     r0,#0                 ;1892
0000a8  60c8              STR      r0,[r1,#0xc]          ;1892  ; SDIO_CmdInitStructure
0000aa  f44f6080          MOV      r0,#0x400             ;1893
0000ae  6108              STR      r0,[r1,#0x10]         ;1893  ; SDIO_CmdInitStructure
0000b0  4608              MOV      r0,r1                 ;1894
0000b2  f7fffffe          BL       SDIO_SendCommand
0000b6  2021              MOVS     r0,#0x21              ;1896
0000b8  f7fffffe          BL       CmdResp1Error
0000bc  4604              MOV      r4,r0                 ;1896
0000be  2c2a              CMP      r4,#0x2a              ;1897
0000c0  d001              BEQ      |L13.198|
0000c2  4620              MOV      r0,r4                 ;1899
0000c4  e7ad              B        |L13.34|
                  |L13.198|
0000c6  2000              MOVS     r0,#0                 ;1904
0000c8  491c              LDR      r1,|L13.316|
0000ca  6008              STR      r0,[r1,#0]            ;1904  ; SDIO_CmdInitStructure
0000cc  2026              MOVS     r0,#0x26              ;1905
0000ce  6048              STR      r0,[r1,#4]            ;1905  ; SDIO_CmdInitStructure
0000d0  2040              MOVS     r0,#0x40              ;1906
0000d2  6088              STR      r0,[r1,#8]            ;1906  ; SDIO_CmdInitStructure
0000d4  2000              MOVS     r0,#0                 ;1907
0000d6  60c8              STR      r0,[r1,#0xc]          ;1907  ; SDIO_CmdInitStructure
0000d8  f44f6080          MOV      r0,#0x400             ;1908
0000dc  6108              STR      r0,[r1,#0x10]         ;1908  ; SDIO_CmdInitStructure
0000de  4608              MOV      r0,r1                 ;1909
0000e0  f7fffffe          BL       SDIO_SendCommand
0000e4  2026              MOVS     r0,#0x26              ;1911
0000e6  f7fffffe          BL       CmdResp1Error
0000ea  4604              MOV      r4,r0                 ;1911
0000ec  2c2a              CMP      r4,#0x2a              ;1913
0000ee  d001              BEQ      |L13.244|
0000f0  4620              MOV      r0,r4                 ;1915
0000f2  e796              B        |L13.34|
                  |L13.244|
0000f4  2700              MOVS     r7,#0                 ;1918
0000f6  e000              B        |L13.250|
                  |L13.248|
0000f8  1c7f              ADDS     r7,r7,#1              ;1918
                  |L13.250|
0000fa  9801              LDR      r0,[sp,#4]            ;1918
0000fc  4287              CMP      r7,r0                 ;1918
0000fe  d3fb              BCC      |L13.248|
000100  4668              MOV      r0,sp                 ;1922
000102  f7fffffe          BL       IsCardProgramming
000106  4604              MOV      r4,r0                 ;1922
000108  e003              B        |L13.274|
                  |L13.266|
00010a  4668              MOV      r0,sp                 ;1926
00010c  f7fffffe          BL       IsCardProgramming
000110  4604              MOV      r4,r0                 ;1926
                  |L13.274|
000112  2c2a              CMP      r4,#0x2a              ;1924
000114  d107              BNE      |L13.294|
000116  f89d0000          LDRB     r0,[sp,#0]            ;1924
00011a  2807              CMP      r0,#7                 ;1924
00011c  d0f5              BEQ      |L13.266|
00011e  f89d0000          LDRB     r0,[sp,#0]            ;1924
000122  2806              CMP      r0,#6                 ;1924
000124  d0f1              BEQ      |L13.266|
                  |L13.294|
000126  4620              MOV      r0,r4                 ;1929
000128  e77b              B        |L13.34|
;;;1931   
                          ENDP

00012a  0000              DCW      0x0000
                  |L13.300|
                          DCD      CSD_Tab
                  |L13.304|
                          DCD      0x40018000
                  |L13.308|
                          DCD      0x0001d4c0
                  |L13.312|
                          DCD      CardType
                  |L13.316|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_GetCardInfo||, CODE, READONLY, ALIGN=2

                  SD_GetCardInfo PROC
;;;607      */
;;;608    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
000000  b530              PUSH     {r4,r5,lr}
;;;609    {
000002  4601              MOV      r1,r0
;;;610      SD_Error errorstatus = SD_OK;
000004  202a              MOVS     r0,#0x2a
;;;611      uint8_t tmp = 0;
000006  2200              MOVS     r2,#0
;;;612    
;;;613      cardinfo->CardType = (uint8_t)CardType;
000008  4bac              LDR      r3,|L14.700|
00000a  781b              LDRB     r3,[r3,#0]  ; CardType
00000c  f881304e          STRB     r3,[r1,#0x4e]
;;;614      cardinfo->RCA = (uint16_t)RCA;
000010  4bab              LDR      r3,|L14.704|
000012  881b              LDRH     r3,[r3,#0]  ; RCA
000014  f8a1304c          STRH     r3,[r1,#0x4c]
;;;615    
;;;616      /*!< Byte 0 */
;;;617      tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
000018  4baa              LDR      r3,|L14.708|
00001a  681b              LDR      r3,[r3,#0]  ; CSD_Tab
00001c  0e1a              LSRS     r2,r3,#24
;;;618      cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
00001e  0993              LSRS     r3,r2,#6
000020  700b              STRB     r3,[r1,#0]
;;;619      cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
000022  f3c20383          UBFX     r3,r2,#2,#4
000026  704b              STRB     r3,[r1,#1]
;;;620      cardinfo->SD_csd.Reserved1 = tmp & 0x03;
000028  f0020303          AND      r3,r2,#3
00002c  708b              STRB     r3,[r1,#2]
;;;621    
;;;622      /*!< Byte 1 */
;;;623      tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
00002e  4ba5              LDR      r3,|L14.708|
000030  681b              LDR      r3,[r3,#0]  ; CSD_Tab
000032  f3c34207          UBFX     r2,r3,#16,#8
;;;624      cardinfo->SD_csd.TAAC = tmp;
000036  70ca              STRB     r2,[r1,#3]
;;;625    
;;;626      /*!< Byte 2 */
;;;627      tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
000038  4ba2              LDR      r3,|L14.708|
00003a  881b              LDRH     r3,[r3,#0]  ; CSD_Tab
00003c  f3c32207          UBFX     r2,r3,#8,#8
;;;628      cardinfo->SD_csd.NSAC = tmp;
000040  710a              STRB     r2,[r1,#4]
;;;629    
;;;630      /*!< Byte 3 */
;;;631      tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
000042  4ba0              LDR      r3,|L14.708|
000044  781a              LDRB     r2,[r3,#0]  ; CSD_Tab
;;;632      cardinfo->SD_csd.MaxBusClkFrec = tmp;
000046  714a              STRB     r2,[r1,#5]
;;;633    
;;;634      /*!< Byte 4 */
;;;635      tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
000048  685b              LDR      r3,[r3,#4]  ; CSD_Tab
00004a  0e1a              LSRS     r2,r3,#24
;;;636      cardinfo->SD_csd.CardComdClasses = tmp << 4;
00004c  0113              LSLS     r3,r2,#4
00004e  80cb              STRH     r3,[r1,#6]
;;;637    
;;;638      /*!< Byte 5 */
;;;639      tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
000050  4b9c              LDR      r3,|L14.708|
000052  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000054  f3c34207          UBFX     r2,r3,#16,#8
;;;640      cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
000058  88cb              LDRH     r3,[r1,#6]
00005a  ea431312          ORR      r3,r3,r2,LSR #4
00005e  80cb              STRH     r3,[r1,#6]
;;;641      cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
000060  f002030f          AND      r3,r2,#0xf
000064  720b              STRB     r3,[r1,#8]
;;;642    
;;;643      /*!< Byte 6 */
;;;644      tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
000066  4b97              LDR      r3,|L14.708|
000068  889b              LDRH     r3,[r3,#4]  ; CSD_Tab
00006a  f3c32207          UBFX     r2,r3,#8,#8
;;;645      cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
00006e  09d3              LSRS     r3,r2,#7
000070  724b              STRB     r3,[r1,#9]
;;;646      cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
000072  f3c21380          UBFX     r3,r2,#6,#1
000076  728b              STRB     r3,[r1,#0xa]
;;;647      cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
000078  f3c21340          UBFX     r3,r2,#5,#1
00007c  72cb              STRB     r3,[r1,#0xb]
;;;648      cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
00007e  f3c21300          UBFX     r3,r2,#4,#1
000082  730b              STRB     r3,[r1,#0xc]
;;;649      cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
000084  2300              MOVS     r3,#0
000086  734b              STRB     r3,[r1,#0xd]
;;;650    
;;;651      if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
000088  4b8c              LDR      r3,|L14.700|
00008a  681b              LDR      r3,[r3,#0]  ; CardType
00008c  b11b              CBZ      r3,|L14.150|
00008e  4b8b              LDR      r3,|L14.700|
000090  681b              LDR      r3,[r3,#0]  ; CardType
000092  2b01              CMP      r3,#1
000094  d13c              BNE      |L14.272|
                  |L14.150|
;;;652      {
;;;653        cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
000096  0793              LSLS     r3,r2,#30
000098  0d1b              LSRS     r3,r3,#20
00009a  610b              STR      r3,[r1,#0x10]
;;;654    
;;;655        /*!< Byte 7 */
;;;656        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
00009c  4b89              LDR      r3,|L14.708|
00009e  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;657        cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
0000a0  690b              LDR      r3,[r1,#0x10]
0000a2  ea430382          ORR      r3,r3,r2,LSL #2
0000a6  610b              STR      r3,[r1,#0x10]
;;;658    
;;;659        /*!< Byte 8 */
;;;660        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
0000a8  4b86              LDR      r3,|L14.708|
0000aa  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000ac  0e1a              LSRS     r2,r3,#24
;;;661        cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
0000ae  690b              LDR      r3,[r1,#0x10]
0000b0  ea431392          ORR      r3,r3,r2,LSR #6
0000b4  610b              STR      r3,[r1,#0x10]
;;;662    
;;;663        cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
0000b6  f3c203c2          UBFX     r3,r2,#3,#3
0000ba  750b              STRB     r3,[r1,#0x14]
;;;664        cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
0000bc  f0020307          AND      r3,r2,#7
0000c0  754b              STRB     r3,[r1,#0x15]
;;;665    
;;;666        /*!< Byte 9 */
;;;667        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
0000c2  4b80              LDR      r3,|L14.708|
0000c4  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000c6  f3c34207          UBFX     r2,r3,#16,#8
;;;668        cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
0000ca  0953              LSRS     r3,r2,#5
0000cc  758b              STRB     r3,[r1,#0x16]
;;;669        cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
0000ce  f3c20382          UBFX     r3,r2,#2,#3
0000d2  75cb              STRB     r3,[r1,#0x17]
;;;670        cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
0000d4  0793              LSLS     r3,r2,#30
0000d6  0f5b              LSRS     r3,r3,#29
0000d8  760b              STRB     r3,[r1,#0x18]
;;;671        /*!< Byte 10 */
;;;672        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
0000da  4b7a              LDR      r3,|L14.708|
0000dc  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
0000de  f3c32207          UBFX     r2,r3,#8,#8
;;;673        cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
0000e2  7e0b              LDRB     r3,[r1,#0x18]
0000e4  ea4313d2          ORR      r3,r3,r2,LSR #7
0000e8  760b              STRB     r3,[r1,#0x18]
;;;674        
;;;675        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
0000ea  690b              LDR      r3,[r1,#0x10]
0000ec  1c5b              ADDS     r3,r3,#1
0000ee  644b              STR      r3,[r1,#0x44]
;;;676        cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
0000f0  7e0c              LDRB     r4,[r1,#0x18]
0000f2  6c4b              LDR      r3,[r1,#0x44]
0000f4  1ca4              ADDS     r4,r4,#2
0000f6  2501              MOVS     r5,#1
0000f8  40a5              LSLS     r5,r5,r4
0000fa  436b              MULS     r3,r5,r3
0000fc  644b              STR      r3,[r1,#0x44]
;;;677        cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
0000fe  7a0c              LDRB     r4,[r1,#8]
000100  2301              MOVS     r3,#1
000102  40a3              LSLS     r3,r3,r4
000104  648b              STR      r3,[r1,#0x48]
;;;678        cardinfo->CardCapacity *= cardinfo->CardBlockSize;
000106  e9d13411          LDRD     r3,r4,[r1,#0x44]
00010a  4363              MULS     r3,r4,r3
00010c  644b              STR      r3,[r1,#0x44]
00010e  e021              B        |L14.340|
                  |L14.272|
;;;679      }
;;;680      else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000110  4b6a              LDR      r3,|L14.700|
000112  681b              LDR      r3,[r3,#0]  ; CardType
000114  2b02              CMP      r3,#2
000116  d11d              BNE      |L14.340|
;;;681      {
;;;682        /*!< Byte 7 */
;;;683        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
000118  4b6a              LDR      r3,|L14.708|
00011a  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;684        cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
00011c  0693              LSLS     r3,r2,#26
00011e  0a9b              LSRS     r3,r3,#10
000120  610b              STR      r3,[r1,#0x10]
;;;685    
;;;686        /*!< Byte 8 */
;;;687        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
000122  4b68              LDR      r3,|L14.708|
000124  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000126  0e1a              LSRS     r2,r3,#24
;;;688    
;;;689        cardinfo->SD_csd.DeviceSize |= (tmp << 8);
000128  690b              LDR      r3,[r1,#0x10]
00012a  ea432302          ORR      r3,r3,r2,LSL #8
00012e  610b              STR      r3,[r1,#0x10]
;;;690    
;;;691        /*!< Byte 9 */
;;;692        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
000130  4b64              LDR      r3,|L14.708|
000132  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000134  f3c34207          UBFX     r2,r3,#16,#8
;;;693    
;;;694        cardinfo->SD_csd.DeviceSize |= (tmp);
000138  690b              LDR      r3,[r1,#0x10]
00013a  4313              ORRS     r3,r3,r2
00013c  610b              STR      r3,[r1,#0x10]
;;;695    
;;;696        /*!< Byte 10 */
;;;697        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
00013e  4b61              LDR      r3,|L14.708|
000140  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
000142  f3c32207          UBFX     r2,r3,#8,#8
;;;698        
;;;699        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
000146  690b              LDR      r3,[r1,#0x10]
000148  1c5b              ADDS     r3,r3,#1
00014a  04db              LSLS     r3,r3,#19
00014c  644b              STR      r3,[r1,#0x44]
;;;700        cardinfo->CardBlockSize = 512;    
00014e  f44f7300          MOV      r3,#0x200
000152  648b              STR      r3,[r1,#0x48]
                  |L14.340|
;;;701      }
;;;702    
;;;703    
;;;704      cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
000154  f3c21380          UBFX     r3,r2,#6,#1
000158  f8013f19          STRB     r3,[r1,#0x19]!
;;;705      cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
00015c  0693              LSLS     r3,r2,#26
00015e  0e5b              LSRS     r3,r3,#25
000160  704b              STRB     r3,[r1,#1]
;;;706    
;;;707      /*!< Byte 11 */
;;;708      tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
000162  4b58              LDR      r3,|L14.708|
000164  7a1a              LDRB     r2,[r3,#8]  ; CSD_Tab
;;;709      cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
000166  784b              LDRB     r3,[r1,#1]
000168  ea4313d2          ORR      r3,r3,r2,LSR #7
00016c  704b              STRB     r3,[r1,#1]
;;;710      cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
00016e  f002037f          AND      r3,r2,#0x7f
000172  708b              STRB     r3,[r1,#2]
;;;711    
;;;712      /*!< Byte 12 */
;;;713      tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
000174  4b53              LDR      r3,|L14.708|
000176  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
000178  0e1a              LSRS     r2,r3,#24
;;;714      cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
00017a  09d3              LSRS     r3,r2,#7
00017c  70cb              STRB     r3,[r1,#3]
;;;715      cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
00017e  f3c21341          UBFX     r3,r2,#5,#2
000182  710b              STRB     r3,[r1,#4]
;;;716      cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
000184  f3c20382          UBFX     r3,r2,#2,#3
000188  714b              STRB     r3,[r1,#5]
;;;717      cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
00018a  0793              LSLS     r3,r2,#30
00018c  0f1b              LSRS     r3,r3,#28
00018e  718b              STRB     r3,[r1,#6]
;;;718    
;;;719      /*!< Byte 13 */
;;;720      tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
000190  4b4c              LDR      r3,|L14.708|
000192  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
000194  f3c34207          UBFX     r2,r3,#16,#8
;;;721      cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
000198  798b              LDRB     r3,[r1,#6]
00019a  ea431392          ORR      r3,r3,r2,LSR #6
00019e  718b              STRB     r3,[r1,#6]
;;;722      cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
0001a0  f3c21340          UBFX     r3,r2,#5,#1
0001a4  71cb              STRB     r3,[r1,#7]
;;;723      cardinfo->SD_csd.Reserved3 = 0;
0001a6  2300              MOVS     r3,#0
0001a8  720b              STRB     r3,[r1,#8]
;;;724      cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
0001aa  f0020301          AND      r3,r2,#1
0001ae  724b              STRB     r3,[r1,#9]
;;;725    
;;;726      /*!< Byte 14 */
;;;727      tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
0001b0  4b44              LDR      r3,|L14.708|
0001b2  899b              LDRH     r3,[r3,#0xc]  ; CSD_Tab
0001b4  f3c32207          UBFX     r2,r3,#8,#8
;;;728      cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
0001b8  09d3              LSRS     r3,r2,#7
0001ba  728b              STRB     r3,[r1,#0xa]
;;;729      cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
0001bc  f3c21380          UBFX     r3,r2,#6,#1
0001c0  72cb              STRB     r3,[r1,#0xb]
;;;730      cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
0001c2  f3c21340          UBFX     r3,r2,#5,#1
0001c6  730b              STRB     r3,[r1,#0xc]
;;;731      cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
0001c8  f3c21300          UBFX     r3,r2,#4,#1
0001cc  734b              STRB     r3,[r1,#0xd]
;;;732      cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
0001ce  f3c20381          UBFX     r3,r2,#2,#2
0001d2  738b              STRB     r3,[r1,#0xe]
;;;733      cardinfo->SD_csd.ECC = (tmp & 0x03);
0001d4  f0020303          AND      r3,r2,#3
0001d8  73cb              STRB     r3,[r1,#0xf]
;;;734    
;;;735      /*!< Byte 15 */
;;;736      tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
0001da  4b3a              LDR      r3,|L14.708|
0001dc  7b1a              LDRB     r2,[r3,#0xc]  ; CSD_Tab
;;;737      cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
0001de  0853              LSRS     r3,r2,#1
0001e0  740b              STRB     r3,[r1,#0x10]
;;;738      cardinfo->SD_csd.Reserved4 = 1;
0001e2  2301              MOVS     r3,#1
0001e4  744b              STRB     r3,[r1,#0x11]
;;;739    
;;;740    
;;;741      /*!< Byte 0 */
;;;742      tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
0001e6  4b38              LDR      r3,|L14.712|
0001e8  681b              LDR      r3,[r3,#0]  ; CID_Tab
0001ea  0e1a              LSRS     r2,r3,#24
;;;743      cardinfo->SD_cid.ManufacturerID = tmp;
0001ec  74ca              STRB     r2,[r1,#0x13]
0001ee  3919              SUBS     r1,r1,#0x19
;;;744    
;;;745      /*!< Byte 1 */
;;;746      tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
0001f0  4b35              LDR      r3,|L14.712|
0001f2  681b              LDR      r3,[r3,#0]  ; CID_Tab
0001f4  f3c34207          UBFX     r2,r3,#16,#8
;;;747      cardinfo->SD_cid.OEM_AppliID = tmp << 8;
0001f8  0214              LSLS     r4,r2,#8
0001fa  85cc              STRH     r4,[r1,#0x2e]
;;;748    
;;;749      /*!< Byte 2 */
;;;750      tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
0001fc  4b32              LDR      r3,|L14.712|
0001fe  881b              LDRH     r3,[r3,#0]  ; CID_Tab
000200  f3c32207          UBFX     r2,r3,#8,#8
;;;751      cardinfo->SD_cid.OEM_AppliID |= tmp;
000204  8dcb              LDRH     r3,[r1,#0x2e]
000206  4313              ORRS     r3,r3,r2
000208  85cb              STRH     r3,[r1,#0x2e]
;;;752    
;;;753      /*!< Byte 3 */
;;;754      tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
00020a  4b2f              LDR      r3,|L14.712|
00020c  781a              LDRB     r2,[r3,#0]  ; CID_Tab
;;;755      cardinfo->SD_cid.ProdName1 = tmp << 24;
00020e  0614              LSLS     r4,r2,#24
000210  630c              STR      r4,[r1,#0x30]
;;;756    
;;;757      /*!< Byte 4 */
;;;758      tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
000212  685b              LDR      r3,[r3,#4]  ; CID_Tab
000214  0e1a              LSRS     r2,r3,#24
;;;759      cardinfo->SD_cid.ProdName1 |= tmp << 16;
000216  6b0b              LDR      r3,[r1,#0x30]
000218  ea434402          ORR      r4,r3,r2,LSL #16
00021c  630c              STR      r4,[r1,#0x30]
;;;760    
;;;761      /*!< Byte 5 */
;;;762      tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
00021e  4b2a              LDR      r3,|L14.712|
000220  685b              LDR      r3,[r3,#4]  ; CID_Tab
000222  f3c34207          UBFX     r2,r3,#16,#8
;;;763      cardinfo->SD_cid.ProdName1 |= tmp << 8;
000226  6b0b              LDR      r3,[r1,#0x30]
000228  ea432402          ORR      r4,r3,r2,LSL #8
00022c  630c              STR      r4,[r1,#0x30]
;;;764    
;;;765      /*!< Byte 6 */
;;;766      tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
00022e  4b26              LDR      r3,|L14.712|
000230  889b              LDRH     r3,[r3,#4]  ; CID_Tab
000232  f3c32207          UBFX     r2,r3,#8,#8
;;;767      cardinfo->SD_cid.ProdName1 |= tmp;
000236  6b0b              LDR      r3,[r1,#0x30]
000238  4313              ORRS     r3,r3,r2
00023a  630b              STR      r3,[r1,#0x30]
;;;768    
;;;769      /*!< Byte 7 */
;;;770      tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
00023c  4b22              LDR      r3,|L14.712|
00023e  791a              LDRB     r2,[r3,#4]  ; CID_Tab
;;;771      cardinfo->SD_cid.ProdName2 = tmp;
000240  2334              MOVS     r3,#0x34
000242  545a              STRB     r2,[r3,r1]
;;;772    
;;;773      /*!< Byte 8 */
;;;774      tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
000244  4b20              LDR      r3,|L14.712|
000246  689b              LDR      r3,[r3,#8]  ; CID_Tab
000248  0e1a              LSRS     r2,r3,#24
;;;775      cardinfo->SD_cid.ProdRev = tmp;
00024a  2335              MOVS     r3,#0x35
00024c  545a              STRB     r2,[r3,r1]
;;;776    
;;;777      /*!< Byte 9 */
;;;778      tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
00024e  4b1e              LDR      r3,|L14.712|
000250  689b              LDR      r3,[r3,#8]  ; CID_Tab
000252  f3c34207          UBFX     r2,r3,#16,#8
;;;779      cardinfo->SD_cid.ProdSN = tmp << 24;
000256  0614              LSLS     r4,r2,#24
000258  638c              STR      r4,[r1,#0x38]
;;;780    
;;;781      /*!< Byte 10 */
;;;782      tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
00025a  4b1b              LDR      r3,|L14.712|
00025c  891b              LDRH     r3,[r3,#8]  ; CID_Tab
00025e  f3c32207          UBFX     r2,r3,#8,#8
;;;783      cardinfo->SD_cid.ProdSN |= tmp << 16;
000262  6b8b              LDR      r3,[r1,#0x38]
000264  ea434402          ORR      r4,r3,r2,LSL #16
000268  638c              STR      r4,[r1,#0x38]
;;;784    
;;;785      /*!< Byte 11 */
;;;786      tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
00026a  4b17              LDR      r3,|L14.712|
00026c  7a1a              LDRB     r2,[r3,#8]  ; CID_Tab
;;;787      cardinfo->SD_cid.ProdSN |= tmp << 8;
00026e  6b8b              LDR      r3,[r1,#0x38]
000270  ea432402          ORR      r4,r3,r2,LSL #8
000274  638c              STR      r4,[r1,#0x38]
;;;788    
;;;789      /*!< Byte 12 */
;;;790      tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
000276  4b14              LDR      r3,|L14.712|
000278  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
00027a  0e1a              LSRS     r2,r3,#24
;;;791      cardinfo->SD_cid.ProdSN |= tmp;
00027c  6b8b              LDR      r3,[r1,#0x38]
00027e  4313              ORRS     r3,r3,r2
000280  638b              STR      r3,[r1,#0x38]
;;;792    
;;;793      /*!< Byte 13 */
;;;794      tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
000282  4b11              LDR      r3,|L14.712|
000284  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
000286  f3c34207          UBFX     r2,r3,#16,#8
;;;795      cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
00028a  233c              MOVS     r3,#0x3c
00028c  5c5b              LDRB     r3,[r3,r1]
00028e  ea431412          ORR      r4,r3,r2,LSR #4
000292  233c              MOVS     r3,#0x3c
000294  545c              STRB     r4,[r3,r1]
;;;796      cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
000296  0713              LSLS     r3,r2,#28
000298  0d1c              LSRS     r4,r3,#20
00029a  87cc              STRH     r4,[r1,#0x3e]
;;;797    
;;;798      /*!< Byte 14 */
;;;799      tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
00029c  4b0a              LDR      r3,|L14.712|
00029e  899b              LDRH     r3,[r3,#0xc]  ; CID_Tab
0002a0  f3c32207          UBFX     r2,r3,#8,#8
;;;800      cardinfo->SD_cid.ManufactDate |= tmp;
0002a4  8fcb              LDRH     r3,[r1,#0x3e]
0002a6  4313              ORRS     r3,r3,r2
0002a8  87cb              STRH     r3,[r1,#0x3e]
;;;801    
;;;802      /*!< Byte 15 */
;;;803      tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
0002aa  4b07              LDR      r3,|L14.712|
0002ac  7b1a              LDRB     r2,[r3,#0xc]  ; CID_Tab
;;;804      cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
0002ae  0854              LSRS     r4,r2,#1
0002b0  2340              MOVS     r3,#0x40
0002b2  545c              STRB     r4,[r3,r1]
;;;805      cardinfo->SD_cid.Reserved2 = 1;
0002b4  2401              MOVS     r4,#1
0002b6  2341              MOVS     r3,#0x41
0002b8  545c              STRB     r4,[r3,r1]
;;;806      
;;;807      return(errorstatus);
;;;808    }
0002ba  bd30              POP      {r4,r5,pc}
;;;809    
                          ENDP

                  |L14.700|
                          DCD      CardType
                  |L14.704|
                          DCD      ||RCA||
                  |L14.708|
                          DCD      CSD_Tab
                  |L14.712|
                          DCD      CID_Tab

                          AREA ||i.SD_GetState||, CODE, READONLY, ALIGN=1

                  SD_GetState PROC
;;;315      */
;;;316    SDCardState SD_GetState(void)
000000  b508              PUSH     {r3,lr}
;;;317    {
;;;318      uint32_t resp1 = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;319      
;;;320      if(SD_Detect()== SD_PRESENT)
000006  f7fffffe          BL       SD_Detect
00000a  2801              CMP      r0,#1
00000c  d10a              BNE      |L15.36|
;;;321      {
;;;322        if (SD_SendStatus(&resp1) != SD_OK)
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       SD_SendStatus
000014  282a              CMP      r0,#0x2a
000016  d001              BEQ      |L15.28|
;;;323        {
;;;324          return SD_CARD_ERROR;
000018  20ff              MOVS     r0,#0xff
                  |L15.26|
;;;325        }
;;;326        else
;;;327        {
;;;328          return (SDCardState)((resp1 >> 9) & 0x0F);
;;;329        }
;;;330      }
;;;331      else
;;;332      {
;;;333        return SD_CARD_ERROR;
;;;334      }
;;;335    }
00001a  bd08              POP      {r3,pc}
                  |L15.28|
00001c  9800              LDR      r0,[sp,#0]            ;328
00001e  f3c02043          UBFX     r0,r0,#9,#4           ;328
000022  e7fa              B        |L15.26|
                  |L15.36|
000024  20ff              MOVS     r0,#0xff              ;333
000026  e7f8              B        |L15.26|
;;;336    
                          ENDP


                          AREA ||i.SD_GetStatus||, CODE, READONLY, ALIGN=1

                  SD_GetStatus PROC
;;;290      */
;;;291    SDTransferState SD_GetStatus(void)
000000  b510              PUSH     {r4,lr}
;;;292    {
;;;293      SDCardState cardstate =  SD_CARD_TRANSFER;
000002  2404              MOVS     r4,#4
;;;294    
;;;295      cardstate = SD_GetState();
000004  f7fffffe          BL       SD_GetState
000008  4604              MOV      r4,r0
;;;296      
;;;297      if (cardstate == SD_CARD_TRANSFER)
00000a  2c04              CMP      r4,#4
00000c  d101              BNE      |L16.18|
;;;298      {
;;;299        return(SD_TRANSFER_OK);
00000e  2000              MOVS     r0,#0
                  |L16.16|
;;;300      }
;;;301      else if(cardstate == SD_CARD_ERROR)
;;;302      {
;;;303        return (SD_TRANSFER_ERROR);
;;;304      }
;;;305      else
;;;306      {
;;;307        return(SD_TRANSFER_BUSY);
;;;308      }
;;;309    }
000010  bd10              POP      {r4,pc}
                  |L16.18|
000012  2cff              CMP      r4,#0xff              ;301
000014  d101              BNE      |L16.26|
000016  2002              MOVS     r0,#2                 ;303
000018  e7fa              B        |L16.16|
                  |L16.26|
00001a  2001              MOVS     r0,#1                 ;307
00001c  e7f8              B        |L16.16|
;;;310    
                          ENDP


                          AREA ||i.SD_GetTransferState||, CODE, READONLY, ALIGN=2

                  SD_GetTransferState PROC
;;;1802     */
;;;1803   SDTransferState SD_GetTransferState(void)
000000  4804              LDR      r0,|L17.20|
;;;1804   {
;;;1805     if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
000002  6b40              LDR      r0,[r0,#0x34]
000004  f4005040          AND      r0,r0,#0x3000
000008  b108              CBZ      r0,|L17.14|
;;;1806     {
;;;1807       return(SD_TRANSFER_BUSY);
00000a  2001              MOVS     r0,#1
                  |L17.12|
;;;1808     }
;;;1809     else
;;;1810     {
;;;1811       return(SD_TRANSFER_OK);
;;;1812     }
;;;1813   }
00000c  4770              BX       lr
                  |L17.14|
00000e  2000              MOVS     r0,#0                 ;1811
000010  e7fc              B        |L17.12|
;;;1814   
                          ENDP

000012  0000              DCW      0x0000
                  |L17.20|
                          DCD      0x40018000

                          AREA ||i.SD_Init||, CODE, READONLY, ALIGN=2

                  SD_Init PROC
;;;221      */
;;;222    SD_Error SD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;223    {
;;;224      SD_Error errorstatus = SD_OK;
000002  242a              MOVS     r4,#0x2a
;;;225      
;;;226      /* SDIO Peripheral Low Level Init */
;;;227      SD_LowLevel_Init();
000004  f7fffffe          BL       SD_LowLevel_Init
;;;228    
;;;229      SDIO_DeInit();
000008  f7fffffe          BL       SDIO_DeInit
;;;230    
;;;231      errorstatus = SD_PowerON();
00000c  f7fffffe          BL       SD_PowerON
000010  4604              MOV      r4,r0
;;;232    
;;;233      if (errorstatus != SD_OK)
000012  2c2a              CMP      r4,#0x2a
000014  d001              BEQ      |L18.26|
;;;234      {
;;;235        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;236        return(errorstatus);
000016  4620              MOV      r0,r4
                  |L18.24|
;;;237      }
;;;238    
;;;239      errorstatus = SD_InitializeCards();
;;;240    
;;;241      if (errorstatus != SD_OK)
;;;242      {
;;;243        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;244        return(errorstatus);
;;;245      }
;;;246    
;;;247      /*!< Configure the SDIO peripheral */
;;;248      /*!< SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_TRANSFER_CLK_DIV) */ 
;;;249      SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;250      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;251      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;252      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;253      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;254      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;255      SDIO_Init(&SDIO_InitStructure);
;;;256      
;;;257      if (errorstatus == SD_OK)
;;;258      {
;;;259        /*----------------- Read CSD/CID MSD registers ------------------*/
;;;260        errorstatus = SD_GetCardInfo(&SDCardInfo);
;;;261      }
;;;262    
;;;263      if (errorstatus == SD_OK)
;;;264      {
;;;265        /*----------------- Select Card --------------------------------*/
;;;266        errorstatus = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
;;;267      }
;;;268    
;;;269      if (errorstatus == SD_OK)
;;;270      {
;;;271        errorstatus = SD_EnableWideBusOperation(SDIO_BusWide_4b);
;;;272      }  
;;;273    
;;;274      /* Set Device Transfer Mode to DMA */
;;;275      if (errorstatus == SD_OK)
;;;276      {  
;;;277        errorstatus = SD_SetDeviceMode(SD_DMA_MODE);
;;;278      }
;;;279      
;;;280      return(errorstatus);
;;;281    }
000018  bd10              POP      {r4,pc}
                  |L18.26|
00001a  f7fffffe          BL       SD_InitializeCards
00001e  4604              MOV      r4,r0                 ;239
000020  2c2a              CMP      r4,#0x2a              ;241
000022  d001              BEQ      |L18.40|
000024  4620              MOV      r0,r4                 ;244
000026  e7f7              B        |L18.24|
                  |L18.40|
000028  2001              MOVS     r0,#1                 ;249
00002a  4914              LDR      r1,|L18.124|
00002c  7508              STRB     r0,[r1,#0x14]         ;249
00002e  2000              MOVS     r0,#0                 ;250
000030  6008              STR      r0,[r1,#0]            ;250  ; SDIO_InitStructure
000032  6048              STR      r0,[r1,#4]            ;251  ; SDIO_InitStructure
000034  6088              STR      r0,[r1,#8]            ;252  ; SDIO_InitStructure
000036  60c8              STR      r0,[r1,#0xc]          ;253  ; SDIO_InitStructure
000038  6108              STR      r0,[r1,#0x10]         ;254  ; SDIO_InitStructure
00003a  4608              MOV      r0,r1                 ;255
00003c  f7fffffe          BL       SDIO_Init
000040  2c2a              CMP      r4,#0x2a              ;257
000042  d103              BNE      |L18.76|
000044  480e              LDR      r0,|L18.128|
000046  f7fffffe          BL       SD_GetCardInfo
00004a  4604              MOV      r4,r0                 ;260
                  |L18.76|
00004c  2c2a              CMP      r4,#0x2a              ;263
00004e  d106              BNE      |L18.94|
000050  490b              LDR      r1,|L18.128|
000052  f8b1104c          LDRH     r1,[r1,#0x4c]         ;266  ; SDCardInfo
000056  0408              LSLS     r0,r1,#16             ;266
000058  f7fffffe          BL       SD_SelectDeselect
00005c  4604              MOV      r4,r0                 ;266
                  |L18.94|
00005e  2c2a              CMP      r4,#0x2a              ;269
000060  d104              BNE      |L18.108|
000062  f44f6000          MOV      r0,#0x800             ;271
000066  f7fffffe          BL       SD_EnableWideBusOperation
00006a  4604              MOV      r4,r0                 ;271
                  |L18.108|
00006c  2c2a              CMP      r4,#0x2a              ;275
00006e  d103              BNE      |L18.120|
000070  2000              MOVS     r0,#0                 ;277
000072  f7fffffe          BL       SD_SetDeviceMode
000076  4604              MOV      r4,r0                 ;277
                  |L18.120|
000078  4620              MOV      r0,r4                 ;280
00007a  e7cd              B        |L18.24|
;;;282    
                          ENDP

                  |L18.124|
                          DCD      SDIO_InitStructure
                  |L18.128|
                          DCD      SDCardInfo

                          AREA ||i.SD_InitializeCards||, CODE, READONLY, ALIGN=2

                  SD_InitializeCards PROC
;;;518      */
;;;519    SD_Error SD_InitializeCards(void)
000000  b538              PUSH     {r3-r5,lr}
;;;520    {
;;;521      SD_Error errorstatus = SD_OK;
000002  242a              MOVS     r4,#0x2a
;;;522      uint16_t rca = 0x01;
000004  2001              MOVS     r0,#1
000006  9000              STR      r0,[sp,#0]
;;;523    
;;;524      if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
000008  f7fffffe          BL       SDIO_GetPowerState
00000c  b910              CBNZ     r0,|L19.20|
;;;525      {
;;;526        errorstatus = SD_REQUEST_NOT_APPLICABLE;
00000e  2425              MOVS     r4,#0x25
;;;527        return(errorstatus);
000010  4620              MOV      r0,r4
                  |L19.18|
;;;528      }
;;;529    
;;;530      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;531      {
;;;532        /*!< Send CMD2 ALL_SEND_CID */
;;;533        SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;534        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
;;;535        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;536        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;537        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;538        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;539    
;;;540        errorstatus = CmdResp2Error();
;;;541    
;;;542        if (SD_OK != errorstatus)
;;;543        {
;;;544          return(errorstatus);
;;;545        }
;;;546    
;;;547        CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;548        CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;549        CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;550        CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;551      }
;;;552      if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
;;;553          ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;554      {
;;;555        /*!< Send CMD3 SET_REL_ADDR with argument 0 */
;;;556        /*!< SD Card publishes its RCA. */
;;;557        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;558        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
;;;559        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;560        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;561        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;562        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;563    
;;;564        errorstatus = CmdResp6Error(SD_CMD_SET_REL_ADDR, &rca);
;;;565    
;;;566        if (SD_OK != errorstatus)
;;;567        {
;;;568          return(errorstatus);
;;;569        }
;;;570      }
;;;571    
;;;572      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;573      {
;;;574        RCA = rca;
;;;575    
;;;576        /*!< Send CMD9 SEND_CSD with argument as card's RCA */
;;;577        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
;;;578        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
;;;579        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;580        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;581        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;582        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;583    
;;;584        errorstatus = CmdResp2Error();
;;;585    
;;;586        if (SD_OK != errorstatus)
;;;587        {
;;;588          return(errorstatus);
;;;589        }
;;;590    
;;;591        CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;592        CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;593        CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;594        CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;595      }
;;;596    
;;;597      errorstatus = SD_OK; /*!< All cards get intialized */
;;;598    
;;;599      return(errorstatus);
;;;600    }
000012  bd38              POP      {r3-r5,pc}
                  |L19.20|
000014  4845              LDR      r0,|L19.300|
000016  6800              LDR      r0,[r0,#0]            ;530  ; CardType
000018  2804              CMP      r0,#4                 ;530
00001a  d029              BEQ      |L19.112|
00001c  2000              MOVS     r0,#0                 ;533
00001e  4944              LDR      r1,|L19.304|
000020  6008              STR      r0,[r1,#0]            ;533  ; SDIO_CmdInitStructure
000022  2002              MOVS     r0,#2                 ;534
000024  6048              STR      r0,[r1,#4]            ;534  ; SDIO_CmdInitStructure
000026  20c0              MOVS     r0,#0xc0              ;535
000028  6088              STR      r0,[r1,#8]            ;535  ; SDIO_CmdInitStructure
00002a  2000              MOVS     r0,#0                 ;536
00002c  60c8              STR      r0,[r1,#0xc]          ;536  ; SDIO_CmdInitStructure
00002e  f44f6080          MOV      r0,#0x400             ;537
000032  6108              STR      r0,[r1,#0x10]         ;537  ; SDIO_CmdInitStructure
000034  4608              MOV      r0,r1                 ;538
000036  f7fffffe          BL       SDIO_SendCommand
00003a  f7fffffe          BL       CmdResp2Error
00003e  4604              MOV      r4,r0                 ;540
000040  2c2a              CMP      r4,#0x2a              ;542
000042  d001              BEQ      |L19.72|
000044  4620              MOV      r0,r4                 ;544
000046  e7e4              B        |L19.18|
                  |L19.72|
000048  2000              MOVS     r0,#0                 ;547
00004a  f7fffffe          BL       SDIO_GetResponse
00004e  4939              LDR      r1,|L19.308|
000050  6008              STR      r0,[r1,#0]            ;547  ; CID_Tab
000052  2004              MOVS     r0,#4                 ;548
000054  f7fffffe          BL       SDIO_GetResponse
000058  4936              LDR      r1,|L19.308|
00005a  6048              STR      r0,[r1,#4]            ;548  ; CID_Tab
00005c  2008              MOVS     r0,#8                 ;549
00005e  f7fffffe          BL       SDIO_GetResponse
000062  4934              LDR      r1,|L19.308|
000064  6088              STR      r0,[r1,#8]            ;549  ; CID_Tab
000066  200c              MOVS     r0,#0xc               ;550
000068  f7fffffe          BL       SDIO_GetResponse
00006c  4931              LDR      r1,|L19.308|
00006e  60c8              STR      r0,[r1,#0xc]          ;550  ; CID_Tab
                  |L19.112|
000070  482e              LDR      r0,|L19.300|
000072  6800              LDR      r0,[r0,#0]            ;552  ; CardType
000074  b158              CBZ      r0,|L19.142|
000076  482d              LDR      r0,|L19.300|
000078  6800              LDR      r0,[r0,#0]            ;552  ; CardType
00007a  2801              CMP      r0,#1                 ;552
00007c  d007              BEQ      |L19.142|
00007e  482b              LDR      r0,|L19.300|
000080  6800              LDR      r0,[r0,#0]            ;552  ; CardType
000082  2806              CMP      r0,#6                 ;552
000084  d003              BEQ      |L19.142|
000086  4829              LDR      r0,|L19.300|
000088  6800              LDR      r0,[r0,#0]            ;553  ; CardType
00008a  2802              CMP      r0,#2                 ;553
00008c  d117              BNE      |L19.190|
                  |L19.142|
00008e  2000              MOVS     r0,#0                 ;557
000090  4927              LDR      r1,|L19.304|
000092  6008              STR      r0,[r1,#0]            ;557  ; SDIO_CmdInitStructure
000094  2003              MOVS     r0,#3                 ;558
000096  6048              STR      r0,[r1,#4]            ;558  ; SDIO_CmdInitStructure
000098  2040              MOVS     r0,#0x40              ;559
00009a  6088              STR      r0,[r1,#8]            ;559  ; SDIO_CmdInitStructure
00009c  2000              MOVS     r0,#0                 ;560
00009e  60c8              STR      r0,[r1,#0xc]          ;560  ; SDIO_CmdInitStructure
0000a0  f44f6080          MOV      r0,#0x400             ;561
0000a4  6108              STR      r0,[r1,#0x10]         ;561  ; SDIO_CmdInitStructure
0000a6  4608              MOV      r0,r1                 ;562
0000a8  f7fffffe          BL       SDIO_SendCommand
0000ac  4669              MOV      r1,sp                 ;564
0000ae  2003              MOVS     r0,#3                 ;564
0000b0  f7fffffe          BL       CmdResp6Error
0000b4  4604              MOV      r4,r0                 ;564
0000b6  2c2a              CMP      r4,#0x2a              ;566
0000b8  d001              BEQ      |L19.190|
0000ba  4620              MOV      r0,r4                 ;568
0000bc  e7a9              B        |L19.18|
                  |L19.190|
0000be  481b              LDR      r0,|L19.300|
0000c0  6800              LDR      r0,[r0,#0]            ;572  ; CardType
0000c2  2804              CMP      r0,#4                 ;572
0000c4  d02f              BEQ      |L19.294|
0000c6  f8bd0000          LDRH     r0,[sp,#0]            ;574
0000ca  491b              LDR      r1,|L19.312|
0000cc  6008              STR      r0,[r1,#0]            ;574  ; RCA
0000ce  f8bd0000          LDRH     r0,[sp,#0]            ;577
0000d2  0400              LSLS     r0,r0,#16             ;577
0000d4  4916              LDR      r1,|L19.304|
0000d6  6008              STR      r0,[r1,#0]            ;577  ; SDIO_CmdInitStructure
0000d8  2009              MOVS     r0,#9                 ;578
0000da  6048              STR      r0,[r1,#4]            ;578  ; SDIO_CmdInitStructure
0000dc  20c0              MOVS     r0,#0xc0              ;579
0000de  6088              STR      r0,[r1,#8]            ;579  ; SDIO_CmdInitStructure
0000e0  2000              MOVS     r0,#0                 ;580
0000e2  60c8              STR      r0,[r1,#0xc]          ;580  ; SDIO_CmdInitStructure
0000e4  f44f6080          MOV      r0,#0x400             ;581
0000e8  6108              STR      r0,[r1,#0x10]         ;581  ; SDIO_CmdInitStructure
0000ea  4608              MOV      r0,r1                 ;582
0000ec  f7fffffe          BL       SDIO_SendCommand
0000f0  f7fffffe          BL       CmdResp2Error
0000f4  4604              MOV      r4,r0                 ;584
0000f6  2c2a              CMP      r4,#0x2a              ;586
0000f8  d001              BEQ      |L19.254|
0000fa  4620              MOV      r0,r4                 ;588
0000fc  e789              B        |L19.18|
                  |L19.254|
0000fe  2000              MOVS     r0,#0                 ;591
000100  f7fffffe          BL       SDIO_GetResponse
000104  490d              LDR      r1,|L19.316|
000106  6008              STR      r0,[r1,#0]            ;591  ; CSD_Tab
000108  2004              MOVS     r0,#4                 ;592
00010a  f7fffffe          BL       SDIO_GetResponse
00010e  490b              LDR      r1,|L19.316|
000110  6048              STR      r0,[r1,#4]            ;592  ; CSD_Tab
000112  2008              MOVS     r0,#8                 ;593
000114  f7fffffe          BL       SDIO_GetResponse
000118  4908              LDR      r1,|L19.316|
00011a  6088              STR      r0,[r1,#8]            ;593  ; CSD_Tab
00011c  200c              MOVS     r0,#0xc               ;594
00011e  f7fffffe          BL       SDIO_GetResponse
000122  4906              LDR      r1,|L19.316|
000124  60c8              STR      r0,[r1,#0xc]          ;594  ; CSD_Tab
                  |L19.294|
000126  242a              MOVS     r4,#0x2a              ;597
000128  4620              MOV      r0,r4                 ;599
00012a  e772              B        |L19.18|
;;;601    
                          ENDP

                  |L19.300|
                          DCD      CardType
                  |L19.304|
                          DCD      SDIO_CmdInitStructure
                  |L19.308|
                          DCD      CID_Tab
                  |L19.312|
                          DCD      ||RCA||
                  |L19.316|
                          DCD      CSD_Tab

                          AREA ||i.SD_PowerOFF||, CODE, READONLY, ALIGN=1

                  SD_PowerOFF PROC
;;;502      */
;;;503    SD_Error SD_PowerOFF(void)
000000  b510              PUSH     {r4,lr}
;;;504    {
;;;505      SD_Error errorstatus = SD_OK;
000002  242a              MOVS     r4,#0x2a
;;;506    
;;;507      /*!< Set Power State to OFF */
;;;508      SDIO_SetPowerState(SDIO_PowerState_OFF);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       SDIO_SetPowerState
;;;509    
;;;510      return(errorstatus);
00000a  4620              MOV      r0,r4
;;;511    }
00000c  bd10              POP      {r4,pc}
;;;512    
                          ENDP


                          AREA ||i.SD_PowerON||, CODE, READONLY, ALIGN=2

                  SD_PowerON PROC
;;;359      */
;;;360    SD_Error SD_PowerON(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;361    {
;;;362      SD_Error errorstatus = SD_OK;
000004  242a              MOVS     r4,#0x2a
;;;363      uint32_t response = 0, count = 0, validvoltage = 0;
000006  2600              MOVS     r6,#0
000008  2500              MOVS     r5,#0
00000a  2700              MOVS     r7,#0
;;;364      uint32_t SDType = SD_STD_CAPACITY;
00000c  f04f0800          MOV      r8,#0
;;;365    
;;;366      /*!< Power ON Sequence -----------------------------------------------------*/
;;;367      /*!< Configure the SDIO peripheral */
;;;368      /*!< SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_INIT_CLK_DIV) */
;;;369      /*!< SDIO_CK for initialization should not exceed 400 KHz */  
;;;370      SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
000010  20b2              MOVS     r0,#0xb2
000012  495b              LDR      r1,|L21.384|
000014  7508              STRB     r0,[r1,#0x14]
;;;371      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000016  2000              MOVS     r0,#0
000018  6008              STR      r0,[r1,#0]  ; SDIO_InitStructure
;;;372      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
00001a  6048              STR      r0,[r1,#4]  ; SDIO_InitStructure
;;;373      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
00001c  6088              STR      r0,[r1,#8]  ; SDIO_InitStructure
;;;374      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
00001e  60c8              STR      r0,[r1,#0xc]  ; SDIO_InitStructure
;;;375      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
000020  6108              STR      r0,[r1,#0x10]  ; SDIO_InitStructure
;;;376      SDIO_Init(&SDIO_InitStructure);
000022  4608              MOV      r0,r1
000024  f7fffffe          BL       SDIO_Init
;;;377    
;;;378      /*!< Set Power State to ON */
;;;379      SDIO_SetPowerState(SDIO_PowerState_ON);
000028  2003              MOVS     r0,#3
00002a  f7fffffe          BL       SDIO_SetPowerState
;;;380    
;;;381      /*!< Enable SDIO Clock */
;;;382      SDIO_ClockCmd(ENABLE);
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       SDIO_ClockCmd
;;;383    
;;;384      /*!< CMD0: GO_IDLE_STATE ---------------------------------------------------*/
;;;385      /*!< No CMD response required */
;;;386      SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000034  2000              MOVS     r0,#0
000036  4953              LDR      r1,|L21.388|
000038  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;387      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
00003a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;388      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
00003c  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;389      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00003e  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;390      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000040  f44f6080          MOV      r0,#0x400
000044  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;391      SDIO_SendCommand(&SDIO_CmdInitStructure);
000046  4608              MOV      r0,r1
000048  f7fffffe          BL       SDIO_SendCommand
;;;392    
;;;393      errorstatus = CmdError();
00004c  f7fffffe          BL       CmdError
000050  4604              MOV      r4,r0
;;;394    
;;;395      if (errorstatus != SD_OK)
000052  2c2a              CMP      r4,#0x2a
000054  d002              BEQ      |L21.92|
;;;396      {
;;;397        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;398        return(errorstatus);
000056  4620              MOV      r0,r4
                  |L21.88|
;;;399      }
;;;400    
;;;401      /*!< CMD8: SEND_IF_COND ----------------------------------------------------*/
;;;402      /*!< Send CMD8 to verify SD card interface operating condition */
;;;403      /*!< Argument: - [31:12]: Reserved (shall be set to '0')
;;;404                   - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
;;;405                   - [7:0]: Check Pattern (recommended 0xAA) */
;;;406      /*!< CMD Response: R7 */
;;;407      SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
;;;408      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
;;;409      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;410      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;411      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;412      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;413    
;;;414      errorstatus = CmdResp7Error();
;;;415    
;;;416      if (errorstatus == SD_OK)
;;;417      {
;;;418        CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /*!< SD Card 2.0 */
;;;419        SDType = SD_HIGH_CAPACITY;
;;;420      }
;;;421      else
;;;422      {
;;;423        /*!< CMD55 */
;;;424        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;425        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;426        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;427        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;428        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;429        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;430        errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;431      }
;;;432      /*!< CMD55 */
;;;433      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;434      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;435      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;436      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;437      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;438      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;439      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;440    
;;;441      /*!< If errorstatus is Command TimeOut, it is a MMC card */
;;;442      /*!< If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
;;;443         or SD card 1.x */
;;;444      if (errorstatus == SD_OK)
;;;445      {
;;;446        /*!< SD CARD */
;;;447        /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
;;;448        while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
;;;449        {
;;;450    
;;;451          /*!< SEND CMD55 APP_CMD with RCA as 0 */
;;;452          SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;453          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;454          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;455          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;456          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;457          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;458    
;;;459          errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;460    
;;;461          if (errorstatus != SD_OK)
;;;462          {
;;;463            return(errorstatus);
;;;464          }
;;;465          SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
;;;466          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
;;;467          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;468          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;469          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;470          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;471    
;;;472          errorstatus = CmdResp3Error();
;;;473          if (errorstatus != SD_OK)
;;;474          {
;;;475            return(errorstatus);
;;;476          }
;;;477    
;;;478          response = SDIO_GetResponse(SDIO_RESP1);
;;;479          validvoltage = (((response >> 31) == 1) ? 1 : 0);
;;;480          count++;
;;;481        }
;;;482        if (count >= SD_MAX_VOLT_TRIAL)
;;;483        {
;;;484          errorstatus = SD_INVALID_VOLTRANGE;
;;;485          return(errorstatus);
;;;486        }
;;;487    
;;;488        if (response &= SD_HIGH_CAPACITY)
;;;489        {
;;;490          CardType = SDIO_HIGH_CAPACITY_SD_CARD;
;;;491        }
;;;492    
;;;493      }/*!< else MMC Card */
;;;494    
;;;495      return(errorstatus);
;;;496    }
000058  e8bd81f0          POP      {r4-r8,pc}
                  |L21.92|
00005c  f44f70d5          MOV      r0,#0x1aa             ;407
000060  4948              LDR      r1,|L21.388|
000062  6008              STR      r0,[r1,#0]            ;407  ; SDIO_CmdInitStructure
000064  2008              MOVS     r0,#8                 ;408
000066  6048              STR      r0,[r1,#4]            ;408  ; SDIO_CmdInitStructure
000068  2040              MOVS     r0,#0x40              ;409
00006a  6088              STR      r0,[r1,#8]            ;409  ; SDIO_CmdInitStructure
00006c  2000              MOVS     r0,#0                 ;410
00006e  60c8              STR      r0,[r1,#0xc]          ;410  ; SDIO_CmdInitStructure
000070  f44f6080          MOV      r0,#0x400             ;411
000074  6108              STR      r0,[r1,#0x10]         ;411  ; SDIO_CmdInitStructure
000076  4608              MOV      r0,r1                 ;412
000078  f7fffffe          BL       SDIO_SendCommand
00007c  f7fffffe          BL       CmdResp7Error
000080  4604              MOV      r4,r0                 ;414
000082  2c2a              CMP      r4,#0x2a              ;416
000084  d105              BNE      |L21.146|
000086  2001              MOVS     r0,#1                 ;418
000088  493f              LDR      r1,|L21.392|
00008a  6008              STR      r0,[r1,#0]            ;418  ; CardType
00008c  f04f4880          MOV      r8,#0x40000000        ;419
000090  e012              B        |L21.184|
                  |L21.146|
000092  2000              MOVS     r0,#0                 ;424
000094  493b              LDR      r1,|L21.388|
000096  6008              STR      r0,[r1,#0]            ;424  ; SDIO_CmdInitStructure
000098  2037              MOVS     r0,#0x37              ;425
00009a  6048              STR      r0,[r1,#4]            ;425  ; SDIO_CmdInitStructure
00009c  2040              MOVS     r0,#0x40              ;426
00009e  6088              STR      r0,[r1,#8]            ;426  ; SDIO_CmdInitStructure
0000a0  2000              MOVS     r0,#0                 ;427
0000a2  60c8              STR      r0,[r1,#0xc]          ;427  ; SDIO_CmdInitStructure
0000a4  f44f6080          MOV      r0,#0x400             ;428
0000a8  6108              STR      r0,[r1,#0x10]         ;428  ; SDIO_CmdInitStructure
0000aa  4608              MOV      r0,r1                 ;429
0000ac  f7fffffe          BL       SDIO_SendCommand
0000b0  2037              MOVS     r0,#0x37              ;430
0000b2  f7fffffe          BL       CmdResp1Error
0000b6  4604              MOV      r4,r0                 ;430
                  |L21.184|
0000b8  2000              MOVS     r0,#0                 ;433
0000ba  4932              LDR      r1,|L21.388|
0000bc  6008              STR      r0,[r1,#0]            ;433  ; SDIO_CmdInitStructure
0000be  2037              MOVS     r0,#0x37              ;434
0000c0  6048              STR      r0,[r1,#4]            ;434  ; SDIO_CmdInitStructure
0000c2  2040              MOVS     r0,#0x40              ;435
0000c4  6088              STR      r0,[r1,#8]            ;435  ; SDIO_CmdInitStructure
0000c6  2000              MOVS     r0,#0                 ;436
0000c8  60c8              STR      r0,[r1,#0xc]          ;436  ; SDIO_CmdInitStructure
0000ca  f44f6080          MOV      r0,#0x400             ;437
0000ce  6108              STR      r0,[r1,#0x10]         ;437  ; SDIO_CmdInitStructure
0000d0  4608              MOV      r0,r1                 ;438
0000d2  f7fffffe          BL       SDIO_SendCommand
0000d6  2037              MOVS     r0,#0x37              ;439
0000d8  f7fffffe          BL       CmdResp1Error
0000dc  4604              MOV      r4,r0                 ;439
0000de  2c2a              CMP      r4,#0x2a              ;444
0000e0  d14c              BNE      |L21.380|
0000e2  e038              B        |L21.342|
                  |L21.228|
0000e4  2000              MOVS     r0,#0                 ;452
0000e6  4927              LDR      r1,|L21.388|
0000e8  6008              STR      r0,[r1,#0]            ;452  ; SDIO_CmdInitStructure
0000ea  2037              MOVS     r0,#0x37              ;453
0000ec  6048              STR      r0,[r1,#4]            ;453  ; SDIO_CmdInitStructure
0000ee  2040              MOVS     r0,#0x40              ;454
0000f0  6088              STR      r0,[r1,#8]            ;454  ; SDIO_CmdInitStructure
0000f2  2000              MOVS     r0,#0                 ;455
0000f4  60c8              STR      r0,[r1,#0xc]          ;455  ; SDIO_CmdInitStructure
0000f6  f44f6080          MOV      r0,#0x400             ;456
0000fa  6108              STR      r0,[r1,#0x10]         ;456  ; SDIO_CmdInitStructure
0000fc  4608              MOV      r0,r1                 ;457
0000fe  f7fffffe          BL       SDIO_SendCommand
000102  2037              MOVS     r0,#0x37              ;459
000104  f7fffffe          BL       CmdResp1Error
000108  4604              MOV      r4,r0                 ;459
00010a  2c2a              CMP      r4,#0x2a              ;461
00010c  d001              BEQ      |L21.274|
00010e  4620              MOV      r0,r4                 ;463
000110  e7a2              B        |L21.88|
                  |L21.274|
000112  481e              LDR      r0,|L21.396|
000114  ea480000          ORR      r0,r8,r0              ;465
000118  491a              LDR      r1,|L21.388|
00011a  6008              STR      r0,[r1,#0]            ;465  ; SDIO_CmdInitStructure
00011c  2029              MOVS     r0,#0x29              ;466
00011e  6048              STR      r0,[r1,#4]            ;466  ; SDIO_CmdInitStructure
000120  2040              MOVS     r0,#0x40              ;467
000122  6088              STR      r0,[r1,#8]            ;467  ; SDIO_CmdInitStructure
000124  2000              MOVS     r0,#0                 ;468
000126  60c8              STR      r0,[r1,#0xc]          ;468  ; SDIO_CmdInitStructure
000128  f44f6080          MOV      r0,#0x400             ;469
00012c  6108              STR      r0,[r1,#0x10]         ;469  ; SDIO_CmdInitStructure
00012e  4608              MOV      r0,r1                 ;470
000130  f7fffffe          BL       SDIO_SendCommand
000134  f7fffffe          BL       CmdResp3Error
000138  4604              MOV      r4,r0                 ;472
00013a  2c2a              CMP      r4,#0x2a              ;473
00013c  d001              BEQ      |L21.322|
00013e  4620              MOV      r0,r4                 ;475
000140  e78a              B        |L21.88|
                  |L21.322|
000142  2000              MOVS     r0,#0                 ;478
000144  f7fffffe          BL       SDIO_GetResponse
000148  4606              MOV      r6,r0                 ;478
00014a  2001              MOVS     r0,#1                 ;479
00014c  ea8070d6          EOR      r0,r0,r6,LSR #31      ;479
000150  f0800701          EOR      r7,r0,#1              ;479
000154  1c6d              ADDS     r5,r5,#1              ;480
                  |L21.342|
000156  b91f              CBNZ     r7,|L21.352|
000158  f64f70ff          MOV      r0,#0xffff            ;448
00015c  4285              CMP      r5,r0                 ;448
00015e  d3c1              BCC      |L21.228|
                  |L21.352|
000160  f64f70ff          MOV      r0,#0xffff            ;482
000164  4285              CMP      r5,r0                 ;482
000166  d302              BCC      |L21.366|
000168  241b              MOVS     r4,#0x1b              ;484
00016a  4620              MOV      r0,r4                 ;485
00016c  e774              B        |L21.88|
                  |L21.366|
00016e  f0064080          AND      r0,r6,#0x40000000     ;488
000172  1e06              SUBS     r6,r0,#0              ;488
000174  d002              BEQ      |L21.380|
000176  2002              MOVS     r0,#2                 ;490
000178  4903              LDR      r1,|L21.392|
00017a  6008              STR      r0,[r1,#0]            ;490  ; CardType
                  |L21.380|
00017c  4620              MOV      r0,r4                 ;495
00017e  e76b              B        |L21.88|
;;;497    
                          ENDP

                  |L21.384|
                          DCD      SDIO_InitStructure
                  |L21.388|
                          DCD      SDIO_CmdInitStructure
                  |L21.392|
                          DCD      CardType
                  |L21.396|
                          DCD      0x80100000

                          AREA ||i.SD_ProcessIRQSrc||, CODE, READONLY, ALIGN=2

                  SD_ProcessIRQSrc PROC
;;;2094     */
;;;2095   SD_Error SD_ProcessIRQSrc(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2096   {
;;;2097     uint32_t count = 0, restwords = 0;
000002  2400              MOVS     r4,#0
000004  2500              MOVS     r5,#0
;;;2098   
;;;2099     if (DeviceMode == SD_INTERRUPT_MODE)
000006  4888              LDR      r0,|L22.552|
000008  6800              LDR      r0,[r0,#0]  ; DeviceMode
00000a  2801              CMP      r0,#1
00000c  d167              BNE      |L22.222|
;;;2100     {
;;;2101       if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
00000e  03c0              LSLS     r0,r0,#15
000010  f7fffffe          BL       SDIO_GetITStatus
000014  b1a8              CBZ      r0,|L22.66|
;;;2102       {
;;;2103         for (count = 0; count < SD_HALFFIFO; count++)
000016  bf00              NOP      
000018  e006              B        |L22.40|
                  |L22.26|
;;;2104         {
;;;2105           *(DestBuffer + count) = SDIO_ReadData();
00001a  f7fffffe          BL       SDIO_ReadData
00001e  4983              LDR      r1,|L22.556|
000020  6809              LDR      r1,[r1,#0]  ; DestBuffer
000022  f8410024          STR      r0,[r1,r4,LSL #2]
000026  1c64              ADDS     r4,r4,#1              ;2103
                  |L22.40|
000028  2c08              CMP      r4,#8                 ;2103
00002a  d3f6              BCC      |L22.26|
;;;2106         }
;;;2107         DestBuffer += SD_HALFFIFO;
00002c  487f              LDR      r0,|L22.556|
00002e  6800              LDR      r0,[r0,#0]  ; DestBuffer
000030  3020              ADDS     r0,r0,#0x20
000032  497e              LDR      r1,|L22.556|
000034  6008              STR      r0,[r1,#0]  ; DestBuffer
;;;2108         NumberOfBytes += SD_HALFFIFOBYTES;
000036  487e              LDR      r0,|L22.560|
000038  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
00003a  3020              ADDS     r0,r0,#0x20
00003c  497c              LDR      r1,|L22.560|
00003e  6008              STR      r0,[r1,#0]  ; NumberOfBytes
000040  e04d              B        |L22.222|
                  |L22.66|
;;;2109       }
;;;2110       else if (SDIO_GetITStatus(SDIO_IT_TXFIFOHE) != RESET)
000042  f44f4080          MOV      r0,#0x4000
000046  f7fffffe          BL       SDIO_GetITStatus
00004a  2800              CMP      r0,#0
00004c  d047              BEQ      |L22.222|
;;;2111       {
;;;2112         if ((TotalNumberOfBytes - NumberOfBytes) < SD_HALFFIFOBYTES)
00004e  4879              LDR      r0,|L22.564|
000050  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
000052  4977              LDR      r1,|L22.560|
000054  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
000056  1a40              SUBS     r0,r0,r1
000058  2820              CMP      r0,#0x20
00005a  d22b              BCS      |L22.180|
;;;2113         {
;;;2114           restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
00005c  4875              LDR      r0,|L22.564|
00005e  7800              LDRB     r0,[r0,#0]  ; TotalNumberOfBytes
000060  4973              LDR      r1,|L22.560|
000062  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
000064  1a40              SUBS     r0,r0,r1
000066  f0000003          AND      r0,r0,#3
00006a  b930              CBNZ     r0,|L22.122|
;;;2115                       ((TotalNumberOfBytes - NumberOfBytes) / 4) :
00006c  4871              LDR      r0,|L22.564|
00006e  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
000070  496f              LDR      r1,|L22.560|
000072  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
000074  1a40              SUBS     r0,r0,r1
000076  0880              LSRS     r0,r0,#2
000078  e006              B        |L22.136|
                  |L22.122|
;;;2116                       ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);
00007a  486e              LDR      r0,|L22.564|
00007c  6800              LDR      r0,[r0,#0]  ; TotalNumberOfBytes
00007e  496c              LDR      r1,|L22.560|
000080  6809              LDR      r1,[r1,#0]  ; NumberOfBytes
000082  1a40              SUBS     r0,r0,r1
000084  0880              LSRS     r0,r0,#2
000086  1c40              ADDS     r0,r0,#1
                  |L22.136|
000088  4605              MOV      r5,r0
;;;2117   
;;;2118           for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
00008a  2400              MOVS     r4,#0
00008c  e00f              B        |L22.174|
                  |L22.142|
;;;2119           {
;;;2120             SDIO_WriteData(*SrcBuffer);
00008e  496a              LDR      r1,|L22.568|
000090  6809              LDR      r1,[r1,#0]  ; SrcBuffer
000092  6808              LDR      r0,[r1,#0]
000094  f7fffffe          BL       SDIO_WriteData
000098  1c64              ADDS     r4,r4,#1              ;2118
00009a  4867              LDR      r0,|L22.568|
00009c  6800              LDR      r0,[r0,#0]            ;2118  ; SrcBuffer
00009e  1d00              ADDS     r0,r0,#4              ;2118
0000a0  4965              LDR      r1,|L22.568|
0000a2  6008              STR      r0,[r1,#0]            ;2118  ; SrcBuffer
0000a4  4862              LDR      r0,|L22.560|
0000a6  6800              LDR      r0,[r0,#0]            ;2118  ; NumberOfBytes
0000a8  1d00              ADDS     r0,r0,#4              ;2118
0000aa  4961              LDR      r1,|L22.560|
0000ac  6008              STR      r0,[r1,#0]            ;2118  ; NumberOfBytes
                  |L22.174|
0000ae  42ac              CMP      r4,r5                 ;2118
0000b0  d3ed              BCC      |L22.142|
0000b2  e014              B        |L22.222|
                  |L22.180|
;;;2121           }
;;;2122         }
;;;2123         else
;;;2124         {
;;;2125           for (count = 0; count < SD_HALFFIFO; count++)
0000b4  2400              MOVS     r4,#0
0000b6  e006              B        |L22.198|
                  |L22.184|
;;;2126           {
;;;2127             SDIO_WriteData(*(SrcBuffer + count));
0000b8  495f              LDR      r1,|L22.568|
0000ba  6809              LDR      r1,[r1,#0]  ; SrcBuffer
0000bc  f8510024          LDR      r0,[r1,r4,LSL #2]
0000c0  f7fffffe          BL       SDIO_WriteData
0000c4  1c64              ADDS     r4,r4,#1              ;2125
                  |L22.198|
0000c6  2c08              CMP      r4,#8                 ;2125
0000c8  d3f6              BCC      |L22.184|
;;;2128           }
;;;2129   
;;;2130           SrcBuffer += SD_HALFFIFO;
0000ca  485b              LDR      r0,|L22.568|
0000cc  6800              LDR      r0,[r0,#0]  ; SrcBuffer
0000ce  3020              ADDS     r0,r0,#0x20
0000d0  4959              LDR      r1,|L22.568|
0000d2  6008              STR      r0,[r1,#0]  ; SrcBuffer
;;;2131           NumberOfBytes += SD_HALFFIFOBYTES;
0000d4  4856              LDR      r0,|L22.560|
0000d6  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
0000d8  3020              ADDS     r0,r0,#0x20
0000da  4955              LDR      r1,|L22.560|
0000dc  6008              STR      r0,[r1,#0]  ; NumberOfBytes
                  |L22.222|
;;;2132         }
;;;2133       }
;;;2134     }
;;;2135   
;;;2136     if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
0000de  f44f7080          MOV      r0,#0x100
0000e2  f7fffffe          BL       SDIO_GetITStatus
0000e6  b3d8              CBZ      r0,|L22.352|
;;;2137     {
;;;2138       if (DeviceMode != SD_DMA_MODE)
0000e8  484f              LDR      r0,|L22.552|
0000ea  6800              LDR      r0,[r0,#0]  ; DeviceMode
0000ec  b1d0              CBZ      r0,|L22.292|
;;;2139       {
;;;2140         while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfBytes))
0000ee  e00e              B        |L22.270|
                  |L22.240|
;;;2141         {
;;;2142           *DestBuffer = SDIO_ReadData();
0000f0  f7fffffe          BL       SDIO_ReadData
0000f4  494d              LDR      r1,|L22.556|
0000f6  6809              LDR      r1,[r1,#0]  ; DestBuffer
0000f8  6008              STR      r0,[r1,#0]
;;;2143           DestBuffer++;
0000fa  484c              LDR      r0,|L22.556|
0000fc  6800              LDR      r0,[r0,#0]  ; DestBuffer
0000fe  1d00              ADDS     r0,r0,#4
000100  494a              LDR      r1,|L22.556|
000102  6008              STR      r0,[r1,#0]  ; DestBuffer
;;;2144           NumberOfBytes += 4;
000104  484a              LDR      r0,|L22.560|
000106  6800              LDR      r0,[r0,#0]  ; NumberOfBytes
000108  1d00              ADDS     r0,r0,#4
00010a  4949              LDR      r1,|L22.560|
00010c  6008              STR      r0,[r1,#0]  ; NumberOfBytes
                  |L22.270|
00010e  f44f1000          MOV      r0,#0x200000          ;2140
000112  f7fffffe          BL       SDIO_GetFlagStatus
000116  b128              CBZ      r0,|L22.292|
000118  4845              LDR      r0,|L22.560|
00011a  6800              LDR      r0,[r0,#0]            ;2140  ; NumberOfBytes
00011c  4945              LDR      r1,|L22.564|
00011e  6809              LDR      r1,[r1,#0]            ;2140  ; TotalNumberOfBytes
000120  4288              CMP      r0,r1                 ;2140
000122  d3e5              BCC      |L22.240|
                  |L22.292|
;;;2145         }
;;;2146       }
;;;2147   
;;;2148       if (StopCondition == 1)
000124  4845              LDR      r0,|L22.572|
000126  6800              LDR      r0,[r0,#0]  ; StopCondition
000128  2801              CMP      r0,#1
00012a  d104              BNE      |L22.310|
;;;2149       {
;;;2150         TransferError = SD_StopTransfer();
00012c  f7fffffe          BL       SD_StopTransfer
000130  4943              LDR      r1,|L22.576|
000132  7008              STRB     r0,[r1,#0]
000134  e002              B        |L22.316|
                  |L22.310|
;;;2151       }
;;;2152       else
;;;2153       {
;;;2154         TransferError = SD_OK;
000136  202a              MOVS     r0,#0x2a
000138  4941              LDR      r1,|L22.576|
00013a  7008              STRB     r0,[r1,#0]
                  |L22.316|
;;;2155       }
;;;2156       SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
00013c  f44f7080          MOV      r0,#0x100
000140  f7fffffe          BL       SDIO_ClearITPendingBit
;;;2157       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
000144  2100              MOVS     r1,#0
000146  f24c303a          MOV      r0,#0xc33a
00014a  f7fffffe          BL       SDIO_ITConfig
;;;2158                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2159                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2160       TransferEnd = 1;
00014e  2001              MOVS     r0,#1
000150  493c              LDR      r1,|L22.580|
000152  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;2161       NumberOfBytes = 0;
000154  2000              MOVS     r0,#0
000156  4936              LDR      r1,|L22.560|
000158  6008              STR      r0,[r1,#0]  ; NumberOfBytes
;;;2162       return(TransferError);
00015a  4839              LDR      r0,|L22.576|
00015c  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L22.350|
;;;2163     }
;;;2164   
;;;2165     if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
;;;2166     {
;;;2167       SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
;;;2168       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2169                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2170                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2171       NumberOfBytes = 0;
;;;2172       TransferError = SD_DATA_CRC_FAIL;
;;;2173       return(SD_DATA_CRC_FAIL);
;;;2174     }
;;;2175   
;;;2176     if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
;;;2177     {
;;;2178       SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
;;;2179       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2180                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2181                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2182       NumberOfBytes = 0;
;;;2183       TransferError = SD_DATA_TIMEOUT;
;;;2184       return(SD_DATA_TIMEOUT);
;;;2185     }
;;;2186   
;;;2187     if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
;;;2188     {
;;;2189       SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
;;;2190       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2191                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2192                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2193       NumberOfBytes = 0;
;;;2194       TransferError = SD_RX_OVERRUN;
;;;2195       return(SD_RX_OVERRUN);
;;;2196     }
;;;2197   
;;;2198     if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
;;;2199     {
;;;2200       SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
;;;2201       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2202                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2203                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2204       NumberOfBytes = 0;
;;;2205       TransferError = SD_TX_UNDERRUN;
;;;2206       return(SD_TX_UNDERRUN);
;;;2207     }
;;;2208   
;;;2209     if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
;;;2210     {
;;;2211       SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
;;;2212       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
;;;2213                     SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2214                     SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2215       NumberOfBytes = 0;
;;;2216       TransferError = SD_START_BIT_ERR;
;;;2217       return(SD_START_BIT_ERR);
;;;2218     }
;;;2219   
;;;2220     return(SD_OK);
;;;2221   }
00015e  bd70              POP      {r4-r6,pc}
                  |L22.352|
000160  e7ff              B        |L22.354|
                  |L22.354|
000162  2002              MOVS     r0,#2                 ;2165
000164  f7fffffe          BL       SDIO_GetITStatus
000168  b170              CBZ      r0,|L22.392|
00016a  2002              MOVS     r0,#2                 ;2167
00016c  f7fffffe          BL       SDIO_ClearITPendingBit
000170  2100              MOVS     r1,#0                 ;2168
000172  f24c303a          MOV      r0,#0xc33a            ;2168
000176  f7fffffe          BL       SDIO_ITConfig
00017a  2000              MOVS     r0,#0                 ;2171
00017c  492c              LDR      r1,|L22.560|
00017e  6008              STR      r0,[r1,#0]            ;2171  ; NumberOfBytes
000180  2002              MOVS     r0,#2                 ;2172
000182  492f              LDR      r1,|L22.576|
000184  7008              STRB     r0,[r1,#0]            ;2172
000186  e7ea              B        |L22.350|
                  |L22.392|
000188  2008              MOVS     r0,#8                 ;2176
00018a  f7fffffe          BL       SDIO_GetITStatus
00018e  b170              CBZ      r0,|L22.430|
000190  2008              MOVS     r0,#8                 ;2178
000192  f7fffffe          BL       SDIO_ClearITPendingBit
000196  2100              MOVS     r1,#0                 ;2179
000198  f24c303a          MOV      r0,#0xc33a            ;2179
00019c  f7fffffe          BL       SDIO_ITConfig
0001a0  2000              MOVS     r0,#0                 ;2182
0001a2  4923              LDR      r1,|L22.560|
0001a4  6008              STR      r0,[r1,#0]            ;2182  ; NumberOfBytes
0001a6  2004              MOVS     r0,#4                 ;2183
0001a8  4925              LDR      r1,|L22.576|
0001aa  7008              STRB     r0,[r1,#0]            ;2183
0001ac  e7d7              B        |L22.350|
                  |L22.430|
0001ae  2020              MOVS     r0,#0x20              ;2187
0001b0  f7fffffe          BL       SDIO_GetITStatus
0001b4  b170              CBZ      r0,|L22.468|
0001b6  2020              MOVS     r0,#0x20              ;2189
0001b8  f7fffffe          BL       SDIO_ClearITPendingBit
0001bc  2100              MOVS     r1,#0                 ;2190
0001be  f24c303a          MOV      r0,#0xc33a            ;2190
0001c2  f7fffffe          BL       SDIO_ITConfig
0001c6  2000              MOVS     r0,#0                 ;2193
0001c8  4919              LDR      r1,|L22.560|
0001ca  6008              STR      r0,[r1,#0]            ;2193  ; NumberOfBytes
0001cc  2006              MOVS     r0,#6                 ;2194
0001ce  491c              LDR      r1,|L22.576|
0001d0  7008              STRB     r0,[r1,#0]            ;2194
0001d2  e7c4              B        |L22.350|
                  |L22.468|
0001d4  2010              MOVS     r0,#0x10              ;2198
0001d6  f7fffffe          BL       SDIO_GetITStatus
0001da  b170              CBZ      r0,|L22.506|
0001dc  2010              MOVS     r0,#0x10              ;2200
0001de  f7fffffe          BL       SDIO_ClearITPendingBit
0001e2  2100              MOVS     r1,#0                 ;2201
0001e4  f24c303a          MOV      r0,#0xc33a            ;2201
0001e8  f7fffffe          BL       SDIO_ITConfig
0001ec  2000              MOVS     r0,#0                 ;2204
0001ee  4910              LDR      r1,|L22.560|
0001f0  6008              STR      r0,[r1,#0]            ;2204  ; NumberOfBytes
0001f2  2005              MOVS     r0,#5                 ;2205
0001f4  4912              LDR      r1,|L22.576|
0001f6  7008              STRB     r0,[r1,#0]            ;2205
0001f8  e7b1              B        |L22.350|
                  |L22.506|
0001fa  f44f7000          MOV      r0,#0x200             ;2209
0001fe  f7fffffe          BL       SDIO_GetITStatus
000202  b178              CBZ      r0,|L22.548|
000204  f44f7000          MOV      r0,#0x200             ;2211
000208  f7fffffe          BL       SDIO_ClearITPendingBit
00020c  2100              MOVS     r1,#0                 ;2212
00020e  f24c303a          MOV      r0,#0xc33a            ;2212
000212  f7fffffe          BL       SDIO_ITConfig
000216  2000              MOVS     r0,#0                 ;2215
000218  4905              LDR      r1,|L22.560|
00021a  6008              STR      r0,[r1,#0]            ;2215  ; NumberOfBytes
00021c  2007              MOVS     r0,#7                 ;2216
00021e  4908              LDR      r1,|L22.576|
000220  7008              STRB     r0,[r1,#0]            ;2216
000222  e79c              B        |L22.350|
                  |L22.548|
000224  202a              MOVS     r0,#0x2a              ;2220
000226  e79a              B        |L22.350|
;;;2222   
                          ENDP

                  |L22.552|
                          DCD      DeviceMode
                  |L22.556|
                          DCD      DestBuffer
                  |L22.560|
                          DCD      NumberOfBytes
                  |L22.564|
                          DCD      TotalNumberOfBytes
                  |L22.568|
                          DCD      SrcBuffer
                  |L22.572|
                          DCD      StopCondition
                  |L22.576|
                          DCD      TransferError
                  |L22.580|
                          DCD      TransferEnd

                          AREA ||i.SD_ReadBlock||, CODE, READONLY, ALIGN=2

                  SD_ReadBlock PROC
;;;927      */
;;;928    SD_Error SD_ReadBlock(uint8_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;929    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;930      SD_Error errorstatus = SD_OK;
00000a  f04f082a          MOV      r8,#0x2a
;;;931      uint32_t count = 0, *tempbuff = (uint32_t *)readbuff;
00000e  f04f0900          MOV      r9,#0
000012  4635              MOV      r5,r6
;;;932      uint8_t power = 0;
000014  f04f0a00          MOV      r10,#0
;;;933    
;;;934      if (NULL == readbuff)
000018  b926              CBNZ     r6,|L23.36|
;;;935      {
;;;936        errorstatus = SD_INVALID_PARAMETER;
00001a  f04f0826          MOV      r8,#0x26
;;;937        return(errorstatus);
00001e  4640              MOV      r0,r8
                  |L23.32|
;;;938      }
;;;939    
;;;940      TransferError = SD_OK;
;;;941      TransferEnd = 0;
;;;942      TotalNumberOfBytes = 0;
;;;943    
;;;944      /*!< Clear all DPSM configuration */
;;;945      SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;946      SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;947      SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;948      SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;949      SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;950      SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;951      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;952      SDIO_DMACmd(DISABLE);
;;;953    
;;;954      if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;955      {
;;;956        errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;957        return(errorstatus);
;;;958      }
;;;959      
;;;960      if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;961      {
;;;962        BlockSize = 512;
;;;963        ReadAddr /= 512;
;;;964      }
;;;965      if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;966      {
;;;967        power = convert_from_bytes_to_power_of_two(BlockSize);
;;;968    
;;;969        /*!< Set Block Size for Card */
;;;970        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;971        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;972        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;973        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;974        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;975        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;976    
;;;977        errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;978    
;;;979        if (SD_OK != errorstatus)
;;;980        {
;;;981          return(errorstatus);
;;;982        }
;;;983      }
;;;984      else
;;;985      {
;;;986        errorstatus = SD_INVALID_PARAMETER;
;;;987        return(errorstatus);
;;;988      }
;;;989    
;;;990      SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;991      SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;992      SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;993      SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;994      SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;995      SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;996      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;997    
;;;998      TotalNumberOfBytes = BlockSize;
;;;999      StopCondition = 0;
;;;1000     DestBuffer = (uint32_t *)readbuff;
;;;1001   
;;;1002     /*!< Send CMD17 READ_SINGLE_BLOCK */
;;;1003     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
;;;1004     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
;;;1005     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1006     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1007     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1008     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1009   
;;;1010     errorstatus = CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);
;;;1011   
;;;1012     if (errorstatus != SD_OK)
;;;1013     {
;;;1014       return(errorstatus);
;;;1015     }
;;;1016     /*!< In case of single block transfer, no need of stop transfer at all.*/
;;;1017     if (DeviceMode == SD_POLLING_MODE)
;;;1018     {
;;;1019       /*!< Polling mode */
;;;1020       while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;1021       {
;;;1022         if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1023         {
;;;1024           for (count = 0; count < 8; count++)
;;;1025           {
;;;1026             *(tempbuff + count) = SDIO_ReadData();
;;;1027           }
;;;1028           tempbuff += 8;
;;;1029         }
;;;1030       }
;;;1031   
;;;1032       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1033       {
;;;1034         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1035         errorstatus = SD_DATA_TIMEOUT;
;;;1036         return(errorstatus);
;;;1037       }
;;;1038       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1039       {
;;;1040         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1041         errorstatus = SD_DATA_CRC_FAIL;
;;;1042         return(errorstatus);
;;;1043       }
;;;1044       else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1045       {
;;;1046         SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1047         errorstatus = SD_RX_OVERRUN;
;;;1048         return(errorstatus);
;;;1049       }
;;;1050       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1051       {
;;;1052         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1053         errorstatus = SD_START_BIT_ERR;
;;;1054         return(errorstatus);
;;;1055       }
;;;1056       while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;1057       {
;;;1058         *tempbuff = SDIO_ReadData();
;;;1059         tempbuff++;
;;;1060       }
;;;1061   
;;;1062       /*!< Clear all the static flags */
;;;1063       SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1064     }
;;;1065     else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1066     {
;;;1067       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
;;;1068       while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1069       {}
;;;1070       if (TransferError != SD_OK)
;;;1071       {
;;;1072         return(TransferError);
;;;1073       }
;;;1074     }
;;;1075     else if (DeviceMode == SD_DMA_MODE)
;;;1076     {
;;;1077       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
;;;1078       SDIO_DMACmd(ENABLE);
;;;1079       SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, BlockSize);
;;;1080       while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1081       {}
;;;1082       if (TransferError != SD_OK)
;;;1083       {
;;;1084         return(TransferError);
;;;1085       }
;;;1086     }
;;;1087     return(errorstatus);
;;;1088   }
000020  e8bd87f0          POP      {r4-r10,pc}
                  |L23.36|
000024  202a              MOVS     r0,#0x2a              ;940
000026  498a              LDR      r1,|L23.592|
000028  7008              STRB     r0,[r1,#0]            ;940
00002a  2000              MOVS     r0,#0                 ;941
00002c  4989              LDR      r1,|L23.596|
00002e  6008              STR      r0,[r1,#0]            ;941  ; TransferEnd
000030  4989              LDR      r1,|L23.600|
000032  6008              STR      r0,[r1,#0]            ;942  ; TotalNumberOfBytes
000034  4889              LDR      r0,|L23.604|
000036  498a              LDR      r1,|L23.608|
000038  6008              STR      r0,[r1,#0]            ;945  ; SDIO_DataInitStructure
00003a  2000              MOVS     r0,#0                 ;946
00003c  6048              STR      r0,[r1,#4]            ;946  ; SDIO_DataInitStructure
00003e  6088              STR      r0,[r1,#8]            ;947  ; SDIO_DataInitStructure
000040  60c8              STR      r0,[r1,#0xc]          ;948  ; SDIO_DataInitStructure
000042  6108              STR      r0,[r1,#0x10]         ;949  ; SDIO_DataInitStructure
000044  6148              STR      r0,[r1,#0x14]         ;950  ; SDIO_DataInitStructure
000046  4608              MOV      r0,r1                 ;951
000048  f7fffffe          BL       SDIO_DataConfig
00004c  2000              MOVS     r0,#0                 ;952
00004e  f7fffffe          BL       SDIO_DMACmd
000052  2000              MOVS     r0,#0                 ;954
000054  f7fffffe          BL       SDIO_GetResponse
000058  f0007000          AND      r0,r0,#0x2000000      ;954
00005c  b118              CBZ      r0,|L23.102|
00005e  f04f080e          MOV      r8,#0xe               ;956
000062  4640              MOV      r0,r8                 ;957
000064  e7dc              B        |L23.32|
                  |L23.102|
000066  487f              LDR      r0,|L23.612|
000068  6800              LDR      r0,[r0,#0]            ;960  ; CardType
00006a  2802              CMP      r0,#2                 ;960
00006c  d101              BNE      |L23.114|
00006e  0204              LSLS     r4,r0,#8              ;962
000070  0a7f              LSRS     r7,r7,#9              ;963
                  |L23.114|
000072  2c00              CMP      r4,#0                 ;965
000074  dd21              BLE      |L23.186|
000076  f5b46f00          CMP      r4,#0x800             ;965
00007a  dc1e              BGT      |L23.186|
00007c  1e60              SUBS     r0,r4,#1              ;965
00007e  4020              ANDS     r0,r0,r4              ;965
000080  b9d8              CBNZ     r0,|L23.186|
000082  4620              MOV      r0,r4                 ;967
000084  f7fffffe          BL       convert_from_bytes_to_power_of_two
000088  4682              MOV      r10,r0                ;967
00008a  4877              LDR      r0,|L23.616|
00008c  6004              STR      r4,[r0,#0]            ;970  ; SDIO_CmdInitStructure
00008e  2010              MOVS     r0,#0x10              ;971
000090  4975              LDR      r1,|L23.616|
000092  6048              STR      r0,[r1,#4]            ;971  ; SDIO_CmdInitStructure
000094  2040              MOVS     r0,#0x40              ;972
000096  6088              STR      r0,[r1,#8]            ;972  ; SDIO_CmdInitStructure
000098  2000              MOVS     r0,#0                 ;973
00009a  60c8              STR      r0,[r1,#0xc]          ;973  ; SDIO_CmdInitStructure
00009c  f44f6080          MOV      r0,#0x400             ;974
0000a0  6108              STR      r0,[r1,#0x10]         ;974  ; SDIO_CmdInitStructure
0000a2  4608              MOV      r0,r1                 ;975
0000a4  f7fffffe          BL       SDIO_SendCommand
0000a8  2010              MOVS     r0,#0x10              ;977
0000aa  f7fffffe          BL       CmdResp1Error
0000ae  4680              MOV      r8,r0                 ;977
0000b0  f1b80f2a          CMP      r8,#0x2a              ;979
0000b4  d005              BEQ      |L23.194|
0000b6  4640              MOV      r0,r8                 ;981
0000b8  e7b2              B        |L23.32|
                  |L23.186|
0000ba  f04f0826          MOV      r8,#0x26              ;986
0000be  4640              MOV      r0,r8                 ;987
0000c0  e7ae              B        |L23.32|
                  |L23.194|
0000c2  4866              LDR      r0,|L23.604|
0000c4  4966              LDR      r1,|L23.608|
0000c6  6008              STR      r0,[r1,#0]            ;990  ; SDIO_DataInitStructure
0000c8  4608              MOV      r0,r1                 ;991
0000ca  6044              STR      r4,[r0,#4]            ;991  ; SDIO_DataInitStructure
0000cc  ea4f100a          LSL      r0,r10,#4             ;992
0000d0  6088              STR      r0,[r1,#8]            ;992  ; SDIO_DataInitStructure
0000d2  2002              MOVS     r0,#2                 ;993
0000d4  60c8              STR      r0,[r1,#0xc]          ;993  ; SDIO_DataInitStructure
0000d6  2000              MOVS     r0,#0                 ;994
0000d8  6108              STR      r0,[r1,#0x10]         ;994  ; SDIO_DataInitStructure
0000da  2001              MOVS     r0,#1                 ;995
0000dc  6148              STR      r0,[r1,#0x14]         ;995  ; SDIO_DataInitStructure
0000de  4608              MOV      r0,r1                 ;996
0000e0  f7fffffe          BL       SDIO_DataConfig
0000e4  485c              LDR      r0,|L23.600|
0000e6  6004              STR      r4,[r0,#0]            ;998  ; TotalNumberOfBytes
0000e8  2000              MOVS     r0,#0                 ;999
0000ea  4960              LDR      r1,|L23.620|
0000ec  6008              STR      r0,[r1,#0]            ;999  ; StopCondition
0000ee  4860              LDR      r0,|L23.624|
0000f0  6006              STR      r6,[r0,#0]            ;1000  ; DestBuffer
0000f2  485d              LDR      r0,|L23.616|
0000f4  6007              STR      r7,[r0,#0]            ;1003  ; SDIO_CmdInitStructure
0000f6  2011              MOVS     r0,#0x11              ;1004
0000f8  495b              LDR      r1,|L23.616|
0000fa  6048              STR      r0,[r1,#4]            ;1004  ; SDIO_CmdInitStructure
0000fc  2040              MOVS     r0,#0x40              ;1005
0000fe  6088              STR      r0,[r1,#8]            ;1005  ; SDIO_CmdInitStructure
000100  2000              MOVS     r0,#0                 ;1006
000102  60c8              STR      r0,[r1,#0xc]          ;1006  ; SDIO_CmdInitStructure
000104  f44f6080          MOV      r0,#0x400             ;1007
000108  6108              STR      r0,[r1,#0x10]         ;1007  ; SDIO_CmdInitStructure
00010a  4608              MOV      r0,r1                 ;1008
00010c  f7fffffe          BL       SDIO_SendCommand
000110  2011              MOVS     r0,#0x11              ;1010
000112  f7fffffe          BL       CmdResp1Error
000116  4680              MOV      r8,r0                 ;1010
000118  f1b80f2a          CMP      r8,#0x2a              ;1012
00011c  d001              BEQ      |L23.290|
00011e  4640              MOV      r0,r8                 ;1014
000120  e77e              B        |L23.32|
                  |L23.290|
000122  4854              LDR      r0,|L23.628|
000124  6800              LDR      r0,[r0,#0]            ;1017  ; DeviceMode
000126  2802              CMP      r0,#2                 ;1017
000128  d157              BNE      |L23.474|
00012a  e011              B        |L23.336|
                  |L23.300|
00012c  f44f4000          MOV      r0,#0x8000            ;1022
000130  f7fffffe          BL       SDIO_GetFlagStatus
000134  b160              CBZ      r0,|L23.336|
000136  f04f0900          MOV      r9,#0                 ;1024
00013a  e005              B        |L23.328|
                  |L23.316|
00013c  f7fffffe          BL       SDIO_ReadData
000140  f8450029          STR      r0,[r5,r9,LSL #2]     ;1026
000144  f1090901          ADD      r9,r9,#1              ;1024
                  |L23.328|
000148  f1b90f08          CMP      r9,#8                 ;1024
00014c  d3f6              BCC      |L23.316|
00014e  3520              ADDS     r5,r5,#0x20           ;1028
                  |L23.336|
000150  4849              LDR      r0,|L23.632|
000152  6b40              LDR      r0,[r0,#0x34]         ;1020
000154  f240612a          MOV      r1,#0x62a             ;1020
000158  4008              ANDS     r0,r0,r1              ;1020
00015a  2800              CMP      r0,#0                 ;1020
00015c  d0e6              BEQ      |L23.300|
00015e  2008              MOVS     r0,#8                 ;1032
000160  f7fffffe          BL       SDIO_GetFlagStatus
000164  b130              CBZ      r0,|L23.372|
000166  2008              MOVS     r0,#8                 ;1034
000168  f7fffffe          BL       SDIO_ClearFlag
00016c  f04f0804          MOV      r8,#4                 ;1035
000170  4640              MOV      r0,r8                 ;1036
000172  e755              B        |L23.32|
                  |L23.372|
000174  2002              MOVS     r0,#2                 ;1038
000176  f7fffffe          BL       SDIO_GetFlagStatus
00017a  b130              CBZ      r0,|L23.394|
00017c  2002              MOVS     r0,#2                 ;1040
00017e  f7fffffe          BL       SDIO_ClearFlag
000182  f04f0802          MOV      r8,#2                 ;1041
000186  4640              MOV      r0,r8                 ;1042
000188  e74a              B        |L23.32|
                  |L23.394|
00018a  2020              MOVS     r0,#0x20              ;1044
00018c  f7fffffe          BL       SDIO_GetFlagStatus
000190  b130              CBZ      r0,|L23.416|
000192  2020              MOVS     r0,#0x20              ;1046
000194  f7fffffe          BL       SDIO_ClearFlag
000198  f04f0806          MOV      r8,#6                 ;1047
00019c  4640              MOV      r0,r8                 ;1048
00019e  e73f              B        |L23.32|
                  |L23.416|
0001a0  f44f7000          MOV      r0,#0x200             ;1050
0001a4  f7fffffe          BL       SDIO_GetFlagStatus
0001a8  b138              CBZ      r0,|L23.442|
0001aa  f44f7000          MOV      r0,#0x200             ;1052
0001ae  f7fffffe          BL       SDIO_ClearFlag
0001b2  f04f0807          MOV      r8,#7                 ;1053
0001b6  4640              MOV      r0,r8                 ;1054
0001b8  e732              B        |L23.32|
                  |L23.442|
0001ba  e003              B        |L23.452|
                  |L23.444|
0001bc  f7fffffe          BL       SDIO_ReadData
0001c0  6028              STR      r0,[r5,#0]            ;1058
0001c2  1d2d              ADDS     r5,r5,#4              ;1059
                  |L23.452|
0001c4  f44f1000          MOV      r0,#0x200000          ;1056
0001c8  f7fffffe          BL       SDIO_GetFlagStatus
0001cc  2800              CMP      r0,#0                 ;1056
0001ce  d1f5              BNE      |L23.444|
0001d0  f24050ff          MOV      r0,#0x5ff             ;1063
0001d4  f7fffffe          BL       SDIO_ClearFlag
0001d8  e038              B        |L23.588|
                  |L23.474|
0001da  4826              LDR      r0,|L23.628|
0001dc  6800              LDR      r0,[r0,#0]            ;1065  ; DeviceMode
0001de  2801              CMP      r0,#1                 ;1065
0001e0  d113              BNE      |L23.522|
0001e2  2101              MOVS     r1,#1                 ;1067
0001e4  f248302a          MOV      r0,#0x832a            ;1067
0001e8  f7fffffe          BL       SDIO_ITConfig
0001ec  bf00              NOP                            ;1068
                  |L23.494|
0001ee  4819              LDR      r0,|L23.596|
0001f0  6800              LDR      r0,[r0,#0]            ;1068  ; TransferEnd
0001f2  b918              CBNZ     r0,|L23.508|
0001f4  4816              LDR      r0,|L23.592|
0001f6  7800              LDRB     r0,[r0,#0]            ;1068  ; TransferError
0001f8  282a              CMP      r0,#0x2a              ;1068
0001fa  d0f8              BEQ      |L23.494|
                  |L23.508|
0001fc  4814              LDR      r0,|L23.592|
0001fe  7800              LDRB     r0,[r0,#0]            ;1070  ; TransferError
000200  282a              CMP      r0,#0x2a              ;1070
000202  d023              BEQ      |L23.588|
000204  4812              LDR      r0,|L23.592|
000206  7800              LDRB     r0,[r0,#0]            ;1072  ; TransferError
000208  e70a              B        |L23.32|
                  |L23.522|
00020a  481a              LDR      r0,|L23.628|
00020c  6800              LDR      r0,[r0,#0]            ;1075  ; DeviceMode
00020e  b9e8              CBNZ     r0,|L23.588|
000210  2101              MOVS     r1,#1                 ;1077
000212  f240302a          MOV      r0,#0x32a             ;1077
000216  f7fffffe          BL       SDIO_ITConfig
00021a  2001              MOVS     r0,#1                 ;1078
00021c  f7fffffe          BL       SDIO_DMACmd
000220  4621              MOV      r1,r4                 ;1079
000222  4630              MOV      r0,r6                 ;1079
000224  f7fffffe          BL       SD_LowLevel_DMA_RxConfig
000228  bf00              NOP                            ;1080
                  |L23.554|
00022a  f7fffffe          BL       SD_DMAEndOfTransferStatus
00022e  b930              CBNZ     r0,|L23.574|
000230  4808              LDR      r0,|L23.596|
000232  6800              LDR      r0,[r0,#0]            ;1080  ; TransferEnd
000234  b918              CBNZ     r0,|L23.574|
000236  4806              LDR      r0,|L23.592|
000238  7800              LDRB     r0,[r0,#0]            ;1080  ; TransferError
00023a  282a              CMP      r0,#0x2a              ;1080
00023c  d0f5              BEQ      |L23.554|
                  |L23.574|
00023e  4804              LDR      r0,|L23.592|
000240  7800              LDRB     r0,[r0,#0]            ;1082  ; TransferError
000242  282a              CMP      r0,#0x2a              ;1082
000244  d002              BEQ      |L23.588|
000246  4802              LDR      r0,|L23.592|
000248  7800              LDRB     r0,[r0,#0]            ;1084  ; TransferError
00024a  e6e9              B        |L23.32|
                  |L23.588|
00024c  4640              MOV      r0,r8                 ;1087
00024e  e6e7              B        |L23.32|
;;;1089   
                          ENDP

                  |L23.592|
                          DCD      TransferError
                  |L23.596|
                          DCD      TransferEnd
                  |L23.600|
                          DCD      TotalNumberOfBytes
                  |L23.604|
                          DCD      0x000fffff
                  |L23.608|
                          DCD      SDIO_DataInitStructure
                  |L23.612|
                          DCD      CardType
                  |L23.616|
                          DCD      SDIO_CmdInitStructure
                  |L23.620|
                          DCD      StopCondition
                  |L23.624|
                          DCD      DestBuffer
                  |L23.628|
                          DCD      DeviceMode
                  |L23.632|
                          DCD      0x40018000

                          AREA ||i.SD_ReadMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_ReadMultiBlocks PROC
;;;1097     */
;;;1098   SD_Error SD_ReadMultiBlocks(uint8_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1099   {
000004  4607              MOV      r7,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;1100     SD_Error errorstatus = SD_OK;
00000c  f04f082a          MOV      r8,#0x2a
;;;1101     uint32_t count = 0, *tempbuff = (uint32_t *)readbuff;
000010  f04f0a00          MOV      r10,#0
000014  463e              MOV      r6,r7
;;;1102     uint8_t power = 0;
000016  f04f0b00          MOV      r11,#0
;;;1103   
;;;1104     if (NULL == readbuff)
00001a  b927              CBNZ     r7,|L24.38|
;;;1105     {
;;;1106       errorstatus = SD_INVALID_PARAMETER;
00001c  f04f0826          MOV      r8,#0x26
;;;1107       return(errorstatus);
000020  4640              MOV      r0,r8
                  |L24.34|
;;;1108     }
;;;1109   
;;;1110     TransferError = SD_OK;
;;;1111     TransferEnd = 0;
;;;1112     TotalNumberOfBytes = 0;
;;;1113   
;;;1114     /*!< Clear all DPSM configuration */
;;;1115     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1116     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1117     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1118     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1119     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1120     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1121     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1122     SDIO_DMACmd(DISABLE);
;;;1123   
;;;1124     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1125     {
;;;1126       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1127       return(errorstatus);
;;;1128     }
;;;1129   
;;;1130     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1131     {
;;;1132       BlockSize = 512;
;;;1133       ReadAddr /= 512;
;;;1134     }
;;;1135     
;;;1136     if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
;;;1137     {
;;;1138       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1139   
;;;1140       /*!< Set Block Size for Card */
;;;1141       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1142       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1143       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1144       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1145       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1146       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1147   
;;;1148       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1149   
;;;1150       if (SD_OK != errorstatus)
;;;1151       {
;;;1152         return(errorstatus);
;;;1153       }
;;;1154     }
;;;1155     else
;;;1156     {
;;;1157       errorstatus = SD_INVALID_PARAMETER;
;;;1158       return(errorstatus);
;;;1159     }
;;;1160   
;;;1161     if (NumberOfBlocks > 1)
;;;1162     {
;;;1163       /*!< Common to all modes */
;;;1164       if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
;;;1165       {
;;;1166         errorstatus = SD_INVALID_PARAMETER;
;;;1167         return(errorstatus);
;;;1168       }
;;;1169   
;;;1170       TotalNumberOfBytes = NumberOfBlocks * BlockSize;
;;;1171       StopCondition = 1;
;;;1172       DestBuffer = (uint32_t *)readbuff;
;;;1173   
;;;1174       SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1175       SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1176       SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1177       SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1178       SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1179       SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1180       SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1181   
;;;1182       /*!< Send CMD18 READ_MULT_BLOCK with argument data address */
;;;1183       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
;;;1184       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
;;;1185       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1186       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1187       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1188       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1189   
;;;1190       errorstatus = CmdResp1Error(SD_CMD_READ_MULT_BLOCK);
;;;1191   
;;;1192       if (errorstatus != SD_OK)
;;;1193       {
;;;1194         return(errorstatus);
;;;1195       }
;;;1196   
;;;1197       if (DeviceMode == SD_POLLING_MODE)
;;;1198       {
;;;1199         /*!< Polling mode */
;;;1200         while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1201         {
;;;1202           if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1203           {
;;;1204             for (count = 0; count < SD_HALFFIFO; count++)
;;;1205             {
;;;1206               *(tempbuff + count) = SDIO_ReadData();
;;;1207             }
;;;1208             tempbuff += SD_HALFFIFO;
;;;1209           }
;;;1210         }
;;;1211   
;;;1212         if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1213         {
;;;1214           SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1215           errorstatus = SD_DATA_TIMEOUT;
;;;1216           return(errorstatus);
;;;1217         }
;;;1218         else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1219         {
;;;1220           SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1221           errorstatus = SD_DATA_CRC_FAIL;
;;;1222           return(errorstatus);
;;;1223         }
;;;1224         else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1225         {
;;;1226           SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1227           errorstatus = SD_RX_OVERRUN;
;;;1228           return(errorstatus);
;;;1229         }
;;;1230         else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1231         {
;;;1232           SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1233           errorstatus = SD_START_BIT_ERR;
;;;1234           return(errorstatus);
;;;1235         }
;;;1236         while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;1237         {
;;;1238           *tempbuff = SDIO_ReadData();
;;;1239           tempbuff++;
;;;1240         }
;;;1241   
;;;1242         if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
;;;1243         {
;;;1244           /*!< In Case Of SD-CARD Send Command STOP_TRANSMISSION */
;;;1245           if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType))
;;;1246           {
;;;1247             /*!< Send CMD12 STOP_TRANSMISSION */
;;;1248             SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;1249             SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
;;;1250             SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1251             SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1252             SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1253             SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1254   
;;;1255             errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
;;;1256   
;;;1257             if (errorstatus != SD_OK)
;;;1258             {
;;;1259               return(errorstatus);
;;;1260             }
;;;1261           }
;;;1262         }
;;;1263         /*!< Clear all the static flags */
;;;1264         SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1265       }
;;;1266       else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1267       {
;;;1268         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
;;;1269         while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1270         {}
;;;1271         if (TransferError != SD_OK)
;;;1272         {
;;;1273           return(TransferError);
;;;1274         }
;;;1275       }
;;;1276       else if (DeviceMode == SD_DMA_MODE)
;;;1277       {
;;;1278         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
;;;1279         SDIO_DMACmd(ENABLE);
;;;1280         SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, (NumberOfBlocks * BlockSize));
;;;1281         while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1282         {}
;;;1283         if (TransferError != SD_OK)
;;;1284         {
;;;1285           return(TransferError);
;;;1286         }
;;;1287       }
;;;1288     }
;;;1289     return(errorstatus);
;;;1290   }
000022  e8bd9ff0          POP      {r4-r12,pc}
                  |L24.38|
000026  202a              MOVS     r0,#0x2a              ;1110
000028  49a7              LDR      r1,|L24.712|
00002a  7008              STRB     r0,[r1,#0]            ;1110
00002c  2000              MOVS     r0,#0                 ;1111
00002e  49a7              LDR      r1,|L24.716|
000030  6008              STR      r0,[r1,#0]            ;1111  ; TransferEnd
000032  49a7              LDR      r1,|L24.720|
000034  6008              STR      r0,[r1,#0]            ;1112  ; TotalNumberOfBytes
000036  48a7              LDR      r0,|L24.724|
000038  49a7              LDR      r1,|L24.728|
00003a  6008              STR      r0,[r1,#0]            ;1115  ; SDIO_DataInitStructure
00003c  2000              MOVS     r0,#0                 ;1116
00003e  6048              STR      r0,[r1,#4]            ;1116  ; SDIO_DataInitStructure
000040  6088              STR      r0,[r1,#8]            ;1117  ; SDIO_DataInitStructure
000042  60c8              STR      r0,[r1,#0xc]          ;1118  ; SDIO_DataInitStructure
000044  6108              STR      r0,[r1,#0x10]         ;1119  ; SDIO_DataInitStructure
000046  6148              STR      r0,[r1,#0x14]         ;1120  ; SDIO_DataInitStructure
000048  4608              MOV      r0,r1                 ;1121
00004a  f7fffffe          BL       SDIO_DataConfig
00004e  2000              MOVS     r0,#0                 ;1122
000050  f7fffffe          BL       SDIO_DMACmd
000054  2000              MOVS     r0,#0                 ;1124
000056  f7fffffe          BL       SDIO_GetResponse
00005a  f0007000          AND      r0,r0,#0x2000000      ;1124
00005e  b118              CBZ      r0,|L24.104|
000060  f04f080e          MOV      r8,#0xe               ;1126
000064  4640              MOV      r0,r8                 ;1127
000066  e7dc              B        |L24.34|
                  |L24.104|
000068  489c              LDR      r0,|L24.732|
00006a  6800              LDR      r0,[r0,#0]            ;1130  ; CardType
00006c  2802              CMP      r0,#2                 ;1130
00006e  d102              BNE      |L24.118|
000070  0204              LSLS     r4,r0,#8              ;1132
000072  ea4f2959          LSR      r9,r9,#9              ;1133
                  |L24.118|
000076  2c00              CMP      r4,#0                 ;1136
000078  dd21              BLE      |L24.190|
00007a  f5b46f00          CMP      r4,#0x800             ;1136
00007e  dc1e              BGT      |L24.190|
000080  1e60              SUBS     r0,r4,#1              ;1136
000082  4020              ANDS     r0,r0,r4              ;1136
000084  b9d8              CBNZ     r0,|L24.190|
000086  4620              MOV      r0,r4                 ;1138
000088  f7fffffe          BL       convert_from_bytes_to_power_of_two
00008c  4683              MOV      r11,r0                ;1138
00008e  4894              LDR      r0,|L24.736|
000090  6004              STR      r4,[r0,#0]            ;1141  ; SDIO_CmdInitStructure
000092  2010              MOVS     r0,#0x10              ;1142
000094  4992              LDR      r1,|L24.736|
000096  6048              STR      r0,[r1,#4]            ;1142  ; SDIO_CmdInitStructure
000098  2040              MOVS     r0,#0x40              ;1143
00009a  6088              STR      r0,[r1,#8]            ;1143  ; SDIO_CmdInitStructure
00009c  2000              MOVS     r0,#0                 ;1144
00009e  60c8              STR      r0,[r1,#0xc]          ;1144  ; SDIO_CmdInitStructure
0000a0  f44f6080          MOV      r0,#0x400             ;1145
0000a4  6108              STR      r0,[r1,#0x10]         ;1145  ; SDIO_CmdInitStructure
0000a6  4608              MOV      r0,r1                 ;1146
0000a8  f7fffffe          BL       SDIO_SendCommand
0000ac  2010              MOVS     r0,#0x10              ;1148
0000ae  f7fffffe          BL       CmdResp1Error
0000b2  4680              MOV      r8,r0                 ;1148
0000b4  f1b80f2a          CMP      r8,#0x2a              ;1150
0000b8  d005              BEQ      |L24.198|
0000ba  4640              MOV      r0,r8                 ;1152
0000bc  e7b1              B        |L24.34|
                  |L24.190|
0000be  f04f0826          MOV      r8,#0x26              ;1157
0000c2  4640              MOV      r0,r8                 ;1158
0000c4  e7ad              B        |L24.34|
                  |L24.198|
0000c6  2d01              CMP      r5,#1                 ;1161
0000c8  d970              BLS      |L24.428|
0000ca  fb05f004          MUL      r0,r5,r4              ;1164
0000ce  f1b07f00          CMP      r0,#0x2000000         ;1164
0000d2  d303              BCC      |L24.220|
0000d4  f04f0826          MOV      r8,#0x26              ;1166
0000d8  4640              MOV      r0,r8                 ;1167
0000da  e7a2              B        |L24.34|
                  |L24.220|
0000dc  fb05f004          MUL      r0,r5,r4              ;1170
0000e0  497b              LDR      r1,|L24.720|
0000e2  6008              STR      r0,[r1,#0]            ;1170  ; TotalNumberOfBytes
0000e4  2001              MOVS     r0,#1                 ;1171
0000e6  497f              LDR      r1,|L24.740|
0000e8  6008              STR      r0,[r1,#0]            ;1171  ; StopCondition
0000ea  487f              LDR      r0,|L24.744|
0000ec  6007              STR      r7,[r0,#0]            ;1172  ; DestBuffer
0000ee  4879              LDR      r0,|L24.724|
0000f0  4979              LDR      r1,|L24.728|
0000f2  6008              STR      r0,[r1,#0]            ;1174  ; SDIO_DataInitStructure
0000f4  fb05f004          MUL      r0,r5,r4              ;1175
0000f8  6048              STR      r0,[r1,#4]            ;1175  ; SDIO_DataInitStructure
0000fa  ea4f100b          LSL      r0,r11,#4             ;1176
0000fe  6088              STR      r0,[r1,#8]            ;1176  ; SDIO_DataInitStructure
000100  2002              MOVS     r0,#2                 ;1177
000102  60c8              STR      r0,[r1,#0xc]          ;1177  ; SDIO_DataInitStructure
000104  2000              MOVS     r0,#0                 ;1178
000106  6108              STR      r0,[r1,#0x10]         ;1178  ; SDIO_DataInitStructure
000108  2001              MOVS     r0,#1                 ;1179
00010a  6148              STR      r0,[r1,#0x14]         ;1179  ; SDIO_DataInitStructure
00010c  4608              MOV      r0,r1                 ;1180
00010e  f7fffffe          BL       SDIO_DataConfig
000112  4873              LDR      r0,|L24.736|
000114  f8c09000          STR      r9,[r0,#0]            ;1183  ; SDIO_CmdInitStructure
000118  2012              MOVS     r0,#0x12              ;1184
00011a  4971              LDR      r1,|L24.736|
00011c  6048              STR      r0,[r1,#4]            ;1184  ; SDIO_CmdInitStructure
00011e  2040              MOVS     r0,#0x40              ;1185
000120  6088              STR      r0,[r1,#8]            ;1185  ; SDIO_CmdInitStructure
000122  2000              MOVS     r0,#0                 ;1186
000124  60c8              STR      r0,[r1,#0xc]          ;1186  ; SDIO_CmdInitStructure
000126  f44f6080          MOV      r0,#0x400             ;1187
00012a  6108              STR      r0,[r1,#0x10]         ;1187  ; SDIO_CmdInitStructure
00012c  4608              MOV      r0,r1                 ;1188
00012e  f7fffffe          BL       SDIO_SendCommand
000132  2012              MOVS     r0,#0x12              ;1190
000134  f7fffffe          BL       CmdResp1Error
000138  4680              MOV      r8,r0                 ;1190
00013a  f1b80f2a          CMP      r8,#0x2a              ;1192
00013e  d001              BEQ      |L24.324|
000140  4640              MOV      r0,r8                 ;1194
000142  e76e              B        |L24.34|
                  |L24.324|
000144  4869              LDR      r0,|L24.748|
000146  6800              LDR      r0,[r0,#0]            ;1197  ; DeviceMode
000148  2802              CMP      r0,#2                 ;1197
00014a  d17b              BNE      |L24.580|
00014c  e011              B        |L24.370|
                  |L24.334|
00014e  f44f4000          MOV      r0,#0x8000            ;1202
000152  f7fffffe          BL       SDIO_GetFlagStatus
000156  b160              CBZ      r0,|L24.370|
000158  f04f0a00          MOV      r10,#0                ;1204
00015c  e005              B        |L24.362|
                  |L24.350|
00015e  f7fffffe          BL       SDIO_ReadData
000162  f846002a          STR      r0,[r6,r10,LSL #2]    ;1206
000166  f10a0a01          ADD      r10,r10,#1            ;1204
                  |L24.362|
00016a  f1ba0f08          CMP      r10,#8                ;1204
00016e  d3f6              BCC      |L24.350|
000170  3620              ADDS     r6,r6,#0x20           ;1208
                  |L24.370|
000172  485f              LDR      r0,|L24.752|
000174  6b40              LDR      r0,[r0,#0x34]         ;1200
000176  f240312a          MOV      r1,#0x32a             ;1200
00017a  4008              ANDS     r0,r0,r1              ;1200
00017c  2800              CMP      r0,#0                 ;1200
00017e  d0e6              BEQ      |L24.334|
000180  2008              MOVS     r0,#8                 ;1212
000182  f7fffffe          BL       SDIO_GetFlagStatus
000186  b130              CBZ      r0,|L24.406|
000188  2008              MOVS     r0,#8                 ;1214
00018a  f7fffffe          BL       SDIO_ClearFlag
00018e  f04f0804          MOV      r8,#4                 ;1215
000192  4640              MOV      r0,r8                 ;1216
000194  e745              B        |L24.34|
                  |L24.406|
000196  2002              MOVS     r0,#2                 ;1218
000198  f7fffffe          BL       SDIO_GetFlagStatus
00019c  b138              CBZ      r0,|L24.430|
00019e  2002              MOVS     r0,#2                 ;1220
0001a0  f7fffffe          BL       SDIO_ClearFlag
0001a4  f04f0802          MOV      r8,#2                 ;1221
0001a8  4640              MOV      r0,r8                 ;1222
0001aa  e73a              B        |L24.34|
                  |L24.428|
0001ac  e08a              B        |L24.708|
                  |L24.430|
0001ae  2020              MOVS     r0,#0x20              ;1224
0001b0  f7fffffe          BL       SDIO_GetFlagStatus
0001b4  b130              CBZ      r0,|L24.452|
0001b6  2020              MOVS     r0,#0x20              ;1226
0001b8  f7fffffe          BL       SDIO_ClearFlag
0001bc  f04f0806          MOV      r8,#6                 ;1227
0001c0  4640              MOV      r0,r8                 ;1228
0001c2  e72e              B        |L24.34|
                  |L24.452|
0001c4  f44f7000          MOV      r0,#0x200             ;1230
0001c8  f7fffffe          BL       SDIO_GetFlagStatus
0001cc  b138              CBZ      r0,|L24.478|
0001ce  f44f7000          MOV      r0,#0x200             ;1232
0001d2  f7fffffe          BL       SDIO_ClearFlag
0001d6  f04f0807          MOV      r8,#7                 ;1233
0001da  4640              MOV      r0,r8                 ;1234
0001dc  e721              B        |L24.34|
                  |L24.478|
0001de  e003              B        |L24.488|
                  |L24.480|
0001e0  f7fffffe          BL       SDIO_ReadData
0001e4  6030              STR      r0,[r6,#0]            ;1238
0001e6  1d36              ADDS     r6,r6,#4              ;1239
                  |L24.488|
0001e8  f44f1000          MOV      r0,#0x200000          ;1236
0001ec  f7fffffe          BL       SDIO_GetFlagStatus
0001f0  2800              CMP      r0,#0                 ;1236
0001f2  d1f5              BNE      |L24.480|
0001f4  f44f7080          MOV      r0,#0x100             ;1242
0001f8  f7fffffe          BL       SDIO_GetFlagStatus
0001fc  b318              CBZ      r0,|L24.582|
0001fe  4837              LDR      r0,|L24.732|
000200  6800              LDR      r0,[r0,#0]            ;1245  ; CardType
000202  b138              CBZ      r0,|L24.532|
000204  4835              LDR      r0,|L24.732|
000206  6800              LDR      r0,[r0,#0]            ;1245  ; CardType
000208  2802              CMP      r0,#2                 ;1245
00020a  d003              BEQ      |L24.532|
00020c  4833              LDR      r0,|L24.732|
00020e  6800              LDR      r0,[r0,#0]            ;1245  ; CardType
000210  2801              CMP      r0,#1                 ;1245
000212  d118              BNE      |L24.582|
                  |L24.532|
000214  2000              MOVS     r0,#0                 ;1248
000216  4932              LDR      r1,|L24.736|
000218  6008              STR      r0,[r1,#0]            ;1248  ; SDIO_CmdInitStructure
00021a  200c              MOVS     r0,#0xc               ;1249
00021c  6048              STR      r0,[r1,#4]            ;1249  ; SDIO_CmdInitStructure
00021e  2040              MOVS     r0,#0x40              ;1250
000220  6088              STR      r0,[r1,#8]            ;1250  ; SDIO_CmdInitStructure
000222  2000              MOVS     r0,#0                 ;1251
000224  60c8              STR      r0,[r1,#0xc]          ;1251  ; SDIO_CmdInitStructure
000226  f44f6080          MOV      r0,#0x400             ;1252
00022a  6108              STR      r0,[r1,#0x10]         ;1252  ; SDIO_CmdInitStructure
00022c  4608              MOV      r0,r1                 ;1253
00022e  f7fffffe          BL       SDIO_SendCommand
000232  200c              MOVS     r0,#0xc               ;1255
000234  f7fffffe          BL       CmdResp1Error
000238  4680              MOV      r8,r0                 ;1255
00023a  f1b80f2a          CMP      r8,#0x2a              ;1257
00023e  d002              BEQ      |L24.582|
000240  4640              MOV      r0,r8                 ;1259
000242  e6ee              B        |L24.34|
                  |L24.580|
000244  e004              B        |L24.592|
                  |L24.582|
000246  f24050ff          MOV      r0,#0x5ff             ;1264
00024a  f7fffffe          BL       SDIO_ClearFlag
00024e  e039              B        |L24.708|
                  |L24.592|
000250  4826              LDR      r0,|L24.748|
000252  6800              LDR      r0,[r0,#0]            ;1266  ; DeviceMode
000254  2801              CMP      r0,#1                 ;1266
000256  d113              BNE      |L24.640|
000258  2101              MOVS     r1,#1                 ;1268
00025a  f248302a          MOV      r0,#0x832a            ;1268
00025e  f7fffffe          BL       SDIO_ITConfig
000262  bf00              NOP                            ;1269
                  |L24.612|
000264  4819              LDR      r0,|L24.716|
000266  6800              LDR      r0,[r0,#0]            ;1269  ; TransferEnd
000268  b918              CBNZ     r0,|L24.626|
00026a  4817              LDR      r0,|L24.712|
00026c  7800              LDRB     r0,[r0,#0]            ;1269  ; TransferError
00026e  282a              CMP      r0,#0x2a              ;1269
000270  d0f8              BEQ      |L24.612|
                  |L24.626|
000272  4815              LDR      r0,|L24.712|
000274  7800              LDRB     r0,[r0,#0]            ;1271  ; TransferError
000276  282a              CMP      r0,#0x2a              ;1271
000278  d024              BEQ      |L24.708|
00027a  4813              LDR      r0,|L24.712|
00027c  7800              LDRB     r0,[r0,#0]            ;1273  ; TransferError
00027e  e6d0              B        |L24.34|
                  |L24.640|
000280  481a              LDR      r0,|L24.748|
000282  6800              LDR      r0,[r0,#0]            ;1276  ; DeviceMode
000284  b9f0              CBNZ     r0,|L24.708|
000286  2101              MOVS     r1,#1                 ;1278
000288  f240302a          MOV      r0,#0x32a             ;1278
00028c  f7fffffe          BL       SDIO_ITConfig
000290  2001              MOVS     r0,#1                 ;1279
000292  f7fffffe          BL       SDIO_DMACmd
000296  fb05f104          MUL      r1,r5,r4              ;1280
00029a  4638              MOV      r0,r7                 ;1280
00029c  f7fffffe          BL       SD_LowLevel_DMA_RxConfig
0002a0  bf00              NOP                            ;1281
                  |L24.674|
0002a2  f7fffffe          BL       SD_DMAEndOfTransferStatus
0002a6  b930              CBNZ     r0,|L24.694|
0002a8  4808              LDR      r0,|L24.716|
0002aa  6800              LDR      r0,[r0,#0]            ;1281  ; TransferEnd
0002ac  b918              CBNZ     r0,|L24.694|
0002ae  4806              LDR      r0,|L24.712|
0002b0  7800              LDRB     r0,[r0,#0]            ;1281  ; TransferError
0002b2  282a              CMP      r0,#0x2a              ;1281
0002b4  d0f5              BEQ      |L24.674|
                  |L24.694|
0002b6  4804              LDR      r0,|L24.712|
0002b8  7800              LDRB     r0,[r0,#0]            ;1283  ; TransferError
0002ba  282a              CMP      r0,#0x2a              ;1283
0002bc  d002              BEQ      |L24.708|
0002be  4802              LDR      r0,|L24.712|
0002c0  7800              LDRB     r0,[r0,#0]            ;1285  ; TransferError
0002c2  e6ae              B        |L24.34|
                  |L24.708|
0002c4  4640              MOV      r0,r8                 ;1289
0002c6  e6ac              B        |L24.34|
;;;1291   
                          ENDP

                  |L24.712|
                          DCD      TransferError
                  |L24.716|
                          DCD      TransferEnd
                  |L24.720|
                          DCD      TotalNumberOfBytes
                  |L24.724|
                          DCD      0x000fffff
                  |L24.728|
                          DCD      SDIO_DataInitStructure
                  |L24.732|
                          DCD      CardType
                  |L24.736|
                          DCD      SDIO_CmdInitStructure
                  |L24.740|
                          DCD      StopCondition
                  |L24.744|
                          DCD      DestBuffer
                  |L24.748|
                          DCD      DeviceMode
                  |L24.752|
                          DCD      0x40018000

                          AREA ||i.SD_SelectDeselect||, CODE, READONLY, ALIGN=2

                  SD_SelectDeselect PROC
;;;903      */
;;;904    SD_Error SD_SelectDeselect(uint32_t addr)
000000  b570              PUSH     {r4-r6,lr}
;;;905    {
000002  4604              MOV      r4,r0
;;;906      SD_Error errorstatus = SD_OK;
000004  252a              MOVS     r5,#0x2a
;;;907    
;;;908      /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
;;;909      SDIO_CmdInitStructure.SDIO_Argument =  addr;
000006  480a              LDR      r0,|L25.48|
000008  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;910      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
00000a  2007              MOVS     r0,#7
00000c  4908              LDR      r1,|L25.48|
00000e  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;911      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000010  2040              MOVS     r0,#0x40
000012  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;912      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000014  2000              MOVS     r0,#0
000016  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;913      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000018  f44f6080          MOV      r0,#0x400
00001c  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;914      SDIO_SendCommand(&SDIO_CmdInitStructure);
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       SDIO_SendCommand
;;;915    
;;;916      errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CmdResp1Error
00002a  4605              MOV      r5,r0
;;;917    
;;;918      return(errorstatus);
00002c  4628              MOV      r0,r5
;;;919    }
00002e  bd70              POP      {r4-r6,pc}
;;;920    
                          ENDP

                  |L25.48|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_SendSDStatus||, CODE, READONLY, ALIGN=2

                  SD_SendSDStatus PROC
;;;1973     */
;;;1974   SD_Error SD_SendSDStatus(uint32_t *psdstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1975   {
000002  4604              MOV      r4,r0
;;;1976     SD_Error errorstatus = SD_OK;
000004  262a              MOVS     r6,#0x2a
;;;1977     uint32_t count = 0;
000006  2500              MOVS     r5,#0
;;;1978   
;;;1979     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_GetResponse
00000e  f0007000          AND      r0,r0,#0x2000000
000012  b110              CBZ      r0,|L26.26|
;;;1980     {
;;;1981       errorstatus = SD_LOCK_UNLOCK_FAILED;
000014  260e              MOVS     r6,#0xe
;;;1982       return(errorstatus);
000016  4630              MOV      r0,r6
                  |L26.24|
;;;1983     }
;;;1984   
;;;1985     /*!< Set block size for card if it is not equal to current block size for card. */
;;;1986     SDIO_CmdInitStructure.SDIO_Argument = 64;
;;;1987     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1988     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1989     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1990     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1991     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1992   
;;;1993     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1994   
;;;1995     if (errorstatus != SD_OK)
;;;1996     {
;;;1997       return(errorstatus);
;;;1998     }
;;;1999   
;;;2000     /*!< CMD55 */
;;;2001     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2002     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2003     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2004     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2005     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2006     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2007     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2008   
;;;2009     if (errorstatus != SD_OK)
;;;2010     {
;;;2011       return(errorstatus);
;;;2012     }
;;;2013   
;;;2014     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;2015     SDIO_DataInitStructure.SDIO_DataLength = 64;
;;;2016     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
;;;2017     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;2018     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;2019     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;2020     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;2021   
;;;2022     /*!< Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
;;;2023     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;2024     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_STAUS;
;;;2025     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2026     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2027     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2028     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2029     errorstatus = CmdResp1Error(SD_CMD_SD_APP_STAUS);
;;;2030   
;;;2031     if (errorstatus != SD_OK)
;;;2032     {
;;;2033       return(errorstatus);
;;;2034     }
;;;2035   
;;;2036     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;2037     {
;;;2038       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;2039       {
;;;2040         for (count = 0; count < 8; count++)
;;;2041         {
;;;2042           *(psdstatus + count) = SDIO_ReadData();
;;;2043         }
;;;2044         psdstatus += 8;
;;;2045       }
;;;2046     }
;;;2047   
;;;2048     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;2049     {
;;;2050       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;2051       errorstatus = SD_DATA_TIMEOUT;
;;;2052       return(errorstatus);
;;;2053     }
;;;2054     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;2055     {
;;;2056       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;2057       errorstatus = SD_DATA_CRC_FAIL;
;;;2058       return(errorstatus);
;;;2059     }
;;;2060     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;2061     {
;;;2062       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;2063       errorstatus = SD_RX_OVERRUN;
;;;2064       return(errorstatus);
;;;2065     }
;;;2066     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;2067     {
;;;2068       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;2069       errorstatus = SD_START_BIT_ERR;
;;;2070       return(errorstatus);
;;;2071     }
;;;2072   
;;;2073     while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;2074     {
;;;2075       *psdstatus = SDIO_ReadData();
;;;2076       psdstatus++;
;;;2077     }
;;;2078   
;;;2079     /*!< Clear all the static status flags*/
;;;2080     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2081     psdstatus -= 16;
;;;2082     for (count = 0; count < 16; count++)
;;;2083     {
;;;2084       psdstatus[count] = ((psdstatus[count] & SD_0TO7BITS) << 24) |((psdstatus[count] & SD_8TO15BITS) << 8) |
;;;2085                          ((psdstatus[count] & SD_16TO23BITS) >> 8) |((psdstatus[count] & SD_24TO31BITS) >> 24);
;;;2086     }
;;;2087     return(errorstatus);
;;;2088   }
000018  bd70              POP      {r4-r6,pc}
                  |L26.26|
00001a  2040              MOVS     r0,#0x40              ;1986
00001c  4961              LDR      r1,|L26.420|
00001e  6008              STR      r0,[r1,#0]            ;1986  ; SDIO_CmdInitStructure
000020  2010              MOVS     r0,#0x10              ;1987
000022  6048              STR      r0,[r1,#4]            ;1987  ; SDIO_CmdInitStructure
000024  2040              MOVS     r0,#0x40              ;1988
000026  6088              STR      r0,[r1,#8]            ;1988  ; SDIO_CmdInitStructure
000028  2000              MOVS     r0,#0                 ;1989
00002a  60c8              STR      r0,[r1,#0xc]          ;1989  ; SDIO_CmdInitStructure
00002c  f44f6080          MOV      r0,#0x400             ;1990
000030  6108              STR      r0,[r1,#0x10]         ;1990  ; SDIO_CmdInitStructure
000032  4608              MOV      r0,r1                 ;1991
000034  f7fffffe          BL       SDIO_SendCommand
000038  2010              MOVS     r0,#0x10              ;1993
00003a  f7fffffe          BL       CmdResp1Error
00003e  4606              MOV      r6,r0                 ;1993
000040  2e2a              CMP      r6,#0x2a              ;1995
000042  d001              BEQ      |L26.72|
000044  4630              MOV      r0,r6                 ;1997
000046  e7e7              B        |L26.24|
                  |L26.72|
000048  4857              LDR      r0,|L26.424|
00004a  8800              LDRH     r0,[r0,#0]            ;2001  ; RCA
00004c  0400              LSLS     r0,r0,#16             ;2001
00004e  4955              LDR      r1,|L26.420|
000050  6008              STR      r0,[r1,#0]            ;2001  ; SDIO_CmdInitStructure
000052  2037              MOVS     r0,#0x37              ;2002
000054  6048              STR      r0,[r1,#4]            ;2002  ; SDIO_CmdInitStructure
000056  2040              MOVS     r0,#0x40              ;2003
000058  6088              STR      r0,[r1,#8]            ;2003  ; SDIO_CmdInitStructure
00005a  2000              MOVS     r0,#0                 ;2004
00005c  60c8              STR      r0,[r1,#0xc]          ;2004  ; SDIO_CmdInitStructure
00005e  f44f6080          MOV      r0,#0x400             ;2005
000062  6108              STR      r0,[r1,#0x10]         ;2005  ; SDIO_CmdInitStructure
000064  4608              MOV      r0,r1                 ;2006
000066  f7fffffe          BL       SDIO_SendCommand
00006a  2037              MOVS     r0,#0x37              ;2007
00006c  f7fffffe          BL       CmdResp1Error
000070  4606              MOV      r6,r0                 ;2007
000072  2e2a              CMP      r6,#0x2a              ;2009
000074  d001              BEQ      |L26.122|
000076  4630              MOV      r0,r6                 ;2011
000078  e7ce              B        |L26.24|
                  |L26.122|
00007a  484c              LDR      r0,|L26.428|
00007c  494c              LDR      r1,|L26.432|
00007e  6008              STR      r0,[r1,#0]            ;2014  ; SDIO_DataInitStructure
000080  2040              MOVS     r0,#0x40              ;2015
000082  6048              STR      r0,[r1,#4]            ;2015  ; SDIO_DataInitStructure
000084  2060              MOVS     r0,#0x60              ;2016
000086  6088              STR      r0,[r1,#8]            ;2016  ; SDIO_DataInitStructure
000088  2002              MOVS     r0,#2                 ;2017
00008a  60c8              STR      r0,[r1,#0xc]          ;2017  ; SDIO_DataInitStructure
00008c  2000              MOVS     r0,#0                 ;2018
00008e  6108              STR      r0,[r1,#0x10]         ;2018  ; SDIO_DataInitStructure
000090  2001              MOVS     r0,#1                 ;2019
000092  6148              STR      r0,[r1,#0x14]         ;2019  ; SDIO_DataInitStructure
000094  4608              MOV      r0,r1                 ;2020
000096  f7fffffe          BL       SDIO_DataConfig
00009a  2000              MOVS     r0,#0                 ;2023
00009c  4941              LDR      r1,|L26.420|
00009e  6008              STR      r0,[r1,#0]            ;2023  ; SDIO_CmdInitStructure
0000a0  200d              MOVS     r0,#0xd               ;2024
0000a2  6048              STR      r0,[r1,#4]            ;2024  ; SDIO_CmdInitStructure
0000a4  2040              MOVS     r0,#0x40              ;2025
0000a6  6088              STR      r0,[r1,#8]            ;2025  ; SDIO_CmdInitStructure
0000a8  2000              MOVS     r0,#0                 ;2026
0000aa  60c8              STR      r0,[r1,#0xc]          ;2026  ; SDIO_CmdInitStructure
0000ac  f44f6080          MOV      r0,#0x400             ;2027
0000b0  6108              STR      r0,[r1,#0x10]         ;2027  ; SDIO_CmdInitStructure
0000b2  4608              MOV      r0,r1                 ;2028
0000b4  f7fffffe          BL       SDIO_SendCommand
0000b8  200d              MOVS     r0,#0xd               ;2029
0000ba  f7fffffe          BL       CmdResp1Error
0000be  4606              MOV      r6,r0                 ;2029
0000c0  2e2a              CMP      r6,#0x2a              ;2031
0000c2  d001              BEQ      |L26.200|
0000c4  4630              MOV      r0,r6                 ;2033
0000c6  e7a7              B        |L26.24|
                  |L26.200|
0000c8  e00e              B        |L26.232|
                  |L26.202|
0000ca  f44f4000          MOV      r0,#0x8000            ;2038
0000ce  f7fffffe          BL       SDIO_GetFlagStatus
0000d2  b148              CBZ      r0,|L26.232|
0000d4  2500              MOVS     r5,#0                 ;2040
0000d6  e004              B        |L26.226|
                  |L26.216|
0000d8  f7fffffe          BL       SDIO_ReadData
0000dc  f8440025          STR      r0,[r4,r5,LSL #2]     ;2042
0000e0  1c6d              ADDS     r5,r5,#1              ;2040
                  |L26.226|
0000e2  2d08              CMP      r5,#8                 ;2040
0000e4  d3f8              BCC      |L26.216|
0000e6  3420              ADDS     r4,r4,#0x20           ;2044
                  |L26.232|
0000e8  4832              LDR      r0,|L26.436|
0000ea  6b40              LDR      r0,[r0,#0x34]         ;2036
0000ec  f240612a          MOV      r1,#0x62a             ;2036
0000f0  4008              ANDS     r0,r0,r1              ;2036
0000f2  2800              CMP      r0,#0                 ;2036
0000f4  d0e9              BEQ      |L26.202|
0000f6  2008              MOVS     r0,#8                 ;2048
0000f8  f7fffffe          BL       SDIO_GetFlagStatus
0000fc  b128              CBZ      r0,|L26.266|
0000fe  2008              MOVS     r0,#8                 ;2050
000100  f7fffffe          BL       SDIO_ClearFlag
000104  2604              MOVS     r6,#4                 ;2051
000106  4630              MOV      r0,r6                 ;2052
000108  e786              B        |L26.24|
                  |L26.266|
00010a  2002              MOVS     r0,#2                 ;2054
00010c  f7fffffe          BL       SDIO_GetFlagStatus
000110  b128              CBZ      r0,|L26.286|
000112  2002              MOVS     r0,#2                 ;2056
000114  f7fffffe          BL       SDIO_ClearFlag
000118  2602              MOVS     r6,#2                 ;2057
00011a  4630              MOV      r0,r6                 ;2058
00011c  e77c              B        |L26.24|
                  |L26.286|
00011e  2020              MOVS     r0,#0x20              ;2060
000120  f7fffffe          BL       SDIO_GetFlagStatus
000124  b128              CBZ      r0,|L26.306|
000126  2020              MOVS     r0,#0x20              ;2062
000128  f7fffffe          BL       SDIO_ClearFlag
00012c  2606              MOVS     r6,#6                 ;2063
00012e  4630              MOV      r0,r6                 ;2064
000130  e772              B        |L26.24|
                  |L26.306|
000132  f44f7000          MOV      r0,#0x200             ;2066
000136  f7fffffe          BL       SDIO_GetFlagStatus
00013a  b130              CBZ      r0,|L26.330|
00013c  f44f7000          MOV      r0,#0x200             ;2068
000140  f7fffffe          BL       SDIO_ClearFlag
000144  2607              MOVS     r6,#7                 ;2069
000146  4630              MOV      r0,r6                 ;2070
000148  e766              B        |L26.24|
                  |L26.330|
00014a  e003              B        |L26.340|
                  |L26.332|
00014c  f7fffffe          BL       SDIO_ReadData
000150  6020              STR      r0,[r4,#0]            ;2075
000152  1d24              ADDS     r4,r4,#4              ;2076
                  |L26.340|
000154  f44f1000          MOV      r0,#0x200000          ;2073
000158  f7fffffe          BL       SDIO_GetFlagStatus
00015c  2800              CMP      r0,#0                 ;2073
00015e  d1f5              BNE      |L26.332|
000160  f24050ff          MOV      r0,#0x5ff             ;2080
000164  f7fffffe          BL       SDIO_ClearFlag
000168  3c40              SUBS     r4,r4,#0x40           ;2081
00016a  2500              MOVS     r5,#0                 ;2082
00016c  e015              B        |L26.410|
                  |L26.366|
00016e  f8140025          LDRB     r0,[r4,r5,LSL #2]     ;2084
000172  0600              LSLS     r0,r0,#24             ;2084
000174  f8341025          LDRH     r1,[r4,r5,LSL #2]     ;2084
000178  f401417f          AND      r1,r1,#0xff00         ;2084
00017c  ea402001          ORR      r0,r0,r1,LSL #8       ;2084
000180  f8541025          LDR      r1,[r4,r5,LSL #2]     ;2084
000184  f401017f          AND      r1,r1,#0xff0000       ;2084
000188  ea402011          ORR      r0,r0,r1,LSR #8       ;2084
00018c  f8541025          LDR      r1,[r4,r5,LSL #2]     ;2084
000190  ea406011          ORR      r0,r0,r1,LSR #24      ;2084
000194  f8440025          STR      r0,[r4,r5,LSL #2]     ;2084
000198  1c6d              ADDS     r5,r5,#1              ;2082
                  |L26.410|
00019a  2d10              CMP      r5,#0x10              ;2082
00019c  d3e7              BCC      |L26.366|
00019e  4630              MOV      r0,r6                 ;2087
0001a0  e73a              B        |L26.24|
;;;2089   
                          ENDP

0001a2  0000              DCW      0x0000
                  |L26.420|
                          DCD      SDIO_CmdInitStructure
                  |L26.424|
                          DCD      ||RCA||
                  |L26.428|
                          DCD      0x000fffff
                  |L26.432|
                          DCD      SDIO_DataInitStructure
                  |L26.436|
                          DCD      0x40018000

                          AREA ||i.SD_SendStatus||, CODE, READONLY, ALIGN=2

                  SD_SendStatus PROC
;;;1937     */
;;;1938   SD_Error SD_SendStatus(uint32_t *pcardstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1939   {
000002  4604              MOV      r4,r0
;;;1940     SD_Error errorstatus = SD_OK;
000004  252a              MOVS     r5,#0x2a
;;;1941   
;;;1942     if (pcardstatus == NULL)
000006  b914              CBNZ     r4,|L27.14|
;;;1943     {
;;;1944       errorstatus = SD_INVALID_PARAMETER;
000008  2526              MOVS     r5,#0x26
;;;1945       return(errorstatus);
00000a  4628              MOV      r0,r5
                  |L27.12|
;;;1946     }
;;;1947   
;;;1948     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;1949     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1950     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1951     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1952     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1953     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1954   
;;;1955   
;;;1956     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1957   
;;;1958     if (errorstatus != SD_OK)
;;;1959     {
;;;1960       return(errorstatus);
;;;1961     }
;;;1962   
;;;1963     *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1964   
;;;1965     return(errorstatus);
;;;1966   }
00000c  bd70              POP      {r4-r6,pc}
                  |L27.14|
00000e  480f              LDR      r0,|L27.76|
000010  8800              LDRH     r0,[r0,#0]            ;1948  ; RCA
000012  0400              LSLS     r0,r0,#16             ;1948
000014  490e              LDR      r1,|L27.80|
000016  6008              STR      r0,[r1,#0]            ;1948  ; SDIO_CmdInitStructure
000018  200d              MOVS     r0,#0xd               ;1949
00001a  6048              STR      r0,[r1,#4]            ;1949  ; SDIO_CmdInitStructure
00001c  2040              MOVS     r0,#0x40              ;1950
00001e  6088              STR      r0,[r1,#8]            ;1950  ; SDIO_CmdInitStructure
000020  2000              MOVS     r0,#0                 ;1951
000022  60c8              STR      r0,[r1,#0xc]          ;1951  ; SDIO_CmdInitStructure
000024  f44f6080          MOV      r0,#0x400             ;1952
000028  6108              STR      r0,[r1,#0x10]         ;1952  ; SDIO_CmdInitStructure
00002a  4608              MOV      r0,r1                 ;1953
00002c  f7fffffe          BL       SDIO_SendCommand
000030  200d              MOVS     r0,#0xd               ;1956
000032  f7fffffe          BL       CmdResp1Error
000036  4605              MOV      r5,r0                 ;1956
000038  2d2a              CMP      r5,#0x2a              ;1958
00003a  d001              BEQ      |L27.64|
00003c  4628              MOV      r0,r5                 ;1960
00003e  e7e5              B        |L27.12|
                  |L27.64|
000040  2000              MOVS     r0,#0                 ;1963
000042  f7fffffe          BL       SDIO_GetResponse
000046  6020              STR      r0,[r4,#0]            ;1963
000048  4628              MOV      r0,r5                 ;1965
00004a  e7df              B        |L27.12|
;;;1967   
                          ENDP

                  |L27.76|
                          DCD      ||RCA||
                  |L27.80|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_SetDeviceMode||, CODE, READONLY, ALIGN=2

                  SD_SetDeviceMode PROC
;;;882      */
;;;883    SD_Error SD_SetDeviceMode(uint32_t Mode)
000000  4601              MOV      r1,r0
;;;884    {
;;;885      SD_Error errorstatus = SD_OK;
000002  202a              MOVS     r0,#0x2a
;;;886    
;;;887      if ((Mode == SD_DMA_MODE) || (Mode == SD_INTERRUPT_MODE) || (Mode == SD_POLLING_MODE))
000004  b119              CBZ      r1,|L28.14|
000006  2901              CMP      r1,#1
000008  d001              BEQ      |L28.14|
00000a  2902              CMP      r1,#2
00000c  d102              BNE      |L28.20|
                  |L28.14|
;;;888      {
;;;889        DeviceMode = Mode;
00000e  4a02              LDR      r2,|L28.24|
000010  6011              STR      r1,[r2,#0]  ; DeviceMode
000012  e000              B        |L28.22|
                  |L28.20|
;;;890      }
;;;891      else
;;;892      {
;;;893        errorstatus = SD_INVALID_PARAMETER;
000014  2026              MOVS     r0,#0x26
                  |L28.22|
;;;894      }
;;;895      return(errorstatus);
;;;896    
;;;897    }
000016  4770              BX       lr
;;;898    
                          ENDP

                  |L28.24|
                          DCD      DeviceMode

                          AREA ||i.SD_StopTransfer||, CODE, READONLY, ALIGN=2

                  SD_StopTransfer PROC
;;;1819     */
;;;1820   SD_Error SD_StopTransfer(void)
000000  b510              PUSH     {r4,lr}
;;;1821   {
;;;1822     SD_Error errorstatus = SD_OK;
000002  242a              MOVS     r4,#0x2a
;;;1823   
;;;1824     /*!< Send CMD12 STOP_TRANSMISSION  */
;;;1825     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000004  2000              MOVS     r0,#0
000006  490a              LDR      r1,|L29.48|
000008  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1826     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
00000a  200c              MOVS     r0,#0xc
00000c  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1827     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00000e  2040              MOVS     r0,#0x40
000010  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1828     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000012  2000              MOVS     r0,#0
000014  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1829     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000016  f44f6080          MOV      r0,#0x400
00001a  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1830     SDIO_SendCommand(&SDIO_CmdInitStructure);
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       SDIO_SendCommand
;;;1831   
;;;1832     errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
000022  200c              MOVS     r0,#0xc
000024  f7fffffe          BL       CmdResp1Error
000028  4604              MOV      r4,r0
;;;1833   
;;;1834     return(errorstatus);
00002a  4620              MOV      r0,r4
;;;1835   }
00002c  bd10              POP      {r4,pc}
;;;1836   
                          ENDP

00002e  0000              DCW      0x0000
                  |L29.48|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_WriteBlock||, CODE, READONLY, ALIGN=2

                  SD_WriteBlock PROC
;;;1298     */
;;;1299   SD_Error SD_WriteBlock(uint8_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;1300   {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4614              MOV      r4,r2
;;;1301     SD_Error errorstatus = SD_OK;
00000a  252a              MOVS     r5,#0x2a
;;;1302     uint8_t  power = 0, cardstate = 0;
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
000010  9002              STR      r0,[sp,#8]
;;;1303     uint32_t timeout = 0, bytestransferred = 0;
000012  4683              MOV      r11,r0
000014  2600              MOVS     r6,#0
;;;1304     uint32_t cardstatus = 0, count = 0, restwords = 0;
000016  9001              STR      r0,[sp,#4]
000018  2700              MOVS     r7,#0
00001a  9000              STR      r0,[sp,#0]
;;;1305     uint32_t *tempbuff = (uint32_t *)writebuff;
00001c  46c8              MOV      r8,r9
;;;1306   
;;;1307     if (writebuff == NULL)
00001e  f1b90f00          CMP      r9,#0
000022  d104              BNE      |L30.46|
;;;1308     {
;;;1309       errorstatus = SD_INVALID_PARAMETER;
000024  2526              MOVS     r5,#0x26
;;;1310       return(errorstatus);
000026  4628              MOV      r0,r5
                  |L30.40|
;;;1311     }
;;;1312   
;;;1313     TransferError = SD_OK;
;;;1314     TransferEnd = 0;
;;;1315     TotalNumberOfBytes = 0;
;;;1316   
;;;1317     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1318     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1319     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1320     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1321     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1322     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1323     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1324     SDIO_DMACmd(DISABLE);
;;;1325   
;;;1326     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1327     {
;;;1328       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1329       return(errorstatus);
;;;1330     }
;;;1331   
;;;1332     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1333     {
;;;1334       BlockSize = 512;
;;;1335       WriteAddr /= 512;
;;;1336     }
;;;1337     
;;;1338     /*!< Set the block size, both on controller and card */
;;;1339     if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;1340     {
;;;1341       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1342   
;;;1343       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1344       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1345       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1346       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1347       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1348       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1349   
;;;1350       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1351   
;;;1352       if (errorstatus != SD_OK)
;;;1353       {
;;;1354         return(errorstatus);
;;;1355       }
;;;1356     }
;;;1357     else
;;;1358     {
;;;1359       errorstatus = SD_INVALID_PARAMETER;
;;;1360       return(errorstatus);
;;;1361     }
;;;1362   
;;;1363     /*!< Wait till card is ready for data Added */
;;;1364     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1365     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1366     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1367     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1368     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1369     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1370   
;;;1371     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1372   
;;;1373     if (errorstatus != SD_OK)
;;;1374     {
;;;1375       return(errorstatus);
;;;1376     }
;;;1377   
;;;1378     cardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1379   
;;;1380     timeout = SD_DATATIMEOUT;
;;;1381   
;;;1382     while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
;;;1383     {
;;;1384       timeout--;
;;;1385       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1386       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1387       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1388       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1389       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1390       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1391   
;;;1392       errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1393   
;;;1394       if (errorstatus != SD_OK)
;;;1395       {
;;;1396         return(errorstatus);
;;;1397       }
;;;1398       cardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1399     }
;;;1400   
;;;1401     if (timeout == 0)
;;;1402     {
;;;1403       return(SD_ERROR);
;;;1404     }
;;;1405   
;;;1406     /*!< Send CMD24 WRITE_SINGLE_BLOCK */
;;;1407     SDIO_CmdInitStructure.SDIO_Argument = WriteAddr;
;;;1408     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
;;;1409     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1410     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1411     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1412     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1413   
;;;1414     errorstatus = CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);
;;;1415   
;;;1416     if (errorstatus != SD_OK)
;;;1417     {
;;;1418       return(errorstatus);
;;;1419     }
;;;1420   
;;;1421     TotalNumberOfBytes = BlockSize;
;;;1422     StopCondition = 0;
;;;1423     SrcBuffer = (uint32_t *)writebuff;
;;;1424   
;;;1425     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1426     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1427     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1428     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1429     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1430     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1431     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1432   
;;;1433     /*!< In case of single data block transfer no need of stop command at all */
;;;1434     if (DeviceMode == SD_POLLING_MODE)
;;;1435     {
;;;1436       while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1437       {
;;;1438         if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1439         {
;;;1440           if ((TotalNumberOfBytes - bytestransferred) < 32)
;;;1441           {
;;;1442             restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) : (( TotalNumberOfBytes -  bytestransferred) / 4 + 1);
;;;1443   
;;;1444             for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1445             {
;;;1446               SDIO_WriteData(*tempbuff);
;;;1447             }
;;;1448           }
;;;1449           else
;;;1450           {
;;;1451             for (count = 0; count < 8; count++)
;;;1452             {
;;;1453               SDIO_WriteData(*(tempbuff + count));
;;;1454             }
;;;1455             tempbuff += 8;
;;;1456             bytestransferred += 32;
;;;1457           }
;;;1458         }
;;;1459       }
;;;1460       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1461       {
;;;1462         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1463         errorstatus = SD_DATA_TIMEOUT;
;;;1464         return(errorstatus);
;;;1465       }
;;;1466       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1467       {
;;;1468         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1469         errorstatus = SD_DATA_CRC_FAIL;
;;;1470         return(errorstatus);
;;;1471       }
;;;1472       else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1473       {
;;;1474         SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1475         errorstatus = SD_TX_UNDERRUN;
;;;1476         return(errorstatus);
;;;1477       }
;;;1478       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1479       {
;;;1480         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1481         errorstatus = SD_START_BIT_ERR;
;;;1482         return(errorstatus);
;;;1483       }
;;;1484     }
;;;1485     else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1486     {
;;;1487       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_FLAG_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1488       while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1489       {}
;;;1490       if (TransferError != SD_OK)
;;;1491       {
;;;1492         return(TransferError);
;;;1493       }
;;;1494     }
;;;1495     else if (DeviceMode == SD_DMA_MODE)
;;;1496     {
;;;1497       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1498       SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, BlockSize);
;;;1499       SDIO_DMACmd(ENABLE);
;;;1500       while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1501       {}
;;;1502       if (TransferError != SD_OK)
;;;1503       {
;;;1504         return(TransferError);
;;;1505       }
;;;1506     }
;;;1507   
;;;1508     /*!< Clear all the static flags */
;;;1509     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1510   
;;;1511     /*!< Wait till the card is in programming state */
;;;1512     errorstatus = IsCardProgramming(&cardstate);
;;;1513   
;;;1514     while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
;;;1515     {
;;;1516       errorstatus = IsCardProgramming(&cardstate);
;;;1517     }
;;;1518   
;;;1519     return(errorstatus);
;;;1520   }
000028  b004              ADD      sp,sp,#0x10
00002a  e8bd9ff0          POP      {r4-r12,pc}
                  |L30.46|
00002e  202a              MOVS     r0,#0x2a              ;1313
000030  49c2              LDR      r1,|L30.828|
000032  7008              STRB     r0,[r1,#0]            ;1313
000034  2000              MOVS     r0,#0                 ;1314
000036  49c2              LDR      r1,|L30.832|
000038  6008              STR      r0,[r1,#0]            ;1314  ; TransferEnd
00003a  49c2              LDR      r1,|L30.836|
00003c  6008              STR      r0,[r1,#0]            ;1315  ; TotalNumberOfBytes
00003e  48c2              LDR      r0,|L30.840|
000040  49c2              LDR      r1,|L30.844|
000042  6008              STR      r0,[r1,#0]            ;1317  ; SDIO_DataInitStructure
000044  2000              MOVS     r0,#0                 ;1318
000046  6048              STR      r0,[r1,#4]            ;1318  ; SDIO_DataInitStructure
000048  6088              STR      r0,[r1,#8]            ;1319  ; SDIO_DataInitStructure
00004a  60c8              STR      r0,[r1,#0xc]          ;1320  ; SDIO_DataInitStructure
00004c  6108              STR      r0,[r1,#0x10]         ;1321  ; SDIO_DataInitStructure
00004e  6148              STR      r0,[r1,#0x14]         ;1322  ; SDIO_DataInitStructure
000050  4608              MOV      r0,r1                 ;1323
000052  f7fffffe          BL       SDIO_DataConfig
000056  2000              MOVS     r0,#0                 ;1324
000058  f7fffffe          BL       SDIO_DMACmd
00005c  2000              MOVS     r0,#0                 ;1326
00005e  f7fffffe          BL       SDIO_GetResponse
000062  f0007000          AND      r0,r0,#0x2000000      ;1326
000066  b110              CBZ      r0,|L30.110|
000068  250e              MOVS     r5,#0xe               ;1328
00006a  4628              MOV      r0,r5                 ;1329
00006c  e7dc              B        |L30.40|
                  |L30.110|
00006e  48b8              LDR      r0,|L30.848|
000070  6800              LDR      r0,[r0,#0]            ;1332  ; CardType
000072  2802              CMP      r0,#2                 ;1332
000074  d102              BNE      |L30.124|
000076  0204              LSLS     r4,r0,#8              ;1334
000078  ea4f2a5a          LSR      r10,r10,#9            ;1335
                  |L30.124|
00007c  2c00              CMP      r4,#0                 ;1339
00007e  dd20              BLE      |L30.194|
000080  f5b46f00          CMP      r4,#0x800             ;1339
000084  dc1d              BGT      |L30.194|
000086  1e60              SUBS     r0,r4,#1              ;1339
000088  4020              ANDS     r0,r0,r4              ;1339
00008a  b9d0              CBNZ     r0,|L30.194|
00008c  4620              MOV      r0,r4                 ;1341
00008e  f7fffffe          BL       convert_from_bytes_to_power_of_two
000092  9003              STR      r0,[sp,#0xc]          ;1341
000094  48af              LDR      r0,|L30.852|
000096  6004              STR      r4,[r0,#0]            ;1343  ; SDIO_CmdInitStructure
000098  2010              MOVS     r0,#0x10              ;1344
00009a  49ae              LDR      r1,|L30.852|
00009c  6048              STR      r0,[r1,#4]            ;1344  ; SDIO_CmdInitStructure
00009e  2040              MOVS     r0,#0x40              ;1345
0000a0  6088              STR      r0,[r1,#8]            ;1345  ; SDIO_CmdInitStructure
0000a2  2000              MOVS     r0,#0                 ;1346
0000a4  60c8              STR      r0,[r1,#0xc]          ;1346  ; SDIO_CmdInitStructure
0000a6  f44f6080          MOV      r0,#0x400             ;1347
0000aa  6108              STR      r0,[r1,#0x10]         ;1347  ; SDIO_CmdInitStructure
0000ac  4608              MOV      r0,r1                 ;1348
0000ae  f7fffffe          BL       SDIO_SendCommand
0000b2  2010              MOVS     r0,#0x10              ;1350
0000b4  f7fffffe          BL       CmdResp1Error
0000b8  4605              MOV      r5,r0                 ;1350
0000ba  2d2a              CMP      r5,#0x2a              ;1352
0000bc  d004              BEQ      |L30.200|
0000be  4628              MOV      r0,r5                 ;1354
0000c0  e7b2              B        |L30.40|
                  |L30.194|
0000c2  2526              MOVS     r5,#0x26              ;1359
0000c4  4628              MOV      r0,r5                 ;1360
0000c6  e7af              B        |L30.40|
                  |L30.200|
0000c8  48a3              LDR      r0,|L30.856|
0000ca  8800              LDRH     r0,[r0,#0]            ;1364  ; RCA
0000cc  0400              LSLS     r0,r0,#16             ;1364
0000ce  49a1              LDR      r1,|L30.852|
0000d0  6008              STR      r0,[r1,#0]            ;1364  ; SDIO_CmdInitStructure
0000d2  200d              MOVS     r0,#0xd               ;1365
0000d4  6048              STR      r0,[r1,#4]            ;1365  ; SDIO_CmdInitStructure
0000d6  2040              MOVS     r0,#0x40              ;1366
0000d8  6088              STR      r0,[r1,#8]            ;1366  ; SDIO_CmdInitStructure
0000da  2000              MOVS     r0,#0                 ;1367
0000dc  60c8              STR      r0,[r1,#0xc]          ;1367  ; SDIO_CmdInitStructure
0000de  f44f6080          MOV      r0,#0x400             ;1368
0000e2  6108              STR      r0,[r1,#0x10]         ;1368  ; SDIO_CmdInitStructure
0000e4  4608              MOV      r0,r1                 ;1369
0000e6  f7fffffe          BL       SDIO_SendCommand
0000ea  200d              MOVS     r0,#0xd               ;1371
0000ec  f7fffffe          BL       CmdResp1Error
0000f0  4605              MOV      r5,r0                 ;1371
0000f2  2d2a              CMP      r5,#0x2a              ;1373
0000f4  d001              BEQ      |L30.250|
0000f6  4628              MOV      r0,r5                 ;1375
0000f8  e796              B        |L30.40|
                  |L30.250|
0000fa  2000              MOVS     r0,#0                 ;1378
0000fc  f7fffffe          BL       SDIO_GetResponse
000100  9001              STR      r0,[sp,#4]            ;1378
000102  f8dfb244          LDR      r11,|L30.840|
000106  e01e              B        |L30.326|
                  |L30.264|
000108  f1ab0b01          SUB      r11,r11,#1            ;1384
00010c  4892              LDR      r0,|L30.856|
00010e  8800              LDRH     r0,[r0,#0]            ;1385  ; RCA
000110  0400              LSLS     r0,r0,#16             ;1385
000112  4990              LDR      r1,|L30.852|
000114  6008              STR      r0,[r1,#0]            ;1385  ; SDIO_CmdInitStructure
000116  200d              MOVS     r0,#0xd               ;1386
000118  6048              STR      r0,[r1,#4]            ;1386  ; SDIO_CmdInitStructure
00011a  2040              MOVS     r0,#0x40              ;1387
00011c  6088              STR      r0,[r1,#8]            ;1387  ; SDIO_CmdInitStructure
00011e  2000              MOVS     r0,#0                 ;1388
000120  60c8              STR      r0,[r1,#0xc]          ;1388  ; SDIO_CmdInitStructure
000122  f44f6080          MOV      r0,#0x400             ;1389
000126  6108              STR      r0,[r1,#0x10]         ;1389  ; SDIO_CmdInitStructure
000128  4608              MOV      r0,r1                 ;1390
00012a  f7fffffe          BL       SDIO_SendCommand
00012e  200d              MOVS     r0,#0xd               ;1392
000130  f7fffffe          BL       CmdResp1Error
000134  4605              MOV      r5,r0                 ;1392
000136  2d2a              CMP      r5,#0x2a              ;1394
000138  d001              BEQ      |L30.318|
00013a  4628              MOV      r0,r5                 ;1396
00013c  e774              B        |L30.40|
                  |L30.318|
00013e  2000              MOVS     r0,#0                 ;1398
000140  f7fffffe          BL       SDIO_GetResponse
000144  9001              STR      r0,[sp,#4]            ;1398
                  |L30.326|
000146  9801              LDR      r0,[sp,#4]            ;1382
000148  f4007080          AND      r0,r0,#0x100          ;1382
00014c  b910              CBNZ     r0,|L30.340|
00014e  f1bb0f00          CMP      r11,#0                ;1382
000152  d1d9              BNE      |L30.264|
                  |L30.340|
000154  f1bb0f00          CMP      r11,#0                ;1401
000158  d101              BNE      |L30.350|
00015a  2029              MOVS     r0,#0x29              ;1403
00015c  e764              B        |L30.40|
                  |L30.350|
00015e  487d              LDR      r0,|L30.852|
000160  f8c0a000          STR      r10,[r0,#0]           ;1407  ; SDIO_CmdInitStructure
000164  2018              MOVS     r0,#0x18              ;1408
000166  497b              LDR      r1,|L30.852|
000168  6048              STR      r0,[r1,#4]            ;1408  ; SDIO_CmdInitStructure
00016a  2040              MOVS     r0,#0x40              ;1409
00016c  6088              STR      r0,[r1,#8]            ;1409  ; SDIO_CmdInitStructure
00016e  2000              MOVS     r0,#0                 ;1410
000170  60c8              STR      r0,[r1,#0xc]          ;1410  ; SDIO_CmdInitStructure
000172  f44f6080          MOV      r0,#0x400             ;1411
000176  6108              STR      r0,[r1,#0x10]         ;1411  ; SDIO_CmdInitStructure
000178  4608              MOV      r0,r1                 ;1412
00017a  f7fffffe          BL       SDIO_SendCommand
00017e  2018              MOVS     r0,#0x18              ;1414
000180  f7fffffe          BL       CmdResp1Error
000184  4605              MOV      r5,r0                 ;1414
000186  2d2a              CMP      r5,#0x2a              ;1416
000188  d001              BEQ      |L30.398|
00018a  4628              MOV      r0,r5                 ;1418
00018c  e74c              B        |L30.40|
                  |L30.398|
00018e  486d              LDR      r0,|L30.836|
000190  6004              STR      r4,[r0,#0]            ;1421  ; TotalNumberOfBytes
000192  2000              MOVS     r0,#0                 ;1422
000194  4971              LDR      r1,|L30.860|
000196  6008              STR      r0,[r1,#0]            ;1422  ; StopCondition
000198  4871              LDR      r0,|L30.864|
00019a  f8c09000          STR      r9,[r0,#0]            ;1423  ; SrcBuffer
00019e  486a              LDR      r0,|L30.840|
0001a0  496a              LDR      r1,|L30.844|
0001a2  6008              STR      r0,[r1,#0]            ;1425  ; SDIO_DataInitStructure
0001a4  4608              MOV      r0,r1                 ;1426
0001a6  6044              STR      r4,[r0,#4]            ;1426  ; SDIO_DataInitStructure
0001a8  9803              LDR      r0,[sp,#0xc]          ;1427
0001aa  0100              LSLS     r0,r0,#4              ;1427
0001ac  6088              STR      r0,[r1,#8]            ;1427  ; SDIO_DataInitStructure
0001ae  2000              MOVS     r0,#0                 ;1428
0001b0  60c8              STR      r0,[r1,#0xc]          ;1428  ; SDIO_DataInitStructure
0001b2  6108              STR      r0,[r1,#0x10]         ;1429  ; SDIO_DataInitStructure
0001b4  2001              MOVS     r0,#1                 ;1430
0001b6  6148              STR      r0,[r1,#0x14]         ;1430  ; SDIO_DataInitStructure
0001b8  4608              MOV      r0,r1                 ;1431
0001ba  f7fffffe          BL       SDIO_DataConfig
0001be  4869              LDR      r0,|L30.868|
0001c0  6800              LDR      r0,[r0,#0]            ;1434  ; DeviceMode
0001c2  2802              CMP      r0,#2                 ;1434
0001c4  d166              BNE      |L30.660|
0001c6  e034              B        |L30.562|
                  |L30.456|
0001c8  f44f4080          MOV      r0,#0x4000            ;1438
0001cc  f7fffffe          BL       SDIO_GetFlagStatus
0001d0  b378              CBZ      r0,|L30.562|
0001d2  485c              LDR      r0,|L30.836|
0001d4  6800              LDR      r0,[r0,#0]            ;1440  ; TotalNumberOfBytes
0001d6  1b80              SUBS     r0,r0,r6              ;1440
0001d8  2820              CMP      r0,#0x20              ;1440
0001da  d21e              BCS      |L30.538|
0001dc  4859              LDR      r0,|L30.836|
0001de  7800              LDRB     r0,[r0,#0]            ;1442  ; TotalNumberOfBytes
0001e0  1b80              SUBS     r0,r0,r6              ;1442
0001e2  f0000003          AND      r0,r0,#3              ;1442
0001e6  b920              CBNZ     r0,|L30.498|
0001e8  4856              LDR      r0,|L30.836|
0001ea  6800              LDR      r0,[r0,#0]            ;1442  ; TotalNumberOfBytes
0001ec  1b80              SUBS     r0,r0,r6              ;1442
0001ee  0880              LSRS     r0,r0,#2              ;1442
0001f0  e004              B        |L30.508|
                  |L30.498|
0001f2  4854              LDR      r0,|L30.836|
0001f4  6800              LDR      r0,[r0,#0]            ;1442  ; TotalNumberOfBytes
0001f6  1b80              SUBS     r0,r0,r6              ;1442
0001f8  0880              LSRS     r0,r0,#2              ;1442
0001fa  1c40              ADDS     r0,r0,#1              ;1442
                  |L30.508|
0001fc  9000              STR      r0,[sp,#0]            ;1442
0001fe  2700              MOVS     r7,#0                 ;1444
000200  e007              B        |L30.530|
                  |L30.514|
000202  f8d80000          LDR      r0,[r8,#0]            ;1446
000206  f7fffffe          BL       SDIO_WriteData
00020a  1c7f              ADDS     r7,r7,#1              ;1444
00020c  f1080804          ADD      r8,r8,#4              ;1444
000210  1d36              ADDS     r6,r6,#4              ;1444
                  |L30.530|
000212  9800              LDR      r0,[sp,#0]            ;1444
000214  4287              CMP      r7,r0                 ;1444
000216  d20c              BCS      |L30.562|
000218  e7f3              B        |L30.514|
                  |L30.538|
00021a  2700              MOVS     r7,#0                 ;1451
00021c  e004              B        |L30.552|
                  |L30.542|
00021e  f8580027          LDR      r0,[r8,r7,LSL #2]     ;1453
000222  f7fffffe          BL       SDIO_WriteData
000226  1c7f              ADDS     r7,r7,#1              ;1451
                  |L30.552|
000228  2f08              CMP      r7,#8                 ;1451
00022a  d3f8              BCC      |L30.542|
00022c  f1080820          ADD      r8,r8,#0x20           ;1455
000230  3620              ADDS     r6,r6,#0x20           ;1456
                  |L30.562|
000232  484d              LDR      r0,|L30.872|
000234  6b40              LDR      r0,[r0,#0x34]         ;1436
000236  f240611a          MOV      r1,#0x61a             ;1436
00023a  4008              ANDS     r0,r0,r1              ;1436
00023c  2800              CMP      r0,#0                 ;1436
00023e  d0c3              BEQ      |L30.456|
000240  2008              MOVS     r0,#8                 ;1460
000242  f7fffffe          BL       SDIO_GetFlagStatus
000246  b128              CBZ      r0,|L30.596|
000248  2008              MOVS     r0,#8                 ;1462
00024a  f7fffffe          BL       SDIO_ClearFlag
00024e  2504              MOVS     r5,#4                 ;1463
000250  4628              MOV      r0,r5                 ;1464
000252  e6e9              B        |L30.40|
                  |L30.596|
000254  2002              MOVS     r0,#2                 ;1466
000256  f7fffffe          BL       SDIO_GetFlagStatus
00025a  b128              CBZ      r0,|L30.616|
00025c  2002              MOVS     r0,#2                 ;1468
00025e  f7fffffe          BL       SDIO_ClearFlag
000262  2502              MOVS     r5,#2                 ;1469
000264  4628              MOV      r0,r5                 ;1470
000266  e6df              B        |L30.40|
                  |L30.616|
000268  2010              MOVS     r0,#0x10              ;1472
00026a  f7fffffe          BL       SDIO_GetFlagStatus
00026e  b128              CBZ      r0,|L30.636|
000270  2010              MOVS     r0,#0x10              ;1474
000272  f7fffffe          BL       SDIO_ClearFlag
000276  2505              MOVS     r5,#5                 ;1475
000278  4628              MOV      r0,r5                 ;1476
00027a  e6d5              B        |L30.40|
                  |L30.636|
00027c  f44f7000          MOV      r0,#0x200             ;1478
000280  f7fffffe          BL       SDIO_GetFlagStatus
000284  b3f0              CBZ      r0,|L30.772|
000286  f44f7000          MOV      r0,#0x200             ;1480
00028a  f7fffffe          BL       SDIO_ClearFlag
00028e  2507              MOVS     r5,#7                 ;1481
000290  4628              MOV      r0,r5                 ;1482
000292  e6c9              B        |L30.40|
                  |L30.660|
000294  4833              LDR      r0,|L30.868|
000296  6800              LDR      r0,[r0,#0]            ;1485  ; DeviceMode
000298  2801              CMP      r0,#1                 ;1485
00029a  d113              BNE      |L30.708|
00029c  2101              MOVS     r1,#1                 ;1487
00029e  f244301a          MOV      r0,#0x431a            ;1487
0002a2  f7fffffe          BL       SDIO_ITConfig
0002a6  bf00              NOP                            ;1488
                  |L30.680|
0002a8  4825              LDR      r0,|L30.832|
0002aa  6800              LDR      r0,[r0,#0]            ;1488  ; TransferEnd
0002ac  b918              CBNZ     r0,|L30.694|
0002ae  4823              LDR      r0,|L30.828|
0002b0  7800              LDRB     r0,[r0,#0]            ;1488  ; TransferError
0002b2  282a              CMP      r0,#0x2a              ;1488
0002b4  d0f8              BEQ      |L30.680|
                  |L30.694|
0002b6  4821              LDR      r0,|L30.828|
0002b8  7800              LDRB     r0,[r0,#0]            ;1490  ; TransferError
0002ba  282a              CMP      r0,#0x2a              ;1490
0002bc  d025              BEQ      |L30.778|
0002be  481f              LDR      r0,|L30.828|
0002c0  7800              LDRB     r0,[r0,#0]            ;1492  ; TransferError
0002c2  e6b1              B        |L30.40|
                  |L30.708|
0002c4  4827              LDR      r0,|L30.868|
0002c6  6800              LDR      r0,[r0,#0]            ;1495  ; DeviceMode
0002c8  b9e0              CBNZ     r0,|L30.772|
0002ca  2101              MOVS     r1,#1                 ;1497
0002cc  f240301a          MOV      r0,#0x31a             ;1497
0002d0  f7fffffe          BL       SDIO_ITConfig
0002d4  4621              MOV      r1,r4                 ;1498
0002d6  4648              MOV      r0,r9                 ;1498
0002d8  f7fffffe          BL       SD_LowLevel_DMA_TxConfig
0002dc  2001              MOVS     r0,#1                 ;1499
0002de  f7fffffe          BL       SDIO_DMACmd
0002e2  bf00              NOP                            ;1500
                  |L30.740|
0002e4  f7fffffe          BL       SD_DMAEndOfTransferStatus
0002e8  b930              CBNZ     r0,|L30.760|
0002ea  4815              LDR      r0,|L30.832|
0002ec  6800              LDR      r0,[r0,#0]            ;1500  ; TransferEnd
0002ee  b918              CBNZ     r0,|L30.760|
0002f0  4812              LDR      r0,|L30.828|
0002f2  7800              LDRB     r0,[r0,#0]            ;1500  ; TransferError
0002f4  282a              CMP      r0,#0x2a              ;1500
0002f6  d0f5              BEQ      |L30.740|
                  |L30.760|
0002f8  4810              LDR      r0,|L30.828|
0002fa  7800              LDRB     r0,[r0,#0]            ;1502  ; TransferError
0002fc  282a              CMP      r0,#0x2a              ;1502
0002fe  d004              BEQ      |L30.778|
000300  480e              LDR      r0,|L30.828|
000302  e000              B        |L30.774|
                  |L30.772|
000304  e001              B        |L30.778|
                  |L30.774|
000306  7800              LDRB     r0,[r0,#0]            ;1504  ; TransferError
000308  e68e              B        |L30.40|
                  |L30.778|
00030a  f24050ff          MOV      r0,#0x5ff             ;1509
00030e  f7fffffe          BL       SDIO_ClearFlag
000312  a802              ADD      r0,sp,#8              ;1512
000314  f7fffffe          BL       IsCardProgramming
000318  4605              MOV      r5,r0                 ;1512
00031a  e003              B        |L30.804|
                  |L30.796|
00031c  a802              ADD      r0,sp,#8              ;1516
00031e  f7fffffe          BL       IsCardProgramming
000322  4605              MOV      r5,r0                 ;1516
                  |L30.804|
000324  2d2a              CMP      r5,#0x2a              ;1514
000326  d107              BNE      |L30.824|
000328  f89d0008          LDRB     r0,[sp,#8]            ;1514
00032c  2807              CMP      r0,#7                 ;1514
00032e  d0f5              BEQ      |L30.796|
000330  f89d0008          LDRB     r0,[sp,#8]            ;1514
000334  2806              CMP      r0,#6                 ;1514
000336  d0f1              BEQ      |L30.796|
                  |L30.824|
000338  4628              MOV      r0,r5                 ;1519
00033a  e675              B        |L30.40|
;;;1521   
                          ENDP

                  |L30.828|
                          DCD      TransferError
                  |L30.832|
                          DCD      TransferEnd
                  |L30.836|
                          DCD      TotalNumberOfBytes
                  |L30.840|
                          DCD      0x000fffff
                  |L30.844|
                          DCD      SDIO_DataInitStructure
                  |L30.848|
                          DCD      CardType
                  |L30.852|
                          DCD      SDIO_CmdInitStructure
                  |L30.856|
                          DCD      ||RCA||
                  |L30.860|
                          DCD      StopCondition
                  |L30.864|
                          DCD      SrcBuffer
                  |L30.868|
                          DCD      DeviceMode
                  |L30.872|
                          DCD      0x40018000

                          AREA ||i.SD_WriteMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_WriteMultiBlocks PROC
;;;1529     */
;;;1530   SD_Error SD_WriteMultiBlocks(uint8_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1531   {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
;;;1532     SD_Error errorstatus = SD_OK;
00000c  252a              MOVS     r5,#0x2a
;;;1533     uint8_t  power = 0, cardstate = 0;
00000e  f04f0b00          MOV      r11,#0
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
;;;1534     uint32_t bytestransferred = 0;
000016  2700              MOVS     r7,#0
;;;1535     uint32_t restwords = 0;
000018  9001              STR      r0,[sp,#4]
;;;1536     uint32_t *tempbuff = (uint32_t *)writebuff;
00001a  46c8              MOV      r8,r9
;;;1537     __IO uint32_t count = 0;
00001c  9000              STR      r0,[sp,#0]
;;;1538     
;;;1539     if (writebuff == NULL)
00001e  f1b90f00          CMP      r9,#0
000022  d103              BNE      |L31.44|
;;;1540     {
;;;1541       errorstatus = SD_INVALID_PARAMETER;
000024  2526              MOVS     r5,#0x26
;;;1542       return(errorstatus);
000026  4628              MOV      r0,r5
                  |L31.40|
;;;1543     }
;;;1544   
;;;1545     TransferError = SD_OK;
;;;1546     TransferEnd = 0;
;;;1547     TotalNumberOfBytes = 0;
;;;1548   
;;;1549     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1550     SDIO_DataInitStructure.SDIO_DataLength = 0;
;;;1551     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
;;;1552     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1553     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1554     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
;;;1555     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1556     SDIO_DMACmd(DISABLE);
;;;1557   
;;;1558     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1559     {
;;;1560       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1561       return(errorstatus);
;;;1562     }
;;;1563   
;;;1564     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1565     {
;;;1566       BlockSize = 512;
;;;1567       WriteAddr /= 512;
;;;1568     }
;;;1569     
;;;1570     /*!< Set the block size, both on controller and card */
;;;1571     if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
;;;1572     {
;;;1573       power = convert_from_bytes_to_power_of_two(BlockSize);
;;;1574   
;;;1575       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
;;;1576       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1577       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1578       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1579       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1580       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1581   
;;;1582       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1583   
;;;1584       if (errorstatus != SD_OK)
;;;1585       {
;;;1586         return(errorstatus);
;;;1587       }
;;;1588     }
;;;1589     else
;;;1590     {
;;;1591       errorstatus = SD_INVALID_PARAMETER;
;;;1592       return(errorstatus);
;;;1593     }
;;;1594   
;;;1595     /*!< Wait till card is ready for data Added */
;;;1596     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1597     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1598     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1599     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1600     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1601     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1602   
;;;1603     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1604   
;;;1605     if (errorstatus != SD_OK)
;;;1606     {
;;;1607       return(errorstatus);
;;;1608     }
;;;1609   
;;;1610     if (NumberOfBlocks > 1)
;;;1611     {
;;;1612       /*!< Common to all modes */
;;;1613       if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
;;;1614       {
;;;1615         errorstatus = SD_INVALID_PARAMETER;
;;;1616         return(errorstatus);
;;;1617       }
;;;1618   
;;;1619       if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1620       {
;;;1621         /*!< To improve performance */
;;;1622         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1623         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1624         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1625         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1626         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1627         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1628   
;;;1629   
;;;1630         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;1631   
;;;1632         if (errorstatus != SD_OK)
;;;1633         {
;;;1634           return(errorstatus);
;;;1635         }
;;;1636         /*!< To improve performance */
;;;1637         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
;;;1638         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
;;;1639         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1640         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1641         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1642         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1643   
;;;1644         errorstatus = CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);
;;;1645   
;;;1646         if (errorstatus != SD_OK)
;;;1647         {
;;;1648           return(errorstatus);
;;;1649         }
;;;1650       }
;;;1651   
;;;1652       /*!< Send CMD25 WRITE_MULT_BLOCK with argument data address */
;;;1653       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)WriteAddr;
;;;1654       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
;;;1655       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1656       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1657       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1658       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1659   
;;;1660       errorstatus = CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);
;;;1661   
;;;1662       if (SD_OK != errorstatus)
;;;1663       {
;;;1664         return(errorstatus);
;;;1665       }
;;;1666   
;;;1667       TotalNumberOfBytes = NumberOfBlocks * BlockSize;
;;;1668       StopCondition = 1;
;;;1669       SrcBuffer = (uint32_t *)writebuff;
;;;1670   
;;;1671       SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1672       SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1673       SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
;;;1674       SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1675       SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1676       SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1677       SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1678   
;;;1679       if (DeviceMode == SD_POLLING_MODE)
;;;1680       {
;;;1681         while (!(SDIO->STA & (SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1682         {
;;;1683           if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1684           {
;;;1685             if (!((TotalNumberOfBytes - bytestransferred) < SD_HALFFIFOBYTES))
;;;1686             {
;;;1687               for (count = 0; count < SD_HALFFIFO; count++)
;;;1688               {
;;;1689                 SDIO_WriteData(*(tempbuff + count));
;;;1690               }
;;;1691               tempbuff += SD_HALFFIFO;
;;;1692               bytestransferred += SD_HALFFIFOBYTES;
;;;1693             }
;;;1694             else
;;;1695             {
;;;1696               restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) :
;;;1697                           ((TotalNumberOfBytes - bytestransferred) / 4 + 1);
;;;1698   
;;;1699               for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1700               {
;;;1701                 SDIO_WriteData(*tempbuff);
;;;1702               }
;;;1703             }
;;;1704           }
;;;1705         }
;;;1706   
;;;1707         if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1708         {
;;;1709           SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1710           errorstatus = SD_DATA_TIMEOUT;
;;;1711           return(errorstatus);
;;;1712         }
;;;1713         else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1714         {
;;;1715           SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1716           errorstatus = SD_DATA_CRC_FAIL;
;;;1717           return(errorstatus);
;;;1718         }
;;;1719         else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1720         {
;;;1721           SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1722           errorstatus = SD_TX_UNDERRUN;
;;;1723           return(errorstatus);
;;;1724         }
;;;1725         else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1726         {
;;;1727           SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1728           errorstatus = SD_START_BIT_ERR;
;;;1729           return(errorstatus);
;;;1730         }
;;;1731   
;;;1732         if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
;;;1733         {
;;;1734          if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1735           {
;;;1736             /*!< Send CMD12 STOP_TRANSMISSION */
;;;1737             SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;1738             SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
;;;1739             SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1740             SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1741             SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1742             SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1743   
;;;1744   
;;;1745             errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
;;;1746   
;;;1747             if (errorstatus != SD_OK)
;;;1748             {
;;;1749               return(errorstatus);
;;;1750             }
;;;1751           }
;;;1752         }
;;;1753       }
;;;1754       else if (DeviceMode == SD_INTERRUPT_MODE)
;;;1755       {
;;;1756         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1757         while ((TransferEnd == 0) && (TransferError == SD_OK))
;;;1758         {}
;;;1759         if (TransferError != SD_OK)
;;;1760         {
;;;1761           return(TransferError);
;;;1762         }
;;;1763       }
;;;1764       else if (DeviceMode == SD_DMA_MODE)
;;;1765       {
;;;1766         SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
;;;1767         SDIO_DMACmd(ENABLE);
;;;1768         SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, (NumberOfBlocks * BlockSize));
;;;1769         while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
;;;1770         {}
;;;1771         if (TransferError != SD_OK)
;;;1772         {
;;;1773           return(TransferError);
;;;1774         }
;;;1775       }
;;;1776     }
;;;1777     /*!< Clear all the static flags */
;;;1778     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1779     
;;;1780     /*!< Add some delay before checking the Card Status */
;;;1781     for(count = 0; count < 0xFFFF; count++)
;;;1782     {
;;;1783     }
;;;1784     /*!< Wait till the card is in programming state */
;;;1785     errorstatus = IsCardProgramming(&cardstate);
;;;1786   
;;;1787     while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
;;;1788     {
;;;1789       errorstatus = IsCardProgramming(&cardstate);
;;;1790     }
;;;1791   
;;;1792     return(errorstatus);
;;;1793   }
000028  e8bd8ffe          POP      {r1-r11,pc}
                  |L31.44|
00002c  202a              MOVS     r0,#0x2a              ;1545
00002e  49ec              LDR      r1,|L31.992|
000030  7008              STRB     r0,[r1,#0]            ;1545
000032  2000              MOVS     r0,#0                 ;1546
000034  49eb              LDR      r1,|L31.996|
000036  6008              STR      r0,[r1,#0]            ;1546  ; TransferEnd
000038  49eb              LDR      r1,|L31.1000|
00003a  6008              STR      r0,[r1,#0]            ;1547  ; TotalNumberOfBytes
00003c  48eb              LDR      r0,|L31.1004|
00003e  49ec              LDR      r1,|L31.1008|
000040  6008              STR      r0,[r1,#0]            ;1549  ; SDIO_DataInitStructure
000042  2000              MOVS     r0,#0                 ;1550
000044  6048              STR      r0,[r1,#4]            ;1550  ; SDIO_DataInitStructure
000046  6088              STR      r0,[r1,#8]            ;1551  ; SDIO_DataInitStructure
000048  60c8              STR      r0,[r1,#0xc]          ;1552  ; SDIO_DataInitStructure
00004a  6108              STR      r0,[r1,#0x10]         ;1553  ; SDIO_DataInitStructure
00004c  6148              STR      r0,[r1,#0x14]         ;1554  ; SDIO_DataInitStructure
00004e  4608              MOV      r0,r1                 ;1555
000050  f7fffffe          BL       SDIO_DataConfig
000054  2000              MOVS     r0,#0                 ;1556
000056  f7fffffe          BL       SDIO_DMACmd
00005a  2000              MOVS     r0,#0                 ;1558
00005c  f7fffffe          BL       SDIO_GetResponse
000060  f0007000          AND      r0,r0,#0x2000000      ;1558
000064  b110              CBZ      r0,|L31.108|
000066  250e              MOVS     r5,#0xe               ;1560
000068  4628              MOV      r0,r5                 ;1561
00006a  e7dd              B        |L31.40|
                  |L31.108|
00006c  48e1              LDR      r0,|L31.1012|
00006e  6800              LDR      r0,[r0,#0]            ;1564  ; CardType
000070  2802              CMP      r0,#2                 ;1564
000072  d102              BNE      |L31.122|
000074  0204              LSLS     r4,r0,#8              ;1566
000076  ea4f2a5a          LSR      r10,r10,#9            ;1567
                  |L31.122|
00007a  2c00              CMP      r4,#0                 ;1571
00007c  dd20              BLE      |L31.192|
00007e  f5b46f00          CMP      r4,#0x800             ;1571
000082  dc1d              BGT      |L31.192|
000084  1e60              SUBS     r0,r4,#1              ;1571
000086  4020              ANDS     r0,r0,r4              ;1571
000088  b9d0              CBNZ     r0,|L31.192|
00008a  4620              MOV      r0,r4                 ;1573
00008c  f7fffffe          BL       convert_from_bytes_to_power_of_two
000090  4683              MOV      r11,r0                ;1573
000092  48d9              LDR      r0,|L31.1016|
000094  6004              STR      r4,[r0,#0]            ;1575  ; SDIO_CmdInitStructure
000096  2010              MOVS     r0,#0x10              ;1576
000098  49d7              LDR      r1,|L31.1016|
00009a  6048              STR      r0,[r1,#4]            ;1576  ; SDIO_CmdInitStructure
00009c  2040              MOVS     r0,#0x40              ;1577
00009e  6088              STR      r0,[r1,#8]            ;1577  ; SDIO_CmdInitStructure
0000a0  2000              MOVS     r0,#0                 ;1578
0000a2  60c8              STR      r0,[r1,#0xc]          ;1578  ; SDIO_CmdInitStructure
0000a4  f44f6080          MOV      r0,#0x400             ;1579
0000a8  6108              STR      r0,[r1,#0x10]         ;1579  ; SDIO_CmdInitStructure
0000aa  4608              MOV      r0,r1                 ;1580
0000ac  f7fffffe          BL       SDIO_SendCommand
0000b0  2010              MOVS     r0,#0x10              ;1582
0000b2  f7fffffe          BL       CmdResp1Error
0000b6  4605              MOV      r5,r0                 ;1582
0000b8  2d2a              CMP      r5,#0x2a              ;1584
0000ba  d004              BEQ      |L31.198|
0000bc  4628              MOV      r0,r5                 ;1586
0000be  e7b3              B        |L31.40|
                  |L31.192|
0000c0  2526              MOVS     r5,#0x26              ;1591
0000c2  4628              MOV      r0,r5                 ;1592
0000c4  e7b0              B        |L31.40|
                  |L31.198|
0000c6  48cd              LDR      r0,|L31.1020|
0000c8  8800              LDRH     r0,[r0,#0]            ;1596  ; RCA
0000ca  0400              LSLS     r0,r0,#16             ;1596
0000cc  49ca              LDR      r1,|L31.1016|
0000ce  6008              STR      r0,[r1,#0]            ;1596  ; SDIO_CmdInitStructure
0000d0  200d              MOVS     r0,#0xd               ;1597
0000d2  6048              STR      r0,[r1,#4]            ;1597  ; SDIO_CmdInitStructure
0000d4  2040              MOVS     r0,#0x40              ;1598
0000d6  6088              STR      r0,[r1,#8]            ;1598  ; SDIO_CmdInitStructure
0000d8  2000              MOVS     r0,#0                 ;1599
0000da  60c8              STR      r0,[r1,#0xc]          ;1599  ; SDIO_CmdInitStructure
0000dc  f44f6080          MOV      r0,#0x400             ;1600
0000e0  6108              STR      r0,[r1,#0x10]         ;1600  ; SDIO_CmdInitStructure
0000e2  4608              MOV      r0,r1                 ;1601
0000e4  f7fffffe          BL       SDIO_SendCommand
0000e8  200d              MOVS     r0,#0xd               ;1603
0000ea  f7fffffe          BL       CmdResp1Error
0000ee  4605              MOV      r5,r0                 ;1603
0000f0  2d2a              CMP      r5,#0x2a              ;1605
0000f2  d001              BEQ      |L31.248|
0000f4  4628              MOV      r0,r5                 ;1607
0000f6  e797              B        |L31.40|
                  |L31.248|
0000f8  2e01              CMP      r6,#1                 ;1610
0000fa  d97a              BLS      |L31.498|
0000fc  fb06f004          MUL      r0,r6,r4              ;1613
000100  f1b07f00          CMP      r0,#0x2000000         ;1613
000104  d302              BCC      |L31.268|
000106  2526              MOVS     r5,#0x26              ;1615
000108  4628              MOV      r0,r5                 ;1616
00010a  e78d              B        |L31.40|
                  |L31.268|
00010c  48b9              LDR      r0,|L31.1012|
00010e  6800              LDR      r0,[r0,#0]            ;1619  ; CardType
000110  b138              CBZ      r0,|L31.290|
000112  48b8              LDR      r0,|L31.1012|
000114  6800              LDR      r0,[r0,#0]            ;1619  ; CardType
000116  2801              CMP      r0,#1                 ;1619
000118  d003              BEQ      |L31.290|
00011a  48b6              LDR      r0,|L31.1012|
00011c  6800              LDR      r0,[r0,#0]            ;1619  ; CardType
00011e  2802              CMP      r0,#2                 ;1619
000120  d12f              BNE      |L31.386|
                  |L31.290|
000122  48b6              LDR      r0,|L31.1020|
000124  8800              LDRH     r0,[r0,#0]            ;1622  ; RCA
000126  0400              LSLS     r0,r0,#16             ;1622
000128  49b3              LDR      r1,|L31.1016|
00012a  6008              STR      r0,[r1,#0]            ;1622  ; SDIO_CmdInitStructure
00012c  2037              MOVS     r0,#0x37              ;1623
00012e  6048              STR      r0,[r1,#4]            ;1623  ; SDIO_CmdInitStructure
000130  2040              MOVS     r0,#0x40              ;1624
000132  6088              STR      r0,[r1,#8]            ;1624  ; SDIO_CmdInitStructure
000134  2000              MOVS     r0,#0                 ;1625
000136  60c8              STR      r0,[r1,#0xc]          ;1625  ; SDIO_CmdInitStructure
000138  f44f6080          MOV      r0,#0x400             ;1626
00013c  6108              STR      r0,[r1,#0x10]         ;1626  ; SDIO_CmdInitStructure
00013e  4608              MOV      r0,r1                 ;1627
000140  f7fffffe          BL       SDIO_SendCommand
000144  2037              MOVS     r0,#0x37              ;1630
000146  f7fffffe          BL       CmdResp1Error
00014a  4605              MOV      r5,r0                 ;1630
00014c  2d2a              CMP      r5,#0x2a              ;1632
00014e  d001              BEQ      |L31.340|
000150  4628              MOV      r0,r5                 ;1634
000152  e769              B        |L31.40|
                  |L31.340|
000154  48a8              LDR      r0,|L31.1016|
000156  6006              STR      r6,[r0,#0]            ;1637  ; SDIO_CmdInitStructure
000158  2017              MOVS     r0,#0x17              ;1638
00015a  49a7              LDR      r1,|L31.1016|
00015c  6048              STR      r0,[r1,#4]            ;1638  ; SDIO_CmdInitStructure
00015e  2040              MOVS     r0,#0x40              ;1639
000160  6088              STR      r0,[r1,#8]            ;1639  ; SDIO_CmdInitStructure
000162  2000              MOVS     r0,#0                 ;1640
000164  60c8              STR      r0,[r1,#0xc]          ;1640  ; SDIO_CmdInitStructure
000166  f44f6080          MOV      r0,#0x400             ;1641
00016a  6108              STR      r0,[r1,#0x10]         ;1641  ; SDIO_CmdInitStructure
00016c  4608              MOV      r0,r1                 ;1642
00016e  f7fffffe          BL       SDIO_SendCommand
000172  2017              MOVS     r0,#0x17              ;1644
000174  f7fffffe          BL       CmdResp1Error
000178  4605              MOV      r5,r0                 ;1644
00017a  2d2a              CMP      r5,#0x2a              ;1646
00017c  d001              BEQ      |L31.386|
00017e  4628              MOV      r0,r5                 ;1648
000180  e752              B        |L31.40|
                  |L31.386|
000182  489d              LDR      r0,|L31.1016|
000184  f8c0a000          STR      r10,[r0,#0]           ;1653  ; SDIO_CmdInitStructure
000188  2019              MOVS     r0,#0x19              ;1654
00018a  499b              LDR      r1,|L31.1016|
00018c  6048              STR      r0,[r1,#4]            ;1654  ; SDIO_CmdInitStructure
00018e  2040              MOVS     r0,#0x40              ;1655
000190  6088              STR      r0,[r1,#8]            ;1655  ; SDIO_CmdInitStructure
000192  2000              MOVS     r0,#0                 ;1656
000194  60c8              STR      r0,[r1,#0xc]          ;1656  ; SDIO_CmdInitStructure
000196  f44f6080          MOV      r0,#0x400             ;1657
00019a  6108              STR      r0,[r1,#0x10]         ;1657  ; SDIO_CmdInitStructure
00019c  4608              MOV      r0,r1                 ;1658
00019e  f7fffffe          BL       SDIO_SendCommand
0001a2  2019              MOVS     r0,#0x19              ;1660
0001a4  f7fffffe          BL       CmdResp1Error
0001a8  4605              MOV      r5,r0                 ;1660
0001aa  2d2a              CMP      r5,#0x2a              ;1662
0001ac  d001              BEQ      |L31.434|
0001ae  4628              MOV      r0,r5                 ;1664
0001b0  e73a              B        |L31.40|
                  |L31.434|
0001b2  fb06f004          MUL      r0,r6,r4              ;1667
0001b6  498c              LDR      r1,|L31.1000|
0001b8  6008              STR      r0,[r1,#0]            ;1667  ; TotalNumberOfBytes
0001ba  2001              MOVS     r0,#1                 ;1668
0001bc  4990              LDR      r1,|L31.1024|
0001be  6008              STR      r0,[r1,#0]            ;1668  ; StopCondition
0001c0  4890              LDR      r0,|L31.1028|
0001c2  f8c09000          STR      r9,[r0,#0]            ;1669  ; SrcBuffer
0001c6  4889              LDR      r0,|L31.1004|
0001c8  4989              LDR      r1,|L31.1008|
0001ca  6008              STR      r0,[r1,#0]            ;1671  ; SDIO_DataInitStructure
0001cc  fb06f004          MUL      r0,r6,r4              ;1672
0001d0  6048              STR      r0,[r1,#4]            ;1672  ; SDIO_DataInitStructure
0001d2  ea4f100b          LSL      r0,r11,#4             ;1673
0001d6  6088              STR      r0,[r1,#8]            ;1673  ; SDIO_DataInitStructure
0001d8  2000              MOVS     r0,#0                 ;1674
0001da  60c8              STR      r0,[r1,#0xc]          ;1674  ; SDIO_DataInitStructure
0001dc  6108              STR      r0,[r1,#0x10]         ;1675  ; SDIO_DataInitStructure
0001de  2001              MOVS     r0,#1                 ;1676
0001e0  6148              STR      r0,[r1,#0x14]         ;1676  ; SDIO_DataInitStructure
0001e2  4608              MOV      r0,r1                 ;1677
0001e4  f7fffffe          BL       SDIO_DataConfig
0001e8  4887              LDR      r0,|L31.1032|
0001ea  6800              LDR      r0,[r0,#0]            ;1679  ; DeviceMode
0001ec  2802              CMP      r0,#2                 ;1679
0001ee  d170              BNE      |L31.722|
0001f0  e03e              B        |L31.624|
                  |L31.498|
0001f2  e0d1              B        |L31.920|
                  |L31.500|
0001f4  f44f4080          MOV      r0,#0x4000            ;1683
0001f8  f7fffffe          BL       SDIO_GetFlagStatus
0001fc  b3c0              CBZ      r0,|L31.624|
0001fe  487a              LDR      r0,|L31.1000|
000200  6800              LDR      r0,[r0,#0]            ;1685  ; TotalNumberOfBytes
000202  1bc0              SUBS     r0,r0,r7              ;1685
000204  2820              CMP      r0,#0x20              ;1685
000206  d311              BCC      |L31.556|
000208  2000              MOVS     r0,#0                 ;1687
00020a  9000              STR      r0,[sp,#0]            ;1687
00020c  e007              B        |L31.542|
                  |L31.526|
00020e  9900              LDR      r1,[sp,#0]            ;1689
000210  f8580021          LDR      r0,[r8,r1,LSL #2]     ;1689
000214  f7fffffe          BL       SDIO_WriteData
000218  9800              LDR      r0,[sp,#0]            ;1687
00021a  1c40              ADDS     r0,r0,#1              ;1687
00021c  9000              STR      r0,[sp,#0]            ;1687
                  |L31.542|
00021e  9800              LDR      r0,[sp,#0]            ;1687
000220  2808              CMP      r0,#8                 ;1687
000222  d3f4              BCC      |L31.526|
000224  f1080820          ADD      r8,r8,#0x20           ;1691
000228  3720              ADDS     r7,r7,#0x20           ;1692
00022a  e021              B        |L31.624|
                  |L31.556|
00022c  486e              LDR      r0,|L31.1000|
00022e  7800              LDRB     r0,[r0,#0]            ;1696  ; TotalNumberOfBytes
000230  1bc0              SUBS     r0,r0,r7              ;1696
000232  f0000003          AND      r0,r0,#3              ;1696
000236  b920              CBNZ     r0,|L31.578|
000238  486b              LDR      r0,|L31.1000|
00023a  6800              LDR      r0,[r0,#0]            ;1696  ; TotalNumberOfBytes
00023c  1bc0              SUBS     r0,r0,r7              ;1696
00023e  0880              LSRS     r0,r0,#2              ;1696
000240  e004              B        |L31.588|
                  |L31.578|
000242  4869              LDR      r0,|L31.1000|
000244  6800              LDR      r0,[r0,#0]            ;1697  ; TotalNumberOfBytes
000246  1bc0              SUBS     r0,r0,r7              ;1697
000248  0880              LSRS     r0,r0,#2              ;1697
00024a  1c40              ADDS     r0,r0,#1              ;1697
                  |L31.588|
00024c  9001              STR      r0,[sp,#4]            ;1697
00024e  2000              MOVS     r0,#0                 ;1699
000250  9000              STR      r0,[sp,#0]            ;1699
000252  e009              B        |L31.616|
                  |L31.596|
000254  f8d80000          LDR      r0,[r8,#0]            ;1701
000258  f7fffffe          BL       SDIO_WriteData
00025c  9800              LDR      r0,[sp,#0]            ;1699
00025e  1c40              ADDS     r0,r0,#1              ;1699
000260  9000              STR      r0,[sp,#0]            ;1699
000262  f1080804          ADD      r8,r8,#4              ;1699
000266  1d3f              ADDS     r7,r7,#4              ;1699
                  |L31.616|
000268  e9dd1000          LDRD     r1,r0,[sp,#0]         ;1699
00026c  4281              CMP      r1,r0                 ;1699
00026e  d3f1              BCC      |L31.596|
                  |L31.624|
000270  4866              LDR      r0,|L31.1036|
000272  6b40              LDR      r0,[r0,#0x34]         ;1681
000274  f240311a          MOV      r1,#0x31a             ;1681
000278  4008              ANDS     r0,r0,r1              ;1681
00027a  2800              CMP      r0,#0                 ;1681
00027c  d0ba              BEQ      |L31.500|
00027e  2008              MOVS     r0,#8                 ;1707
000280  f7fffffe          BL       SDIO_GetFlagStatus
000284  b128              CBZ      r0,|L31.658|
000286  2008              MOVS     r0,#8                 ;1709
000288  f7fffffe          BL       SDIO_ClearFlag
00028c  2504              MOVS     r5,#4                 ;1710
00028e  4628              MOV      r0,r5                 ;1711
000290  e6ca              B        |L31.40|
                  |L31.658|
000292  2002              MOVS     r0,#2                 ;1713
000294  f7fffffe          BL       SDIO_GetFlagStatus
000298  b128              CBZ      r0,|L31.678|
00029a  2002              MOVS     r0,#2                 ;1715
00029c  f7fffffe          BL       SDIO_ClearFlag
0002a0  2502              MOVS     r5,#2                 ;1716
0002a2  4628              MOV      r0,r5                 ;1717
0002a4  e6c0              B        |L31.40|
                  |L31.678|
0002a6  2010              MOVS     r0,#0x10              ;1719
0002a8  f7fffffe          BL       SDIO_GetFlagStatus
0002ac  b128              CBZ      r0,|L31.698|
0002ae  2010              MOVS     r0,#0x10              ;1721
0002b0  f7fffffe          BL       SDIO_ClearFlag
0002b4  2505              MOVS     r5,#5                 ;1722
0002b6  4628              MOV      r0,r5                 ;1723
0002b8  e6b6              B        |L31.40|
                  |L31.698|
0002ba  f44f7000          MOV      r0,#0x200             ;1725
0002be  f7fffffe          BL       SDIO_GetFlagStatus
0002c2  b138              CBZ      r0,|L31.724|
0002c4  f44f7000          MOV      r0,#0x200             ;1727
0002c8  f7fffffe          BL       SDIO_ClearFlag
0002cc  2507              MOVS     r5,#7                 ;1728
0002ce  4628              MOV      r0,r5                 ;1729
0002d0  e6aa              B        |L31.40|
                  |L31.722|
0002d2  e027              B        |L31.804|
                  |L31.724|
0002d4  f44f7080          MOV      r0,#0x100             ;1732
0002d8  f7fffffe          BL       SDIO_GetFlagStatus
0002dc  2800              CMP      r0,#0                 ;1732
0002de  d05b              BEQ      |L31.920|
0002e0  4844              LDR      r0,|L31.1012|
0002e2  6800              LDR      r0,[r0,#0]            ;1734  ; CardType
0002e4  b138              CBZ      r0,|L31.758|
0002e6  4843              LDR      r0,|L31.1012|
0002e8  6800              LDR      r0,[r0,#0]            ;1734  ; CardType
0002ea  2801              CMP      r0,#1                 ;1734
0002ec  d003              BEQ      |L31.758|
0002ee  4841              LDR      r0,|L31.1012|
0002f0  6800              LDR      r0,[r0,#0]            ;1734  ; CardType
0002f2  2802              CMP      r0,#2                 ;1734
0002f4  d150              BNE      |L31.920|
                  |L31.758|
0002f6  2000              MOVS     r0,#0                 ;1737
0002f8  493f              LDR      r1,|L31.1016|
0002fa  6008              STR      r0,[r1,#0]            ;1737  ; SDIO_CmdInitStructure
0002fc  200c              MOVS     r0,#0xc               ;1738
0002fe  6048              STR      r0,[r1,#4]            ;1738  ; SDIO_CmdInitStructure
000300  2040              MOVS     r0,#0x40              ;1739
000302  6088              STR      r0,[r1,#8]            ;1739  ; SDIO_CmdInitStructure
000304  2000              MOVS     r0,#0                 ;1740
000306  60c8              STR      r0,[r1,#0xc]          ;1740  ; SDIO_CmdInitStructure
000308  f44f6080          MOV      r0,#0x400             ;1741
00030c  6108              STR      r0,[r1,#0x10]         ;1741  ; SDIO_CmdInitStructure
00030e  4608              MOV      r0,r1                 ;1742
000310  f7fffffe          BL       SDIO_SendCommand
000314  200c              MOVS     r0,#0xc               ;1745
000316  f7fffffe          BL       CmdResp1Error
00031a  4605              MOV      r5,r0                 ;1745
00031c  2d2a              CMP      r5,#0x2a              ;1747
00031e  d03b              BEQ      |L31.920|
000320  4628              MOV      r0,r5                 ;1749
000322  e681              B        |L31.40|
                  |L31.804|
000324  4838              LDR      r0,|L31.1032|
000326  6800              LDR      r0,[r0,#0]            ;1754  ; DeviceMode
000328  2801              CMP      r0,#1                 ;1754
00032a  d113              BNE      |L31.852|
00032c  2101              MOVS     r1,#1                 ;1756
00032e  f244301a          MOV      r0,#0x431a            ;1756
000332  f7fffffe          BL       SDIO_ITConfig
000336  bf00              NOP                            ;1757
                  |L31.824|
000338  482a              LDR      r0,|L31.996|
00033a  6800              LDR      r0,[r0,#0]            ;1757  ; TransferEnd
00033c  b918              CBNZ     r0,|L31.838|
00033e  4828              LDR      r0,|L31.992|
000340  7800              LDRB     r0,[r0,#0]            ;1757  ; TransferError
000342  282a              CMP      r0,#0x2a              ;1757
000344  d0f8              BEQ      |L31.824|
                  |L31.838|
000346  4826              LDR      r0,|L31.992|
000348  7800              LDRB     r0,[r0,#0]            ;1759  ; TransferError
00034a  282a              CMP      r0,#0x2a              ;1759
00034c  d024              BEQ      |L31.920|
00034e  4824              LDR      r0,|L31.992|
000350  7800              LDRB     r0,[r0,#0]            ;1761  ; TransferError
000352  e669              B        |L31.40|
                  |L31.852|
000354  482c              LDR      r0,|L31.1032|
000356  6800              LDR      r0,[r0,#0]            ;1764  ; DeviceMode
000358  b9f0              CBNZ     r0,|L31.920|
00035a  2101              MOVS     r1,#1                 ;1766
00035c  f240301a          MOV      r0,#0x31a             ;1766
000360  f7fffffe          BL       SDIO_ITConfig
000364  2001              MOVS     r0,#1                 ;1767
000366  f7fffffe          BL       SDIO_DMACmd
00036a  fb06f104          MUL      r1,r6,r4              ;1768
00036e  4648              MOV      r0,r9                 ;1768
000370  f7fffffe          BL       SD_LowLevel_DMA_TxConfig
000374  bf00              NOP                            ;1769
                  |L31.886|
000376  f7fffffe          BL       SD_DMAEndOfTransferStatus
00037a  b930              CBNZ     r0,|L31.906|
00037c  4819              LDR      r0,|L31.996|
00037e  6800              LDR      r0,[r0,#0]            ;1769  ; TransferEnd
000380  b918              CBNZ     r0,|L31.906|
000382  4817              LDR      r0,|L31.992|
000384  7800              LDRB     r0,[r0,#0]            ;1769  ; TransferError
000386  282a              CMP      r0,#0x2a              ;1769
000388  d0f5              BEQ      |L31.886|
                  |L31.906|
00038a  4815              LDR      r0,|L31.992|
00038c  7800              LDRB     r0,[r0,#0]            ;1771  ; TransferError
00038e  282a              CMP      r0,#0x2a              ;1771
000390  d002              BEQ      |L31.920|
000392  4813              LDR      r0,|L31.992|
000394  7800              LDRB     r0,[r0,#0]            ;1773  ; TransferError
000396  e647              B        |L31.40|
                  |L31.920|
000398  f24050ff          MOV      r0,#0x5ff             ;1778
00039c  f7fffffe          BL       SDIO_ClearFlag
0003a0  2000              MOVS     r0,#0                 ;1781
0003a2  9000              STR      r0,[sp,#0]            ;1781
0003a4  e002              B        |L31.940|
                  |L31.934|
0003a6  9800              LDR      r0,[sp,#0]            ;1781
0003a8  1c40              ADDS     r0,r0,#1              ;1781
0003aa  9000              STR      r0,[sp,#0]            ;1781
                  |L31.940|
0003ac  f64f71ff          MOV      r1,#0xffff            ;1781
0003b0  9800              LDR      r0,[sp,#0]            ;1781
0003b2  4288              CMP      r0,r1                 ;1781
0003b4  d3f7              BCC      |L31.934|
0003b6  a802              ADD      r0,sp,#8              ;1785
0003b8  f7fffffe          BL       IsCardProgramming
0003bc  4605              MOV      r5,r0                 ;1785
0003be  e003              B        |L31.968|
                  |L31.960|
0003c0  a802              ADD      r0,sp,#8              ;1789
0003c2  f7fffffe          BL       IsCardProgramming
0003c6  4605              MOV      r5,r0                 ;1789
                  |L31.968|
0003c8  2d2a              CMP      r5,#0x2a              ;1787
0003ca  d107              BNE      |L31.988|
0003cc  f89d0008          LDRB     r0,[sp,#8]            ;1787
0003d0  2807              CMP      r0,#7                 ;1787
0003d2  d0f5              BEQ      |L31.960|
0003d4  f89d0008          LDRB     r0,[sp,#8]            ;1787
0003d8  2806              CMP      r0,#6                 ;1787
0003da  d0f1              BEQ      |L31.960|
                  |L31.988|
0003dc  4628              MOV      r0,r5                 ;1792
0003de  e623              B        |L31.40|
;;;1794   
                          ENDP

                  |L31.992|
                          DCD      TransferError
                  |L31.996|
                          DCD      TransferEnd
                  |L31.1000|
                          DCD      TotalNumberOfBytes
                  |L31.1004|
                          DCD      0x000fffff
                  |L31.1008|
                          DCD      SDIO_DataInitStructure
                  |L31.1012|
                          DCD      CardType
                  |L31.1016|
                          DCD      SDIO_CmdInitStructure
                  |L31.1020|
                          DCD      ||RCA||
                  |L31.1024|
                          DCD      StopCondition
                  |L31.1028|
                          DCD      SrcBuffer
                  |L31.1032|
                          DCD      DeviceMode
                  |L31.1036|
                          DCD      0x40018000

                          AREA ||i.convert_from_bytes_to_power_of_two||, CODE, READONLY, ALIGN=1

                  convert_from_bytes_to_power_of_two PROC
;;;2956     */
;;;2957   static uint8_t convert_from_bytes_to_power_of_two(uint16_t NumberOfBytes)
000000  4601              MOV      r1,r0
;;;2958   {
;;;2959     uint8_t count = 0;
000002  2000              MOVS     r0,#0
;;;2960   
;;;2961     while (NumberOfBytes != 1)
000004  e002              B        |L32.12|
                  |L32.6|
;;;2962     {
;;;2963       NumberOfBytes >>= 1;
000006  1049              ASRS     r1,r1,#1
;;;2964       count++;
000008  1c42              ADDS     r2,r0,#1
00000a  b2d0              UXTB     r0,r2
                  |L32.12|
00000c  2901              CMP      r1,#1                 ;2961
00000e  d1fa              BNE      |L32.6|
;;;2965     }
;;;2966     return(count);
;;;2967   }
000010  4770              BX       lr
;;;2968   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CSD_Tab
                          %        16
                  CID_Tab
                          %        16
                  SDCardInfo
                          %        80
                  SDIO_InitStructure
                          %        24
                  SDIO_CmdInitStructure
                          %        20
                  SDIO_DataInitStructure
                          %        24

                          AREA ||.data||, DATA, ALIGN=2

                  CardType
                          DCD      0x00000000
                  ||RCA||
                          DCD      0x00000000
                  DeviceMode
                          DCD      0x00000002
                  TotalNumberOfBytes
                          DCD      0x00000000
                  StopCondition
                          DCD      0x00000000
                  SrcBuffer
                          DCD      0x00000000
                  DestBuffer
                          DCD      0x00000000
                  TransferError
00001c  2a000000          DCB      0x2a,0x00,0x00,0x00
                  TransferEnd
                          DCD      0x00000000
                  NumberOfBytes
                          DCD      0x00000000
