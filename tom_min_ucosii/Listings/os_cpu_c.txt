; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\os_cpu_c.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_cpu_c.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Libraries\CMSIS\CM3\CoreSupport -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I.\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\main -I.\User -I.\User\include -I.\fatfs -I.\Utilities\STM32_EVAL -I.\Utilities\STM32_EVAL\Common -I.\Utilities\STM32_EVAL\STM3210E_EVAL -I.\UCOSII\CORE -I.\UCOSII\PORTS -I.\UCOSII\CONFIG -I.\RTE\_Target_1 -I"D:\program files (x86)\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"D:\program files (x86)\keil5\ARM\CMSIS\Include" -D__UVISION_VERSION=523 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL --omf_browse=.\objects\os_cpu_c.crf UCOSII\PORTS\os_cpu_c.c]
                          THUMB

                          AREA ||i.OSInitHookBegin||, CODE, READONLY, ALIGN=2

                  OSInitHookBegin PROC
;;;66     #if OS_CPU_HOOKS_EN > 0u
;;;67     void  OSInitHookBegin (void)
000000  4805              LDR      r0,|L1.24|
;;;68     {
;;;69         INT32U   size;
;;;70         OS_STK  *pstk;
;;;71     
;;;72                                                                /* Clear exception stack for stack checking.*/
;;;73         pstk = &OS_CPU_ExceptStk[0];
;;;74         size = OS_CPU_EXCEPT_STK_SIZE;
000002  2180              MOVS     r1,#0x80
;;;75         while (size > 0u) {
000004  e002              B        |L1.12|
                  |L1.6|
;;;76             size--;
000006  1e49              SUBS     r1,r1,#1
;;;77            *pstk++ = (OS_STK)0;
000008  2200              MOVS     r2,#0
00000a  c004              STM      r0!,{r2}
                  |L1.12|
00000c  2900              CMP      r1,#0                 ;75
00000e  d1fa              BNE      |L1.6|
;;;78         }
;;;79     
;;;80         OS_CPU_ExceptStkBase = &OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE - 1u];
000010  4a02              LDR      r2,|L1.28|
000012  4b03              LDR      r3,|L1.32|
000014  601a              STR      r2,[r3,#0]  ; OS_CPU_ExceptStkBase
;;;81     
;;;82     #if OS_TMR_EN > 0u
;;;83         OSTmrCtr = 0u;
;;;84     #endif
;;;85     }
000016  4770              BX       lr
;;;86     #endif
                          ENDP

                  |L1.24|
                          DCD      OS_CPU_ExceptStk
                  |L1.28|
                          DCD      OS_CPU_ExceptStk+0x1fc
                  |L1.32|
                          DCD      OS_CPU_ExceptStkBase

                          AREA ||i.OSInitHookEnd||, CODE, READONLY, ALIGN=1

                  OSInitHookEnd PROC
;;;100    #if OS_CPU_HOOKS_EN > 0u
;;;101    void  OSInitHookEnd (void)
000000  4770              BX       lr
;;;102    {
;;;103    }
;;;104    #endif
                          ENDP


                          AREA ||i.OSTCBInitHook||, CODE, READONLY, ALIGN=1

                  OSTCBInitHook PROC
;;;311    #if OS_CPU_HOOKS_EN > 0u
;;;312    void  OSTCBInitHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;313    {
;;;314    #if OS_APP_HOOKS_EN > 0u
;;;315        App_TCBInitHook(ptcb);
;;;316    #else
;;;317        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;318    #endif
;;;319    }
;;;320    #endif
                          ENDP


                          AREA ||i.OSTaskCreateHook||, CODE, READONLY, ALIGN=1

                  OSTaskCreateHook PROC
;;;117    #if OS_CPU_HOOKS_EN > 0u
;;;118    void  OSTaskCreateHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;119    {
;;;120    #if OS_APP_HOOKS_EN > 0u
;;;121        App_TaskCreateHook(ptcb);
;;;122    #else
;;;123        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;124    #endif
;;;125    }
;;;126    #endif
                          ENDP


                          AREA ||i.OSTaskDelHook||, CODE, READONLY, ALIGN=1

                  OSTaskDelHook PROC
;;;140    #if OS_CPU_HOOKS_EN > 0u
;;;141    void  OSTaskDelHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;142    {
;;;143    #if OS_APP_HOOKS_EN > 0u
;;;144        App_TaskDelHook(ptcb);
;;;145    #else
;;;146        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;147    #endif
;;;148    }
;;;149    #endif
                          ENDP


                          AREA ||i.OSTaskIdleHook||, CODE, READONLY, ALIGN=1

                  OSTaskIdleHook PROC
;;;163    #if OS_CPU_HOOKS_EN > 0u
;;;164    void  OSTaskIdleHook (void)
000000  4770              BX       lr
;;;165    {
;;;166    #if OS_APP_HOOKS_EN > 0u
;;;167        App_TaskIdleHook();
;;;168    #endif
;;;169    }
;;;170    #endif
                          ENDP


                          AREA ||i.OSTaskReturnHook||, CODE, READONLY, ALIGN=1

                  OSTaskReturnHook PROC
;;;185    #if OS_CPU_HOOKS_EN > 0u
;;;186    void  OSTaskReturnHook (OS_TCB  *ptcb)
000000  4770              BX       lr
;;;187    {
;;;188    #if OS_APP_HOOKS_EN > 0u
;;;189        App_TaskReturnHook(ptcb);
;;;190    #else
;;;191        (void)ptcb;
;;;192    #endif
;;;193    }
;;;194    #endif
                          ENDP


                          AREA ||i.OSTaskStatHook||, CODE, READONLY, ALIGN=1

                  OSTaskStatHook PROC
;;;207    #if OS_CPU_HOOKS_EN > 0u
;;;208    void  OSTaskStatHook (void)
000000  4770              BX       lr
;;;209    {
;;;210    #if OS_APP_HOOKS_EN > 0u
;;;211        App_TaskStatHook();
;;;212    #endif
;;;213    }
;;;214    #endif
                          ENDP


                          AREA ||i.OSTaskStkInit||, CODE, READONLY, ALIGN=2

                  OSTaskStkInit PROC
;;;244    
;;;245    OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
000000  b570              PUSH     {r4-r6,lr}
;;;246    {
000002  4604              MOV      r4,r0
;;;247        OS_STK *stk;
;;;248    
;;;249    
;;;250        (void)opt;                                   /* 'opt' is not used, prevent warning                 */
;;;251        stk       = ptos;                            /* Load stack pointer                                 */
000004  4610              MOV      r0,r2
;;;252    
;;;253                                                     /* Registers stacked as if auto-saved on exception    */
;;;254        *(stk)    = (INT32U)0x01000000uL;            /* xPSR                                               */
000006  f04f7580          MOV      r5,#0x1000000
00000a  6005              STR      r5,[r0,#0]
;;;255        *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
00000c  1f05              SUBS     r5,r0,#4
00000e  4628              MOV      r0,r5
000010  602c              STR      r4,[r5,#0]
;;;256        *(--stk)  = (INT32U)OS_TaskReturn;           /* R14 (LR)  */
000012  4e21              LDR      r6,|L9.152|
000014  1f05              SUBS     r5,r0,#4
000016  4628              MOV      r0,r5
000018  602e              STR      r6,[r5,#0]
;;;257        *(--stk)  = (INT32U)0x12121212uL;            /* R12                                                */
00001a  f04f3612          MOV      r6,#0x12121212
00001e  1f05              SUBS     r5,r0,#4
000020  4628              MOV      r0,r5
000022  602e              STR      r6,[r5,#0]
;;;258        *(--stk)  = (INT32U)0x03030303uL;            /* R3                                                 */
000024  f04f3603          MOV      r6,#0x3030303
000028  1f05              SUBS     r5,r0,#4
00002a  4628              MOV      r0,r5
00002c  602e              STR      r6,[r5,#0]
;;;259        *(--stk)  = (INT32U)0x02020202uL;            /* R2                                                 */
00002e  f04f3602          MOV      r6,#0x2020202
000032  1f05              SUBS     r5,r0,#4
000034  4628              MOV      r0,r5
000036  602e              STR      r6,[r5,#0]
;;;260        *(--stk)  = (INT32U)0x01010101uL;            /* R1                                                 */
000038  1076              ASRS     r6,r6,#1
00003a  1f05              SUBS     r5,r0,#4
00003c  4628              MOV      r0,r5
00003e  602e              STR      r6,[r5,#0]
;;;261        *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
000040  1f05              SUBS     r5,r0,#4
000042  4628              MOV      r0,r5
000044  6029              STR      r1,[r5,#0]
;;;262    
;;;263                                                     /* Remaining registers saved on process stack         */
;;;264        *(--stk)  = (INT32U)0x11111111uL;            /* R11                                                */
000046  f04f3611          MOV      r6,#0x11111111
00004a  1f05              SUBS     r5,r0,#4
00004c  4628              MOV      r0,r5
00004e  602e              STR      r6,[r5,#0]
;;;265        *(--stk)  = (INT32U)0x10101010uL;            /* R10                                                */
000050  f04f3610          MOV      r6,#0x10101010
000054  1f05              SUBS     r5,r0,#4
000056  4628              MOV      r0,r5
000058  602e              STR      r6,[r5,#0]
;;;266        *(--stk)  = (INT32U)0x09090909uL;            /* R9                                                 */
00005a  f04f3609          MOV      r6,#0x9090909
00005e  1f05              SUBS     r5,r0,#4
000060  4628              MOV      r0,r5
000062  602e              STR      r6,[r5,#0]
;;;267        *(--stk)  = (INT32U)0x08080808uL;            /* R8                                                 */
000064  f04f3608          MOV      r6,#0x8080808
000068  1f05              SUBS     r5,r0,#4
00006a  4628              MOV      r0,r5
00006c  602e              STR      r6,[r5,#0]
;;;268        *(--stk)  = (INT32U)0x07070707uL;            /* R7                                                 */
00006e  f04f3607          MOV      r6,#0x7070707
000072  1f05              SUBS     r5,r0,#4
000074  4628              MOV      r0,r5
000076  602e              STR      r6,[r5,#0]
;;;269        *(--stk)  = (INT32U)0x06060606uL;            /* R6                                                 */
000078  f04f3606          MOV      r6,#0x6060606
00007c  1f05              SUBS     r5,r0,#4
00007e  4628              MOV      r0,r5
000080  602e              STR      r6,[r5,#0]
;;;270        *(--stk)  = (INT32U)0x05050505uL;            /* R5                                                 */
000082  f04f3605          MOV      r6,#0x5050505
000086  1f05              SUBS     r5,r0,#4
000088  4628              MOV      r0,r5
00008a  602e              STR      r6,[r5,#0]
;;;271        *(--stk)  = (INT32U)0x04040404uL;            /* R4                                                 */
00008c  f04f3604          MOV      r6,#0x4040404
000090  1f05              SUBS     r5,r0,#4
000092  4628              MOV      r0,r5
000094  602e              STR      r6,[r5,#0]
;;;272    
;;;273        return (stk);
;;;274    }
000096  bd70              POP      {r4-r6,pc}
;;;275    
                          ENDP

                  |L9.152|
                          DCD      OS_TaskReturn

                          AREA ||i.OSTaskSwHook||, CODE, READONLY, ALIGN=1

                  OSTaskSwHook PROC
;;;291    #if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
;;;292    void  OSTaskSwHook (void)
000000  4770              BX       lr
;;;293    {
;;;294    #if OS_APP_HOOKS_EN > 0u
;;;295        App_TaskSwHook();
;;;296    #endif
;;;297    }
;;;298    #endif
                          ENDP


                          AREA ||i.OSTimeTickHook||, CODE, READONLY, ALIGN=1

                  OSTimeTickHook PROC
;;;333    #if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
;;;334    void  OSTimeTickHook (void)
000000  4770              BX       lr
;;;335    {
;;;336    #if OS_APP_HOOKS_EN > 0u
;;;337        App_TimeTickHook();
;;;338    #endif
;;;339    
;;;340    #if OS_TMR_EN > 0u
;;;341        OSTmrCtr++;
;;;342        if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
;;;343            OSTmrCtr = 0;
;;;344            OSTmrSignal();
;;;345        }
;;;346    #endif
;;;347    }
;;;348    #endif
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  OS_CPU_ExceptStk
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  OS_CPU_ExceptStkBase
                          DCD      0x00000000
