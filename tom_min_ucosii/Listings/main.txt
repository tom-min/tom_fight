; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Libraries\CMSIS\CM3\CoreSupport -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I.\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\main -I.\User -I.\User\include -I.\fatfs -I.\Utilities\STM32_EVAL -I.\Utilities\STM32_EVAL\Common -I.\Utilities\STM32_EVAL\STM3210E_EVAL -I.\UCOSII\CORE -I.\UCOSII\PORTS -I.\UCOSII\CONFIG -I.\RTE\_Target_1 -I"D:\program files (x86)\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"D:\program files (x86)\keil5\ARM\CMSIS\Include" -D__UVISION_VERSION=523 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL --omf_browse=.\objects\main.crf main\main.c]
                          THUMB

                          AREA ||i.Beep_Init||, CODE, READONLY, ALIGN=2

                  Beep_Init PROC
;;;107    
;;;108    void Beep_Init(void)
000000  b508              PUSH     {r3,lr}
;;;109    {
;;;110    	GPIO_InitTypeDef GPIO_Init88;
;;;111    	
;;;112    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
000002  2101              MOVS     r1,#1
000004  2020              MOVS     r0,#0x20
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;113    	
;;;114    	GPIO_Init88.GPIO_Pin=GPIO_Pin_6;
00000a  2040              MOVS     r0,#0x40
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;115    	//配置成普通io时，直接选择推挽输出，而不是复用推挽输出，还不打开复用时钟，细节细节，我真的太菜了
;;;116    	GPIO_Init88.GPIO_Mode=GPIO_Mode_Out_PP;//fatal mistake:Out
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;117    	GPIO_Init88.GPIO_Speed=GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d0002          STRB     r0,[sp,#2]
;;;118    	GPIO_Init(GPIOD,&GPIO_Init88);//PD6
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L1.40|
000020  f7fffffe          BL       GPIO_Init
;;;119    }
000024  bd08              POP      {r3,pc}
;;;120    
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      0x40011400

                          AREA ||i.GPIO_Configure||, CODE, READONLY, ALIGN=2

                  GPIO_Configure PROC
;;;72     //USART1,USART3
;;;73     void GPIO_Configure(void)
000000  b508              PUSH     {r3,lr}
;;;74     {
;;;75     	GPIO_InitTypeDef GPIO_InitStructure;
;;;76     	
;;;77     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOC|RCC_APB2Periph_AFIO|RCC_APB2Periph_USART1, ENABLE);
000002  2101              MOVS     r1,#1
000004  f244001d          MOV      r0,#0x401d
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;78     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2|RCC_APB1Periph_USART3|RCC_APB1Periph_UART4|RCC_APB1Periph_UART5, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  f44f10f0          MOV      r0,#0x1e0000
000012  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;79     
;;;80     
;;;81     	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_9|GPIO_Pin_2;
000016  f44f7001          MOV      r0,#0x204
00001a  f8ad0000          STRH     r0,[sp,#0]
;;;82     	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP;//fatal mistake:Out
00001e  2018              MOVS     r0,#0x18
000020  f88d0003          STRB     r0,[sp,#3]
;;;83     	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
000024  2003              MOVS     r0,#3
000026  f88d0002          STRB     r0,[sp,#2]
;;;84     	GPIO_Init(GPIOA,&GPIO_InitStructure);//PA9,PA2:TX
00002a  4669              MOV      r1,sp
00002c  481b              LDR      r0,|L2.156|
00002e  f7fffffe          BL       GPIO_Init
;;;85     
;;;86     	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_10;
000032  f44f6080          MOV      r0,#0x400
000036  f8ad0000          STRH     r0,[sp,#0]
;;;87     	GPIO_Init(GPIOB,&GPIO_InitStructure);//PB10:TX
00003a  4669              MOV      r1,sp
00003c  4818              LDR      r0,|L2.160|
00003e  f7fffffe          BL       GPIO_Init
;;;88     
;;;89     	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_10;
000042  f44f6080          MOV      r0,#0x400
000046  f8ad0000          STRH     r0,[sp,#0]
;;;90     	GPIO_Init(GPIOC,&GPIO_InitStructure);//PC10:TX
00004a  4669              MOV      r1,sp
00004c  4815              LDR      r0,|L2.164|
00004e  f7fffffe          BL       GPIO_Init
;;;91     
;;;92     	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_12;
000052  f44f5080          MOV      r0,#0x1000
000056  f8ad0000          STRH     r0,[sp,#0]
;;;93     	GPIO_Init(GPIOC,&GPIO_InitStructure);//PC12:TX
00005a  4669              MOV      r1,sp
00005c  4811              LDR      r0,|L2.164|
00005e  f7fffffe          BL       GPIO_Init
;;;94     
;;;95     	
;;;96     	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_10|GPIO_Pin_3;
000062  f44f6081          MOV      r0,#0x408
000066  f8ad0000          STRH     r0,[sp,#0]
;;;97     	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IN_FLOATING;
00006a  2004              MOVS     r0,#4
00006c  f88d0003          STRB     r0,[sp,#3]
;;;98     	GPIO_Init(GPIOA,&GPIO_InitStructure);//PA10,PA3:RX
000070  4669              MOV      r1,sp
000072  480a              LDR      r0,|L2.156|
000074  f7fffffe          BL       GPIO_Init
;;;99     
;;;100    	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_11;
000078  f44f6000          MOV      r0,#0x800
00007c  f8ad0000          STRH     r0,[sp,#0]
;;;101    	GPIO_Init(GPIOB,&GPIO_InitStructure);//PB11:RX
000080  4669              MOV      r1,sp
000082  4807              LDR      r0,|L2.160|
000084  f7fffffe          BL       GPIO_Init
;;;102    
;;;103    	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_11;
000088  f44f6000          MOV      r0,#0x800
00008c  f8ad0000          STRH     r0,[sp,#0]
;;;104    	GPIO_Init(GPIOC,&GPIO_InitStructure);//PC11:RX
000090  4669              MOV      r1,sp
000092  4804              LDR      r0,|L2.164|
000094  f7fffffe          BL       GPIO_Init
;;;105    }
000098  bd08              POP      {r3,pc}
;;;106    
                          ENDP

00009a  0000              DCW      0x0000
                  |L2.156|
                          DCD      0x40010800
                  |L2.160|
                          DCD      0x40010c00
                  |L2.164|
                          DCD      0x40011000

                          AREA ||i.Led_Init||, CODE, READONLY, ALIGN=2

                  Led_Init PROC
;;;121    
;;;122    void Led_Init(void)
000000  b508              PUSH     {r3,lr}
;;;123    {
;;;124    	GPIO_InitTypeDef GPIO_Init88;
;;;125    	
;;;126    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOD, ENABLE);
000002  2101              MOVS     r1,#1
000004  2028              MOVS     r0,#0x28
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;127    	
;;;128    	GPIO_Init88.GPIO_Pin=GPIO_Pin_5;
00000a  2020              MOVS     r0,#0x20
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;129    	GPIO_Init88.GPIO_Mode=GPIO_Mode_Out_PP;//fatal mistake:Out
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;130    	GPIO_Init88.GPIO_Speed=GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d0002          STRB     r0,[sp,#2]
;;;131    	GPIO_Init(GPIOB,&GPIO_Init88);//PB5
00001c  4669              MOV      r1,sp
00001e  480a              LDR      r0,|L3.72|
000020  f7fffffe          BL       GPIO_Init
;;;132    	
;;;133    	GPIO_Init88.GPIO_Pin=GPIO_Pin_12;
000024  f44f5080          MOV      r0,#0x1000
000028  f8ad0000          STRH     r0,[sp,#0]
;;;134    	GPIO_Init(GPIOD,&GPIO_Init88);//PD12
00002c  4669              MOV      r1,sp
00002e  4807              LDR      r0,|L3.76|
000030  f7fffffe          BL       GPIO_Init
;;;135    	
;;;136    	Led_Off_1;
000034  2120              MOVS     r1,#0x20
000036  4804              LDR      r0,|L3.72|
000038  f7fffffe          BL       GPIO_SetBits
;;;137    	Led_Off_2;
00003c  f44f5180          MOV      r1,#0x1000
000040  4802              LDR      r0,|L3.76|
000042  f7fffffe          BL       GPIO_SetBits
;;;138    }
000046  bd08              POP      {r3,pc}
;;;139    
                          ENDP

                  |L3.72|
                          DCD      0x40010c00
                  |L3.76|
                          DCD      0x40011400

                          AREA ||i.OS_Heart_Init||, CODE, READONLY, ALIGN=1

                  OS_Heart_Init PROC
;;;198    
;;;199    void OS_Heart_Init(void)
000000  b510              PUSH     {r4,lr}
;;;200    {
;;;201    	delay_init();
000002  f7fffffe          BL       delay_init
;;;202    }
000006  bd10              POP      {r4,pc}
;;;203    
                          ENDP


                          AREA ||i.SendChar||, CODE, READONLY, ALIGN=2

                  SendChar PROC
;;;48     
;;;49     int SendChar (int ch)  
000000  b510              PUSH     {r4,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51     #if defined(USART1_DEBUG)
;;;52     	USART_SendData(USART1,(unsigned char)ch);        
;;;53     	while(USART_GetFlagStatus(USART1,USART_FLAG_TC) != SET);
;;;54     #elif defined(USART2_DEBUG)
;;;55     	USART_SendData(USART2,(unsigned char)ch);        
;;;56     	while(USART_GetFlagStatus(USART2,USART_FLAG_TC) != SET);
;;;57     #elif defined(USART3_DEBUG)
;;;58     	USART_SendData(USART3,(unsigned char)ch);        
;;;59     	while(USART_GetFlagStatus(USART3,USART_FLAG_TC) != SET);
;;;60     #elif defined(UART4_DEBUG)
;;;61     	USART_SendData(UART4,(unsigned char)ch);        
;;;62     	while(USART_GetFlagStatus(UART4,USART_FLAG_TC) != SET);	
;;;63     #elif defined(UART5_DEBUG)
;;;64     	USART_SendData(UART5,(unsigned char)ch);        
000004  b2e1              UXTB     r1,r4
000006  4805              LDR      r0,|L5.28|
000008  f7fffffe          BL       USART_SendData
;;;65     	while(USART_GetFlagStatus(UART5,USART_FLAG_TC) != SET);	
00000c  bf00              NOP      
                  |L5.14|
00000e  2140              MOVS     r1,#0x40
000010  4802              LDR      r0,|L5.28|
000012  f7fffffe          BL       USART_GetFlagStatus
000016  2801              CMP      r0,#1
000018  d1f9              BNE      |L5.14|
;;;66     #else
;;;67       	return (ch);
;;;68     #endif
;;;69     }
00001a  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  |L5.28|
                          DCD      0x40005000

                          AREA ||i.Tom_CheckStackSize||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Tom_CheckStackSize PROC
;;;272    
;;;273    void Tom_CheckStackSize(INT8U prio)
000000  b51c              PUSH     {r2-r4,lr}
;;;274    {
000002  4604              MOV      r4,r0
;;;275    	OS_STK_DATA  stk_data;
;;;276    	
;;;277    	OSTaskStkChk(prio, &stk_data);
000004  4669              MOV      r1,sp
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       OSTaskStkChk
;;;278    #if 1
;;;279    	printf("current prio: %d, free size: %d, used size: %d\r\n",prio,stk_data.OSFree*4,stk_data.OSUsed*4);
00000c  9801              LDR      r0,[sp,#4]
00000e  0083              LSLS     r3,r0,#2
000010  9800              LDR      r0,[sp,#0]
000012  0082              LSLS     r2,r0,#2
000014  4621              MOV      r1,r4
000016  a002              ADR      r0,|L6.32|
000018  f7fffffe          BL       __2printf
;;;280    #endif
;;;281    }
00001c  bd1c              POP      {r2-r4,pc}
;;;282    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
000020  63757272          DCB      "current prio: %d, free size: %d, used size: %d\r\n",0
000024  656e7420
000028  7072696f
00002c  3a202564
000030  2c206672
000034  65652073
000038  697a653a
00003c  2025642c
000040  20757365
000044  64207369
000048  7a653a20
00004c  25640d0a
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.USART_Configure||, CODE, READONLY, ALIGN=2

                  USART_Configure PROC
;;;140    
;;;141    void USART_Configure(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;142    {
;;;143    	USART_InitTypeDef USART_InitStructure;
;;;144    	
;;;145    	USART_InitStructure.USART_BaudRate=115200;
000002  f44f30e1          MOV      r0,#0x1c200
000006  9000              STR      r0,[sp,#0]
;;;146    	USART_InitStructure.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
000008  2000              MOVS     r0,#0
00000a  f8ad000c          STRH     r0,[sp,#0xc]
;;;147    	USART_InitStructure.USART_Mode=USART_Mode_Tx|USART_Mode_Rx;
00000e  200c              MOVS     r0,#0xc
000010  f8ad000a          STRH     r0,[sp,#0xa]
;;;148    	USART_InitStructure.USART_Parity=USART_Parity_No;
000014  2000              MOVS     r0,#0
000016  f8ad0008          STRH     r0,[sp,#8]
;;;149    	USART_InitStructure.USART_StopBits=USART_StopBits_1;
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;150    	USART_InitStructure.USART_WordLength=USART_WordLength_8b;
00001e  f8ad0004          STRH     r0,[sp,#4]
;;;151    
;;;152    
;;;153    	USART_Init(USART1,&USART_InitStructure);
000022  4669              MOV      r1,sp
000024  4822              LDR      r0,|L7.176|
000026  f7fffffe          BL       USART_Init
;;;154    	USART_Cmd(USART1, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  4820              LDR      r0,|L7.176|
00002e  f7fffffe          BL       USART_Cmd
;;;155    	
;;;156    	USART_Init(USART2,&USART_InitStructure);
000032  4669              MOV      r1,sp
000034  481f              LDR      r0,|L7.180|
000036  f7fffffe          BL       USART_Init
;;;157    	USART_Cmd(USART2, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  481d              LDR      r0,|L7.180|
00003e  f7fffffe          BL       USART_Cmd
;;;158    
;;;159    	USART_Init(USART3,&USART_InitStructure);
000042  4669              MOV      r1,sp
000044  481c              LDR      r0,|L7.184|
000046  f7fffffe          BL       USART_Init
;;;160    	USART_Cmd(USART3, ENABLE);
00004a  2101              MOVS     r1,#1
00004c  481a              LDR      r0,|L7.184|
00004e  f7fffffe          BL       USART_Cmd
;;;161    
;;;162    	USART_Init(UART4,&USART_InitStructure);
000052  4669              MOV      r1,sp
000054  4819              LDR      r0,|L7.188|
000056  f7fffffe          BL       USART_Init
;;;163    	USART_Cmd(UART4, ENABLE);
00005a  2101              MOVS     r1,#1
00005c  4817              LDR      r0,|L7.188|
00005e  f7fffffe          BL       USART_Cmd
;;;164    
;;;165    	USART_Init(UART5,&USART_InitStructure);
000062  4669              MOV      r1,sp
000064  4816              LDR      r0,|L7.192|
000066  f7fffffe          BL       USART_Init
;;;166    	USART_Cmd(UART5, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  4814              LDR      r0,|L7.192|
00006e  f7fffffe          BL       USART_Cmd
;;;167    	
;;;168    	USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);
000072  2201              MOVS     r2,#1
000074  f2405125          MOV      r1,#0x525
000078  480d              LDR      r0,|L7.176|
00007a  f7fffffe          BL       USART_ITConfig
;;;169    	USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
00007e  2201              MOVS     r2,#1
000080  f2405125          MOV      r1,#0x525
000084  480b              LDR      r0,|L7.180|
000086  f7fffffe          BL       USART_ITConfig
;;;170    	USART_ITConfig(USART3,USART_IT_RXNE,ENABLE);
00008a  2201              MOVS     r2,#1
00008c  f2405125          MOV      r1,#0x525
000090  4809              LDR      r0,|L7.184|
000092  f7fffffe          BL       USART_ITConfig
;;;171    	USART_ITConfig(UART4,USART_IT_RXNE,ENABLE);
000096  2201              MOVS     r2,#1
000098  f2405125          MOV      r1,#0x525
00009c  4807              LDR      r0,|L7.188|
00009e  f7fffffe          BL       USART_ITConfig
;;;172    	USART_ITConfig(UART5,USART_IT_RXNE,ENABLE);
0000a2  2201              MOVS     r2,#1
0000a4  f2405125          MOV      r1,#0x525
0000a8  4805              LDR      r0,|L7.192|
0000aa  f7fffffe          BL       USART_ITConfig
;;;173    }
0000ae  bd1f              POP      {r0-r4,pc}
;;;174    
                          ENDP

                  |L7.176|
                          DCD      0x40013800
                  |L7.180|
                          DCD      0x40004400
                  |L7.184|
                          DCD      0x40004800
                  |L7.188|
                          DCD      0x40004c00
                  |L7.192|
                          DCD      0x40005000

                          AREA ||i.delay_init||, CODE, READONLY, ALIGN=2

                  delay_init PROC
;;;175    
;;;176    void delay_init(void)
000000  b510              PUSH     {r4,lr}
;;;177    {
;;;178    	uint32_t RELOAD=0;	//
000002  bf00              NOP      
;;;179    
;;;180    
;;;181    	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);  	//????ía2?ê±?ó HCLK / 8
000004  f06f0004          MVN      r0,#4
000008  f7fffffe          BL       SysTick_CLKSourceConfig
;;;182    
;;;183    	fac_us = SystemCoreClock / 8000000;  					//?μí3ê±?óμ? 1/8
00000c  4810              LDR      r0,|L8.80|
00000e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000010  4910              LDR      r1,|L8.84|
000012  fbb0f0f1          UDIV     r0,r0,r1
000016  4910              LDR      r1,|L8.88|
000018  7008              STRB     r0,[r1,#0]
;;;184    
;;;185    	
;;;186    	RELOAD = SystemCoreClock / 8000000;		//?????óμ???êy′?êy￡?μ￥??Hz
00001a  480d              LDR      r0,|L8.80|
00001c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001e  490d              LDR      r1,|L8.84|
000020  fbb0f4f1          UDIV     r4,r0,r1
;;;187    	RELOAD *= 1000000 / OS_TICKS_PER_SEC;		//?ù?Y2ù×÷?μí3μ?D?ì?ê±3¤à′????ò?3?ê±??￡?μ￥??￡oKHz
000024  f2413088          MOV      r0,#0x1388
000028  4344              MULS     r4,r0,r4
;;;188    	                                    		//RELOAD?a24????êy?÷￡?×?′ó?μ?a:16777216 
;;;189    
;;;190    	fac_ms = 1000 / OS_TICKS_PER_SEC;
00002a  2005              MOVS     r0,#5
00002c  490b              LDR      r1,|L8.92|
00002e  8008              STRH     r0,[r1,#0]
;;;191    
;;;192    	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;	//?a??SysTick?¨ê±?÷?D?????ó
000030  f04f20e0          MOV      r0,#0xe000e000
000034  6900              LDR      r0,[r0,#0x10]
000036  f0400002          ORR      r0,r0,#2
00003a  f04f21e0          MOV      r1,#0xe000e000
00003e  6108              STR      r0,[r1,#0x10]
;;;193    	SysTick->LOAD = RELOAD;					//ò?3???êy?μ￡???1/TICKINT_CNT???D??ò?′?
000040  4608              MOV      r0,r1
000042  6144              STR      r4,[r0,#0x14]
;;;194    	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;   //?aê?μ1êy
000044  6900              LDR      r0,[r0,#0x10]
000046  f0400001          ORR      r0,r0,#1
00004a  6108              STR      r0,[r1,#0x10]
;;;195    
;;;196    }
00004c  bd10              POP      {r4,pc}
;;;197    
                          ENDP

00004e  0000              DCW      0x0000
                  |L8.80|
                          DCD      SystemCoreClock
                  |L8.84|
                          DCD      0x007a1200
                  |L8.88|
                          DCD      fac_us
                  |L8.92|
                          DCD      fac_ms

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;232    
;;;233    int main(void)
000000  b510              PUSH     {r4,lr}
;;;234    {   
000002  b08a              SUB      sp,sp,#0x28
;;;235    	RCC_ClocksTypeDef RCC_Clocks;
;;;236    	
;;;237    	GPIO_Configure();
000004  f7fffffe          BL       GPIO_Configure
;;;238    	USART_Configure();
000008  f7fffffe          BL       USART_Configure
;;;239    
;;;240    #ifdef APPLICATION
;;;241    	printf("welcome to APPLICATION, VERSION is %s.\r\n",APPLICATION_VERSION);
00000c  a121              ADR      r1,|L9.148|
00000e  a02b              ADR      r0,|L9.188|
000010  f7fffffe          BL       __2printf
;;;242    #endif		
;;;243    		
;;;244    	RCC_GetClocksFreq(&RCC_Clocks);
000014  a805              ADD      r0,sp,#0x14
000016  f7fffffe          BL       RCC_GetClocksFreq
;;;245    	
;;;246    	printf("\r\nSYSCLK_Frequency = %d MHz\n",RCC_Clocks.SYSCLK_Frequency/1000000);
00001a  4933              LDR      r1,|L9.232|
00001c  9805              LDR      r0,[sp,#0x14]
00001e  fbb0f4f1          UDIV     r4,r0,r1
000022  4621              MOV      r1,r4
000024  a031              ADR      r0,|L9.236|
000026  f7fffffe          BL       __2printf
;;;247    	printf("\r\nHCLK_Frequency = %d MHz\n",RCC_Clocks.HCLK_Frequency/1000000);
00002a  492f              LDR      r1,|L9.232|
00002c  9806              LDR      r0,[sp,#0x18]
00002e  fbb0f4f1          UDIV     r4,r0,r1
000032  4621              MOV      r1,r4
000034  a035              ADR      r0,|L9.268|
000036  f7fffffe          BL       __2printf
;;;248    	printf("\r\nPCLK1_Frequency = %d MHz\n",RCC_Clocks.PCLK1_Frequency/1000000);
00003a  492b              LDR      r1,|L9.232|
00003c  9807              LDR      r0,[sp,#0x1c]
00003e  fbb0f4f1          UDIV     r4,r0,r1
000042  4621              MOV      r1,r4
000044  a038              ADR      r0,|L9.296|
000046  f7fffffe          BL       __2printf
;;;249    	printf("\r\nPCLK2_Frequency = %d MHz\n",RCC_Clocks.PCLK2_Frequency/1000000);
00004a  4927              LDR      r1,|L9.232|
00004c  9808              LDR      r0,[sp,#0x20]
00004e  fbb0f4f1          UDIV     r4,r0,r1
000052  4621              MOV      r1,r4
000054  a03b              ADR      r0,|L9.324|
000056  f7fffffe          BL       __2printf
;;;250    
;;;251    #if 1
;;;252    	OS_Heart_Init();  //初始化ucsos心跳，不然调度不起来
00005a  f7fffffe          BL       OS_Heart_Init
;;;253    	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);  //3?ê??ˉ?D??ó??è??
00005e  f44f60a0          MOV      r0,#0x500
000062  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;254    
;;;255    	OSInit();  //初始化ucosii
000066  f7fffffe          BL       OSInit
;;;256    	//创建起始任务，任务堆栈地址是递减的，所以地址写成这样
;;;257    	//OSTaskCreate(start_task, (void *)0, (OS_STK *)&Start_Task_STK[Start_STK_Size-1], Start_Task_PRIO);  //
;;;258    	OSTaskCreateExt(	start_task,
00006a  2001              MOVS     r0,#1
00006c  2100              MOVS     r1,#0
00006e  2240              MOVS     r2,#0x40
000070  4b3b              LDR      r3,|L9.352|
000072  e9cd3201          STRD     r3,r2,[sp,#4]
000076  e9cd1003          STRD     r1,r0,[sp,#0xc]
00007a  200a              MOVS     r0,#0xa
00007c  4603              MOV      r3,r0
00007e  4a38              LDR      r2,|L9.352|
000080  32fc              ADDS     r2,r2,#0xfc
000082  9000              STR      r0,[sp,#0]
000084  4837              LDR      r0,|L9.356|
000086  f7fffffe          BL       OSTaskCreateExt
;;;259    					NULL,
;;;260    					(OS_STK *)&Start_Task_STK[Start_STK_Size-1],
;;;261    					Start_Task_PRIO,
;;;262    					Start_Task_PRIO,
;;;263    					(OS_STK *)Start_Task_STK,
;;;264    					Start_STK_Size,
;;;265    					NULL,
;;;266    					OS_TASK_OPT_STK_CHK);
;;;267    
;;;268    	OSStart();  //启动ucosii
00008a  f7fffffe          BL       OSStart
;;;269    #endif	
;;;270    }
00008e  2000              MOVS     r0,#0
000090  b00a              ADD      sp,sp,#0x28
000092  bd10              POP      {r4,pc}
;;;271    
                          ENDP

                  |L9.148|
000094  53544d33          DCB      "STM32F103VET6_APPLICATION_V_11_20191007",0
000098  32463130
00009c  33564554
0000a0  365f4150
0000a4  504c4943
0000a8  4154494f
0000ac  4e5f565f
0000b0  31315f32
0000b4  30313931
0000b8  30303700
                  |L9.188|
0000bc  77656c63          DCB      "welcome to APPLICATION, VERSION is %s.\r\n",0
0000c0  6f6d6520
0000c4  746f2041
0000c8  50504c49
0000cc  43415449
0000d0  4f4e2c20
0000d4  56455253
0000d8  494f4e20
0000dc  69732025
0000e0  732e0d0a
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L9.232|
                          DCD      0x000f4240
                  |L9.236|
0000ec  0d0a5359          DCB      "\r\nSYSCLK_Frequency = %d MHz\n",0
0000f0  53434c4b
0000f4  5f467265
0000f8  7175656e
0000fc  6379203d
000100  20256420
000104  4d487a0a
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L9.268|
00010c  0d0a4843          DCB      "\r\nHCLK_Frequency = %d MHz\n",0
000110  4c4b5f46
000114  72657175
000118  656e6379
00011c  203d2025
000120  64204d48
000124  7a0a00  
000127  00                DCB      0
                  |L9.296|
000128  0d0a5043          DCB      "\r\nPCLK1_Frequency = %d MHz\n",0
00012c  4c4b315f
000130  46726571
000134  75656e63
000138  79203d20
00013c  2564204d
000140  487a0a00
                  |L9.324|
000144  0d0a5043          DCB      "\r\nPCLK2_Frequency = %d MHz\n",0
000148  4c4b325f
00014c  46726571
000150  75656e63
000154  79203d20
000158  2564204d
00015c  487a0a00
                  |L9.352|
                          DCD      Start_Task_STK
                  |L9.356|
                          DCD      start_task

                          AREA ||i.start_task||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  start_task PROC
;;;205    
;;;206    void start_task(void *p_arg)
000000  490f              LDR      r1,|L10.64|
;;;207    {
;;;208    #if 0	
;;;209    	u8 tmp_buf[512] = {0};
;;;210    	u8 tmp_buf2[200] = {0};
;;;211    	u8 tmp_buf3[70] = {0};
;;;212    	u8 tmp_buf4[16] = {0};
;;;213    #else
;;;214    	//想要检查堆栈溢出，应把BUF尽量开大点，利用ucosii相应函数去检查
;;;215    	//u8 tmp_buf[10] = {0};
;;;216    #endif
;;;217    	
;;;218    	printf("welcome to [%s]\r\n",__func__);
000002  a010              ADR      r0,|L10.68|
000004  f7fffffe          BL       __2printf
;;;219    	while(1)
000008  e018              B        |L10.60|
                  |L10.10|
;;;220    	{
;;;221    		test_val++;
00000a  4813              LDR      r0,|L10.88|
00000c  6800              LDR      r0,[r0,#0]  ; test_val
00000e  1c40              ADDS     r0,r0,#1
000010  4911              LDR      r1,|L10.88|
000012  6008              STR      r0,[r1,#0]  ; test_val
;;;222    		printf("hello tom the first ucosii task,hahaha, %d\r\n",test_val);
000014  4608              MOV      r0,r1
000016  6801              LDR      r1,[r0,#0]  ; test_val
000018  a010              ADR      r0,|L10.92|
00001a  f7fffffe          BL       __2printf
;;;223    		OSTimeDly(200);
00001e  20c8              MOVS     r0,#0xc8
000020  f7fffffe          BL       OSTimeDly
;;;224    		//OS_TaskStatStkChk();
;;;225    		Tom_CheckStackSize(0);
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       Tom_CheckStackSize
;;;226    		Tom_CheckStackSize(1);
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       Tom_CheckStackSize
;;;227    		Tom_CheckStackSize(2);
000030  2002              MOVS     r0,#2
000032  f7fffffe          BL       Tom_CheckStackSize
;;;228    		Tom_CheckStackSize(3);
000036  2003              MOVS     r0,#3
000038  f7fffffe          BL       Tom_CheckStackSize
                  |L10.60|
00003c  e7e5              B        |L10.10|
;;;229    	}
;;;230    }
;;;231    
                          ENDP

00003e  0000              DCW      0x0000
                  |L10.64|
                          DCD      __func__
                  |L10.68|
000044  77656c63          DCB      "welcome to [%s]\r\n",0
000048  6f6d6520
00004c  746f205b
000050  25735d0d
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0
                  |L10.88|
                          DCD      test_val
                  |L10.92|
00005c  68656c6c          DCB      "hello tom the first ucosii task,hahaha, %d\r\n",0
000060  6f20746f
000064  6d207468
000068  65206669
00006c  72737420
000070  75636f73
000074  69692074
000078  61736b2c
00007c  68616861
000080  68612c20
000084  25640d0a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Start_Task_STK
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  73746172          DCB      0x73,0x74,0x61,0x72
000004  745f7461          DCB      0x74,0x5f,0x74,0x61
000008  736b00            DCB      0x73,0x6b,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  fac_us
000000  0000              DCB      0x00,0x00
                  fac_ms
000002  0000              DCW      0x0000
                  test_val
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
