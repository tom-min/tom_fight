; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\ff.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ff.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Libraries\CMSIS\CM3\CoreSupport -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I.\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\main -I.\FreeRTOS\include -I.\FreeRTOS\portable\RVDS\ARM_CM3 -I.\User -I.\User\include -I.\fatfs -I.\Utilities\STM32_EVAL -I.\Utilities\STM32_EVAL\Common -I.\Utilities\STM32_EVAL\STM3210E_EVAL -I.\RTE\_Target_1 -I"D:\program files (x86)\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"D:\program files (x86)\keil5\ARM\CMSIS\Include" -D__UVISION_VERSION=523 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL --omf_browse=.\objects\ff.crf fatfs\ff.c]
                          THUMB

                          AREA ||i.check_fs||, CODE, READONLY, ALIGN=2

                  check_fs PROC
;;;1437   static
;;;1438   BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
000000  b570              PUSH     {r4-r6,lr}
;;;1439   	FATFS *fs,	/* File system object */
;;;1440   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;1441   )
;;;1442   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1443   	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
000006  7860              LDRB     r0,[r4,#1]
000008  2301              MOVS     r3,#1
00000a  462a              MOV      r2,r5
00000c  f1040130          ADD      r1,r4,#0x30
000010  f7fffffe          BL       disk_read
000014  b108              CBZ      r0,|L1.26|
;;;1444   		return 3;
000016  2003              MOVS     r0,#3
                  |L1.24|
;;;1445   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
;;;1446   		return 2;
;;;1447   
;;;1448   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;1449   		return 0;
;;;1450   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
;;;1451   		return 0;
;;;1452   
;;;1453   	return 1;
;;;1454   }
000018  bd70              POP      {r4-r6,pc}
                  |L1.26|
00001a  f894122e          LDRB     r1,[r4,#0x22e]        ;1445
00001e  f894022f          LDRB     r0,[r4,#0x22f]        ;1445
000022  ea412000          ORR      r0,r1,r0,LSL #8       ;1445
000026  f64a2155          MOV      r1,#0xaa55            ;1445
00002a  4288              CMP      r0,r1                 ;1445
00002c  d001              BEQ      |L1.50|
00002e  2002              MOVS     r0,#2                 ;1446
000030  e7f2              B        |L1.24|
                  |L1.50|
000032  f8940069          LDRB     r0,[r4,#0x69]         ;1448
000036  0601              LSLS     r1,r0,#24             ;1448
000038  f8940068          LDRB     r0,[r4,#0x68]         ;1448
00003c  ea414100          ORR      r1,r1,r0,LSL #16      ;1448
000040  f8940067          LDRB     r0,[r4,#0x67]         ;1448
000044  ea412000          ORR      r0,r1,r0,LSL #8       ;1448
000048  f8941066          LDRB     r1,[r4,#0x66]         ;1448
00004c  4308              ORRS     r0,r0,r1              ;1448
00004e  f020407f          BIC      r0,r0,#0xff000000     ;1448
000052  490e              LDR      r1,|L1.140|
000054  4288              CMP      r0,r1                 ;1448
000056  d101              BNE      |L1.92|
000058  2000              MOVS     r0,#0                 ;1449
00005a  e7dd              B        |L1.24|
                  |L1.92|
00005c  f8940085          LDRB     r0,[r4,#0x85]         ;1450
000060  0601              LSLS     r1,r0,#24             ;1450
000062  f8940084          LDRB     r0,[r4,#0x84]         ;1450
000066  ea414100          ORR      r1,r1,r0,LSL #16      ;1450
00006a  f8940083          LDRB     r0,[r4,#0x83]         ;1450
00006e  ea412000          ORR      r0,r1,r0,LSL #8       ;1450
000072  f8941082          LDRB     r1,[r4,#0x82]         ;1450
000076  4308              ORRS     r0,r0,r1              ;1450
000078  f020407f          BIC      r0,r0,#0xff000000     ;1450
00007c  4903              LDR      r1,|L1.140|
00007e  4288              CMP      r0,r1                 ;1450
000080  d101              BNE      |L1.134|
000082  2000              MOVS     r0,#0                 ;1451
000084  e7c8              B        |L1.24|
                  |L1.134|
000086  2001              MOVS     r0,#1                 ;1453
000088  e7c6              B        |L1.24|
;;;1455   
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      0x00544146

                          AREA ||i.chk_chr||, CODE, READONLY, ALIGN=1

                  chk_chr PROC
;;;199    static
;;;200    int chk_chr (const char* str, int chr) {
000000  4602              MOV      r2,r0
;;;201    	while (*str && *str != chr) str++;
000002  e000              B        |L2.6|
                  |L2.4|
000004  1c52              ADDS     r2,r2,#1
                  |L2.6|
000006  7810              LDRB     r0,[r2,#0]
000008  b110              CBZ      r0,|L2.16|
00000a  7810              LDRB     r0,[r2,#0]
00000c  4288              CMP      r0,r1
00000e  d1f9              BNE      |L2.4|
                  |L2.16|
;;;202    	return *str;
000010  7810              LDRB     r0,[r2,#0]
;;;203    }
000012  4770              BX       lr
;;;204    
                          ENDP


                          AREA ||i.chk_mounted||, CODE, READONLY, ALIGN=2

                  chk_mounted PROC
;;;1463   
;;;1464   FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occured */
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1465   	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
;;;1466   	FATFS **rfs,		/* Pointer to pointer to the found file system object */
;;;1467   	BYTE chk_wp			/* !=0: Check media write protection for write access */
;;;1468   )
;;;1469   {
000004  b082              SUB      sp,sp,#8
;;;1470   	BYTE fmt, *tbl;
;;;1471   	UINT vol;
;;;1472   	DSTATUS stat;
;;;1473   	DWORD bsect, fsize, tsect, mclst;
;;;1474   	const XCHAR *p = *path;
000006  9802              LDR      r0,[sp,#8]
000008  f8d0b000          LDR      r11,[r0,#0]
;;;1475   	FATFS *fs;
;;;1476   
;;;1477   	/* Get logical drive number from the path name */
;;;1478   	vol = p[0] - '0';				/* Is there a drive number? */
00000c  f89b0000          LDRB     r0,[r11,#0]
000010  f1a00930          SUB      r9,r0,#0x30
;;;1479   	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
000014  f1b90f09          CMP      r9,#9
000018  d809              BHI      |L3.46|
00001a  f89b0001          LDRB     r0,[r11,#1]
00001e  283a              CMP      r0,#0x3a
000020  d105              BNE      |L3.46|
;;;1480   		p += 2; *path = p;			/* Return pointer to the path name */
000022  f10b0b02          ADD      r11,r11,#2
000026  9802              LDR      r0,[sp,#8]
000028  f8c0b000          STR      r11,[r0,#0]
00002c  e001              B        |L3.50|
                  |L3.46|
;;;1481   	} else {						/* No drive number is given */
;;;1482   #if _FS_RPATH
;;;1483   		vol = Drive;				/* Use current drive */
;;;1484   #else
;;;1485   		vol = 0;					/* Use drive 0 */
00002e  f04f0900          MOV      r9,#0
                  |L3.50|
;;;1486   #endif
;;;1487   	}
;;;1488   
;;;1489   	/* Check if the logical drive is valid or not */
;;;1490   	if (vol >= _DRIVES) 			/* Is the drive number valid? */
000032  f1b90f00          CMP      r9,#0
000036  d003              BEQ      |L3.64|
;;;1491   		return FR_INVALID_DRIVE;
000038  200b              MOVS     r0,#0xb
                  |L3.58|
;;;1492   	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
;;;1493   	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
;;;1494   
;;;1495   	ENTER_FF(fs);					/* Lock file system */
;;;1496   
;;;1497   	if (fs->fs_type) {				/* If the logical drive has been mounted */
;;;1498   		stat = disk_status(fs->drive);
;;;1499   		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
;;;1500   #if !_FS_READONLY
;;;1501   			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;1502   				return FR_WRITE_PROTECTED;
;;;1503   #endif
;;;1504   			return FR_OK;			/* The file system object is valid */
;;;1505   		}
;;;1506   	}
;;;1507   
;;;1508   	/* The logical drive must be mounted. Following code attempts to mount the volume */
;;;1509   
;;;1510   	fs->fs_type = 0;					/* Clear the file system object */
;;;1511   	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
;;;1512   	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
;;;1513   	if (stat & STA_NOINIT)				/* Check if the drive is ready */
;;;1514   		return FR_NOT_READY;
;;;1515   #if _MAX_SS != 512						/* Get disk sector size if needed */
;;;1516   	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
;;;1517   		return FR_NO_FILESYSTEM;
;;;1518   #endif
;;;1519   #if !_FS_READONLY
;;;1520   	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;1521   		return FR_WRITE_PROTECTED;
;;;1522   #endif
;;;1523   	/* Search FAT partition on the drive */
;;;1524   	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
;;;1525   	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
;;;1526   		/* Check a partition listed in top of the partition table */
;;;1527   		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
;;;1528   		if (tbl[4]) {									/* Is the partition existing? */
;;;1529   			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
;;;1530   			fmt = check_fs(fs, bsect);					/* Check the partition */
;;;1531   		}
;;;1532   	}
;;;1533   	if (fmt == 3) return FR_DISK_ERR;
;;;1534   	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
;;;1535   		return FR_NO_FILESYSTEM;
;;;1536   
;;;1537   	/* Initialize the file system object */
;;;1538   	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
;;;1539   	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
;;;1540   	fs->sects_fat = fsize;
;;;1541   	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
;;;1542   	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
;;;1543   	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
;;;1544   	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
;;;1545   	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
;;;1546   	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
;;;1547   	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;1548   	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
;;;1549   		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
;;;1550   		) / fs->csize + 2;
;;;1551   
;;;1552   	fmt = FS_FAT12;										/* Determine the FAT sub type */
;;;1553   	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
;;;1554   	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
;;;1555   
;;;1556   	if (fmt == FS_FAT32)
;;;1557   		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
;;;1558   	else
;;;1559   		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
;;;1560   	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
;;;1561   
;;;1562   #if !_FS_READONLY
;;;1563   	/* Initialize allocation information */
;;;1564   	fs->free_clust = 0xFFFFFFFF;
;;;1565   	fs->wflag = 0;
;;;1566   	/* Get fsinfo if needed */
;;;1567   	if (fmt == FS_FAT32) {
;;;1568   	 	fs->fsi_flag = 0;
;;;1569   		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
;;;1570   		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
;;;1571   			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
;;;1572   			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
;;;1573   			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
;;;1574   			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;1575   			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;1576   		}
;;;1577   	}
;;;1578   #endif
;;;1579   	fs->fs_type = fmt;		/* FAT sub-type */
;;;1580   	fs->winsect = 0;		/* Invalidate sector cache */
;;;1581   #if _FS_RPATH
;;;1582   	fs->cdir = 0;			/* Current directory (root dir) */
;;;1583   #endif
;;;1584   	fs->id = ++Fsid;		/* File system mount ID */
;;;1585   
;;;1586   	return FR_OK;
;;;1587   }
00003a  b005              ADD      sp,sp,#0x14
00003c  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.64|
000040  48a5              LDR      r0,|L3.728|
000042  f8504029          LDR      r4,[r0,r9,LSL #2]     ;1492
000046  9803              LDR      r0,[sp,#0xc]          ;1492
000048  6004              STR      r4,[r0,#0]            ;1492
00004a  b90c              CBNZ     r4,|L3.80|
00004c  200c              MOVS     r0,#0xc               ;1493
00004e  e7f4              B        |L3.58|
                  |L3.80|
000050  7820              LDRB     r0,[r4,#0]            ;1497
000052  b178              CBZ      r0,|L3.116|
000054  7860              LDRB     r0,[r4,#1]            ;1498
000056  f7fffffe          BL       disk_status
00005a  4680              MOV      r8,r0                 ;1498
00005c  f0080001          AND      r0,r8,#1              ;1499
000060  b940              CBNZ     r0,|L3.116|
000062  9804              LDR      r0,[sp,#0x10]         ;1501
000064  b120              CBZ      r0,|L3.112|
000066  f0080004          AND      r0,r8,#4              ;1501
00006a  b108              CBZ      r0,|L3.112|
00006c  200a              MOVS     r0,#0xa               ;1502
00006e  e7e4              B        |L3.58|
                  |L3.112|
000070  2000              MOVS     r0,#0                 ;1504
000072  e7e2              B        |L3.58|
                  |L3.116|
000074  2000              MOVS     r0,#0                 ;1510
000076  7020              STRB     r0,[r4,#0]            ;1510
000078  f8849001          STRB     r9,[r4,#1]            ;1511
00007c  7860              LDRB     r0,[r4,#1]            ;1512
00007e  f7fffffe          BL       disk_initialize
000082  4680              MOV      r8,r0                 ;1512
000084  f0080001          AND      r0,r8,#1              ;1513
000088  b108              CBZ      r0,|L3.142|
00008a  2003              MOVS     r0,#3                 ;1514
00008c  e7d5              B        |L3.58|
                  |L3.142|
00008e  9804              LDR      r0,[sp,#0x10]         ;1520
000090  b120              CBZ      r0,|L3.156|
000092  f0080004          AND      r0,r8,#4              ;1520
000096  b108              CBZ      r0,|L3.156|
000098  200a              MOVS     r0,#0xa               ;1521
00009a  e7ce              B        |L3.58|
                  |L3.156|
00009c  f04f0a00          MOV      r10,#0                ;1524
0000a0  4651              MOV      r1,r10                ;1524
0000a2  4620              MOV      r0,r4                 ;1524
0000a4  f7fffffe          BL       check_fs
0000a8  4605              MOV      r5,r0                 ;1524
0000aa  2d01              CMP      r5,#1                 ;1525
0000ac  d113              BNE      |L3.214|
0000ae  f50477f7          ADD      r7,r4,#0x1ee          ;1527
0000b2  7938              LDRB     r0,[r7,#4]            ;1528
0000b4  b178              CBZ      r0,|L3.214|
0000b6  7af8              LDRB     r0,[r7,#0xb]          ;1529
0000b8  0601              LSLS     r1,r0,#24             ;1529
0000ba  7ab8              LDRB     r0,[r7,#0xa]          ;1529
0000bc  ea414100          ORR      r1,r1,r0,LSL #16      ;1529
0000c0  7a78              LDRB     r0,[r7,#9]            ;1529
0000c2  ea412000          ORR      r0,r1,r0,LSL #8       ;1529
0000c6  7a39              LDRB     r1,[r7,#8]            ;1529
0000c8  ea400a01          ORR      r10,r0,r1             ;1529
0000cc  4651              MOV      r1,r10                ;1530
0000ce  4620              MOV      r0,r4                 ;1530
0000d0  f7fffffe          BL       check_fs
0000d4  4605              MOV      r5,r0                 ;1530
                  |L3.214|
0000d6  2d03              CMP      r5,#3                 ;1533
0000d8  d101              BNE      |L3.222|
0000da  2001              MOVS     r0,#1                 ;1533
0000dc  e7ad              B        |L3.58|
                  |L3.222|
0000de  b945              CBNZ     r5,|L3.242|
0000e0  203b              MOVS     r0,#0x3b              ;1534
0000e2  5d01              LDRB     r1,[r0,r4]            ;1534
0000e4  f894003c          LDRB     r0,[r4,#0x3c]         ;1534
0000e8  ea412000          ORR      r0,r1,r0,LSL #8       ;1534
0000ec  f5b07f00          CMP      r0,#0x200             ;1534
0000f0  d001              BEQ      |L3.246|
                  |L3.242|
0000f2  200d              MOVS     r0,#0xd               ;1535
0000f4  e7a1              B        |L3.58|
                  |L3.246|
0000f6  2046              MOVS     r0,#0x46              ;1538
0000f8  5d01              LDRB     r1,[r0,r4]            ;1538
0000fa  f8940047          LDRB     r0,[r4,#0x47]         ;1538
0000fe  ea412600          ORR      r6,r1,r0,LSL #8       ;1538
000102  b976              CBNZ     r6,|L3.290|
000104  f8940057          LDRB     r0,[r4,#0x57]         ;1539
000108  0601              LSLS     r1,r0,#24             ;1539
00010a  f8940056          LDRB     r0,[r4,#0x56]         ;1539
00010e  ea414100          ORR      r1,r1,r0,LSL #16      ;1539
000112  f8940055          LDRB     r0,[r4,#0x55]         ;1539
000116  ea412000          ORR      r0,r1,r0,LSL #8       ;1539
00011a  f8941054          LDRB     r1,[r4,#0x54]         ;1539
00011e  ea400601          ORR      r6,r0,r1              ;1539
                  |L3.290|
000122  61a6              STR      r6,[r4,#0x18]         ;1540
000124  2040              MOVS     r0,#0x40              ;1541
000126  5d00              LDRB     r0,[r0,r4]            ;1541
000128  70e0              STRB     r0,[r4,#3]            ;1541
00012a  78e0              LDRB     r0,[r4,#3]            ;1542
00012c  4346              MULS     r6,r0,r6              ;1542
00012e  203e              MOVS     r0,#0x3e              ;1543
000130  5d01              LDRB     r1,[r0,r4]            ;1543
000132  f894003f          LDRB     r0,[r4,#0x3f]         ;1543
000136  ea412000          ORR      r0,r1,r0,LSL #8       ;1543
00013a  4450              ADD      r0,r0,r10             ;1543
00013c  6220              STR      r0,[r4,#0x20]         ;1543
00013e  203d              MOVS     r0,#0x3d              ;1544
000140  5d00              LDRB     r0,[r0,r4]            ;1544
000142  70a0              STRB     r0,[r4,#2]            ;1544
000144  2041              MOVS     r0,#0x41              ;1545
000146  5d01              LDRB     r1,[r0,r4]            ;1545
000148  f8940042          LDRB     r0,[r4,#0x42]         ;1545
00014c  ea412000          ORR      r0,r1,r0,LSL #8       ;1545
000150  8120              STRH     r0,[r4,#8]            ;1545
000152  2043              MOVS     r0,#0x43              ;1546
000154  5d01              LDRB     r1,[r0,r4]            ;1546
000156  f8940044          LDRB     r0,[r4,#0x44]         ;1546
00015a  ea412000          ORR      r0,r1,r0,LSL #8       ;1546
00015e  9001              STR      r0,[sp,#4]            ;1546
000160  9801              LDR      r0,[sp,#4]            ;1547
000162  b970              CBNZ     r0,|L3.386|
000164  f8940053          LDRB     r0,[r4,#0x53]         ;1547
000168  0601              LSLS     r1,r0,#24             ;1547
00016a  f8940052          LDRB     r0,[r4,#0x52]         ;1547
00016e  ea414100          ORR      r1,r1,r0,LSL #16      ;1547
000172  f8940051          LDRB     r0,[r4,#0x51]         ;1547
000176  ea412000          ORR      r0,r1,r0,LSL #8       ;1547
00017a  f8941050          LDRB     r1,[r4,#0x50]         ;1547
00017e  4308              ORRS     r0,r0,r1              ;1547
000180  9001              STR      r0,[sp,#4]            ;1547
                  |L3.386|
000182  203e              MOVS     r0,#0x3e              ;1548
000184  5d01              LDRB     r1,[r0,r4]            ;1548
000186  f894003f          LDRB     r0,[r4,#0x3f]         ;1548
00018a  ea412100          ORR      r1,r1,r0,LSL #8       ;1548
00018e  9801              LDR      r0,[sp,#4]            ;1548
000190  1a40              SUBS     r0,r0,r1              ;1548
000192  1b80              SUBS     r0,r0,r6              ;1548
000194  8921              LDRH     r1,[r4,#8]            ;1548
000196  eba01011          SUB      r0,r0,r1,LSR #4       ;1548
00019a  78a1              LDRB     r1,[r4,#2]            ;1548
00019c  fbb0f0f1          UDIV     r0,r0,r1              ;1548
0001a0  1c80              ADDS     r0,r0,#2              ;1548
0001a2  9000              STR      r0,[sp,#0]            ;1548
0001a4  61e0              STR      r0,[r4,#0x1c]         ;1548
0001a6  2501              MOVS     r5,#1                 ;1552
0001a8  f64071f7          MOV      r1,#0xff7             ;1553
0001ac  9800              LDR      r0,[sp,#0]            ;1553
0001ae  4288              CMP      r0,r1                 ;1553
0001b0  d300              BCC      |L3.436|
0001b2  2502              MOVS     r5,#2                 ;1553
                  |L3.436|
0001b4  f64f71f7          MOV      r1,#0xfff7            ;1554
0001b8  9800              LDR      r0,[sp,#0]            ;1554
0001ba  4288              CMP      r0,r1                 ;1554
0001bc  d300              BCC      |L3.448|
0001be  2503              MOVS     r5,#3                 ;1554
                  |L3.448|
0001c0  2d03              CMP      r5,#3                 ;1556
0001c2  d10f              BNE      |L3.484|
0001c4  f894005f          LDRB     r0,[r4,#0x5f]         ;1557
0001c8  0601              LSLS     r1,r0,#24             ;1557
0001ca  f894005e          LDRB     r0,[r4,#0x5e]         ;1557
0001ce  ea414100          ORR      r1,r1,r0,LSL #16      ;1557
0001d2  f894005d          LDRB     r0,[r4,#0x5d]         ;1557
0001d6  ea412000          ORR      r0,r1,r0,LSL #8       ;1557
0001da  f894105c          LDRB     r1,[r4,#0x5c]         ;1557
0001de  4308              ORRS     r0,r0,r1              ;1557
0001e0  6260              STR      r0,[r4,#0x24]         ;1557
0001e2  e002              B        |L3.490|
                  |L3.484|
0001e4  6a20              LDR      r0,[r4,#0x20]         ;1559
0001e6  4430              ADD      r0,r0,r6              ;1559
0001e8  6260              STR      r0,[r4,#0x24]         ;1559
                  |L3.490|
0001ea  6a20              LDR      r0,[r4,#0x20]         ;1560
0001ec  4430              ADD      r0,r0,r6              ;1560
0001ee  8921              LDRH     r1,[r4,#8]            ;1560
0001f0  eb001011          ADD      r0,r0,r1,LSR #4       ;1560
0001f4  62a0              STR      r0,[r4,#0x28]         ;1560
0001f6  f04f30ff          MOV      r0,#0xffffffff        ;1564
0001fa  6120              STR      r0,[r4,#0x10]         ;1564
0001fc  2000              MOVS     r0,#0                 ;1565
0001fe  7120              STRB     r0,[r4,#4]            ;1565
000200  2d03              CMP      r5,#3                 ;1567
000202  d15c              BNE      |L3.702|
000204  7160              STRB     r0,[r4,#5]            ;1568
000206  f8941060          LDRB     r1,[r4,#0x60]         ;1569
00020a  f8940061          LDRB     r0,[r4,#0x61]         ;1569
00020e  ea412000          ORR      r0,r1,r0,LSL #8       ;1569
000212  4450              ADD      r0,r0,r10             ;1569
000214  6160              STR      r0,[r4,#0x14]         ;1569
000216  7860              LDRB     r0,[r4,#1]            ;1570
000218  2301              MOVS     r3,#1                 ;1570
00021a  f1040130          ADD      r1,r4,#0x30           ;1570
00021e  6962              LDR      r2,[r4,#0x14]         ;1570
000220  f7fffffe          BL       disk_read
000224  bbf0              CBNZ     r0,|L3.676|
000226  f894122e          LDRB     r1,[r4,#0x22e]        ;1571
00022a  f894022f          LDRB     r0,[r4,#0x22f]        ;1571
00022e  ea412000          ORR      r0,r1,r0,LSL #8       ;1571
000232  f64a2155          MOV      r1,#0xaa55            ;1571
000236  4288              CMP      r0,r1                 ;1571
000238  d141              BNE      |L3.702|
00023a  2033              MOVS     r0,#0x33              ;1572
00023c  5d00              LDRB     r0,[r0,r4]            ;1572
00023e  0601              LSLS     r1,r0,#24             ;1572
000240  2032              MOVS     r0,#0x32              ;1572
000242  5d00              LDRB     r0,[r0,r4]            ;1572
000244  ea414100          ORR      r1,r1,r0,LSL #16      ;1572
000248  2031              MOVS     r0,#0x31              ;1572
00024a  5d00              LDRB     r0,[r0,r4]            ;1572
00024c  ea412000          ORR      r0,r1,r0,LSL #8       ;1572
000250  f8941030          LDRB     r1,[r4,#0x30]         ;1572
000254  4308              ORRS     r0,r0,r1              ;1572
000256  4921              LDR      r1,|L3.732|
000258  4288              CMP      r0,r1                 ;1572
00025a  d130              BNE      |L3.702|
00025c  f8940217          LDRB     r0,[r4,#0x217]        ;1573
000260  0601              LSLS     r1,r0,#24             ;1573
000262  f8940216          LDRB     r0,[r4,#0x216]        ;1573
000266  ea414100          ORR      r1,r1,r0,LSL #16      ;1573
00026a  f8940215          LDRB     r0,[r4,#0x215]        ;1573
00026e  ea412000          ORR      r0,r1,r0,LSL #8       ;1573
000272  f8941214          LDRB     r1,[r4,#0x214]        ;1573
000276  4308              ORRS     r0,r0,r1              ;1573
000278  4919              LDR      r1,|L3.736|
00027a  4288              CMP      r0,r1                 ;1573
00027c  d11f              BNE      |L3.702|
00027e  f894021f          LDRB     r0,[r4,#0x21f]        ;1574
000282  0601              LSLS     r1,r0,#24             ;1574
000284  f894021e          LDRB     r0,[r4,#0x21e]        ;1574
000288  ea414100          ORR      r1,r1,r0,LSL #16      ;1574
00028c  f894021d          LDRB     r0,[r4,#0x21d]        ;1574
000290  ea412000          ORR      r0,r1,r0,LSL #8       ;1574
000294  f894121c          LDRB     r1,[r4,#0x21c]        ;1574
000298  4308              ORRS     r0,r0,r1              ;1574
00029a  60e0              STR      r0,[r4,#0xc]          ;1574
00029c  f894021b          LDRB     r0,[r4,#0x21b]        ;1575
0002a0  0601              LSLS     r1,r0,#24             ;1575
0002a2  e000              B        |L3.678|
                  |L3.676|
0002a4  e00b              B        |L3.702|
                  |L3.678|
0002a6  f894021a          LDRB     r0,[r4,#0x21a]        ;1575
0002aa  ea414100          ORR      r1,r1,r0,LSL #16      ;1575
0002ae  f8940219          LDRB     r0,[r4,#0x219]        ;1575
0002b2  ea412000          ORR      r0,r1,r0,LSL #8       ;1575
0002b6  f8941218          LDRB     r1,[r4,#0x218]        ;1575
0002ba  4308              ORRS     r0,r0,r1              ;1575
0002bc  6120              STR      r0,[r4,#0x10]         ;1575
                  |L3.702|
0002be  7025              STRB     r5,[r4,#0]            ;1579
0002c0  2000              MOVS     r0,#0                 ;1580
0002c2  62e0              STR      r0,[r4,#0x2c]         ;1580
0002c4  4807              LDR      r0,|L3.740|
0002c6  8800              LDRH     r0,[r0,#0]            ;1584  ; Fsid
0002c8  1c40              ADDS     r0,r0,#1              ;1584
0002ca  b280              UXTH     r0,r0                 ;1584
0002cc  4905              LDR      r1,|L3.740|
0002ce  8008              STRH     r0,[r1,#0]            ;1584
0002d0  80e0              STRH     r0,[r4,#6]            ;1584
0002d2  2000              MOVS     r0,#0                 ;1586
0002d4  e6b1              B        |L3.58|
;;;1588   
                          ENDP

0002d6  0000              DCW      0x0000
                  |L3.728|
                          DCD      FatFs
                  |L3.732|
                          DCD      0x41615252
                  |L3.736|
                          DCD      0x61417272
                  |L3.740|
                          DCD      Fsid

                          AREA ||i.clust2sect||, CODE, READONLY, ALIGN=1

                  clust2sect PROC
;;;526    
;;;527    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
000000  4602              MOV      r2,r0
;;;528    	FATFS *fs,		/* File system object */
;;;529    	DWORD clst		/* Cluster# to be converted */
;;;530    )
;;;531    {
;;;532    	clst -= 2;
000002  1e89              SUBS     r1,r1,#2
;;;533    	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
000004  69d0              LDR      r0,[r2,#0x1c]
000006  1e80              SUBS     r0,r0,#2
000008  4288              CMP      r0,r1
00000a  d801              BHI      |L4.16|
00000c  2000              MOVS     r0,#0
                  |L4.14|
;;;534    	return clst * fs->csize + fs->database;
;;;535    }
00000e  4770              BX       lr
                  |L4.16|
000010  7893              LDRB     r3,[r2,#2]            ;534
000012  6a90              LDR      r0,[r2,#0x28]         ;534
000014  fb010003          MLA      r0,r1,r3,r0           ;534
000018  e7f9              B        |L4.14|
;;;536    
                          ENDP


                          AREA ||i.create_chain||, CODE, READONLY, ALIGN=1

                  create_chain PROC
;;;467    static
;;;468    DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;469    	FATFS *fs,			/* File system object */
;;;470    	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;471    )
;;;472    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
;;;473    	DWORD cs, ncl, scl, mcl;
;;;474    
;;;475    
;;;476    	mcl = fs->max_clust;
000008  f8d5901c          LDR      r9,[r5,#0x1c]
;;;477    	if (clst == 0) {		/* Create new chain */
00000c  f1b80f00          CMP      r8,#0
000010  d105              BNE      |L5.30|
;;;478    		scl = fs->last_clust;			/* Get suggested start point */
000012  68ee              LDR      r6,[r5,#0xc]
;;;479    		if (scl == 0 || scl >= mcl) scl = 1;
000014  b10e              CBZ      r6,|L5.26|
000016  454e              CMP      r6,r9
000018  d310              BCC      |L5.60|
                  |L5.26|
00001a  2601              MOVS     r6,#1
00001c  e00e              B        |L5.60|
                  |L5.30|
;;;480    	}
;;;481    	else {					/* Stretch existing chain */
;;;482    		cs = get_fat(fs, clst);			/* Check the cluster status */
00001e  4641              MOV      r1,r8
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       get_fat
000026  4607              MOV      r7,r0
;;;483    		if (cs < 2) return 1;			/* It is an invalid cluster */
000028  2f02              CMP      r7,#2
00002a  d202              BCS      |L5.50|
00002c  2001              MOVS     r0,#1
                  |L5.46|
;;;484    		if (cs < mcl) return cs;		/* It is already followed by next cluster */
;;;485    		scl = clst;
;;;486    	}
;;;487    
;;;488    	ncl = scl;				/* Start cluster */
;;;489    	for (;;) {
;;;490    		ncl++;							/* Next cluster */
;;;491    		if (ncl >= mcl) {				/* Wrap around */
;;;492    			ncl = 2;
;;;493    			if (ncl > scl) return 0;	/* No free custer */
;;;494    		}
;;;495    		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;496    		if (cs == 0) break;				/* Found a free cluster */
;;;497    		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
;;;498    			return cs;
;;;499    		if (ncl == scl) return 0;		/* No free custer */
;;;500    	}
;;;501    
;;;502    	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
;;;503    		return 0xFFFFFFFF;
;;;504    	if (clst != 0) {					/* Link it to the previous one if needed */
;;;505    		if (put_fat(fs, clst, ncl))
;;;506    			return 0xFFFFFFFF;
;;;507    	}
;;;508    
;;;509    	fs->last_clust = ncl;				/* Update FSINFO */
;;;510    	if (fs->free_clust != 0xFFFFFFFF) {
;;;511    		fs->free_clust--;
;;;512    		fs->fsi_flag = 1;
;;;513    	}
;;;514    
;;;515    	return ncl;		/* Return new cluster number */
;;;516    }
00002e  e8bd87f0          POP      {r4-r10,pc}
                  |L5.50|
000032  454f              CMP      r7,r9                 ;484
000034  d201              BCS      |L5.58|
000036  4638              MOV      r0,r7                 ;484
000038  e7f9              B        |L5.46|
                  |L5.58|
00003a  4646              MOV      r6,r8                 ;485
                  |L5.60|
00003c  4634              MOV      r4,r6                 ;488
00003e  bf00              NOP                            ;489
                  |L5.64|
000040  1c64              ADDS     r4,r4,#1              ;490
000042  454c              CMP      r4,r9                 ;491
000044  d304              BCC      |L5.80|
000046  2402              MOVS     r4,#2                 ;492
000048  42b4              CMP      r4,r6                 ;493
00004a  d901              BLS      |L5.80|
00004c  2000              MOVS     r0,#0                 ;493
00004e  e7ee              B        |L5.46|
                  |L5.80|
000050  4621              MOV      r1,r4                 ;495
000052  4628              MOV      r0,r5                 ;495
000054  f7fffffe          BL       get_fat
000058  4607              MOV      r7,r0                 ;495
00005a  b907              CBNZ     r7,|L5.94|
00005c  e009              B        |L5.114|
                  |L5.94|
00005e  1c78              ADDS     r0,r7,#1              ;497
000060  b108              CBZ      r0,|L5.102|
000062  2f01              CMP      r7,#1                 ;497
000064  d101              BNE      |L5.106|
                  |L5.102|
000066  4638              MOV      r0,r7                 ;498
000068  e7e1              B        |L5.46|
                  |L5.106|
00006a  42b4              CMP      r4,r6                 ;499
00006c  d1e8              BNE      |L5.64|
00006e  2000              MOVS     r0,#0                 ;499
000070  e7dd              B        |L5.46|
                  |L5.114|
000072  bf00              NOP                            ;496
000074  f06f4270          MVN      r2,#0xf0000000        ;502
000078  4621              MOV      r1,r4                 ;502
00007a  4628              MOV      r0,r5                 ;502
00007c  f7fffffe          BL       put_fat
000080  b110              CBZ      r0,|L5.136|
000082  f04f30ff          MOV      r0,#0xffffffff        ;503
000086  e7d2              B        |L5.46|
                  |L5.136|
000088  f1b80f00          CMP      r8,#0                 ;504
00008c  d008              BEQ      |L5.160|
00008e  4622              MOV      r2,r4                 ;505
000090  4641              MOV      r1,r8                 ;505
000092  4628              MOV      r0,r5                 ;505
000094  f7fffffe          BL       put_fat
000098  b110              CBZ      r0,|L5.160|
00009a  f04f30ff          MOV      r0,#0xffffffff        ;506
00009e  e7c6              B        |L5.46|
                  |L5.160|
0000a0  60ec              STR      r4,[r5,#0xc]          ;509
0000a2  6928              LDR      r0,[r5,#0x10]         ;510
0000a4  1c40              ADDS     r0,r0,#1              ;510
0000a6  b120              CBZ      r0,|L5.178|
0000a8  6928              LDR      r0,[r5,#0x10]         ;511
0000aa  1e40              SUBS     r0,r0,#1              ;511
0000ac  6128              STR      r0,[r5,#0x10]         ;511
0000ae  2001              MOVS     r0,#1                 ;512
0000b0  7168              STRB     r0,[r5,#5]            ;512
                  |L5.178|
0000b2  4620              MOV      r0,r4                 ;515
0000b4  e7bb              B        |L5.46|
;;;517    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.create_name||, CODE, READONLY, ALIGN=2

                  create_name PROC
;;;1096   static
;;;1097   FRESULT create_name (
000000  e92d5ff3          PUSH     {r0,r1,r4-r12,lr}
;;;1098   	DIR *dj,			/* Pointer to the directory object */
;;;1099   	const XCHAR **path	/* Pointer to pointer to the segment in the path string */
;;;1100   )
;;;1101   {
;;;1102   #ifdef _EXCVT
;;;1103   	static const BYTE cvt[] = _EXCVT;
;;;1104   #endif
;;;1105   
;;;1106   #if _USE_LFN	/* LFN configuration */
;;;1107   	BYTE b, cf;
;;;1108   	WCHAR w, *lfn;
;;;1109   	int i, ni, si, di;
;;;1110   	const XCHAR *p;
;;;1111   
;;;1112   	/* Create LFN in Unicode */
;;;1113   	si = di = 0;
;;;1114   	p = *path;
;;;1115   	lfn = dj->lfn;
;;;1116   	for (;;) {
;;;1117   		w = p[si++];					/* Get a character */
;;;1118   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
;;;1119   		if (di >= _MAX_LFN)				/* Reject too long name */
;;;1120   			return FR_INVALID_NAME;
;;;1121   #if !_LFN_UNICODE
;;;1122   		w &= 0xFF;
;;;1123   		if (IsDBCS1(w)) {				/* If it is a DBC 1st byte */
;;;1124   			b = p[si++];				/* Get 2nd byte */
;;;1125   			if (!IsDBCS2(b))			/* Reject invalid code for DBC */
;;;1126   				return FR_INVALID_NAME;
;;;1127   			w = (w << 8) + b;
;;;1128   		}
;;;1129   		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
;;;1130   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1131   #endif
;;;1132   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
;;;1133   			return FR_INVALID_NAME;
;;;1134   		lfn[di++] = w;					/* Store the Unicode char */
;;;1135   	}
;;;1136   	*path = &p[si];						/* Rerurn pointer to the next segment */
;;;1137   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1138   #if _FS_RPATH
;;;1139   	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
;;;1140   		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
;;;1141   		lfn[di] = 0;
;;;1142   		for (i = 0; i < 11; i++)
;;;1143   			dj->fn[i] = (i < di) ? '.' : ' ';
;;;1144   		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1145   		return FR_OK;
;;;1146   	}
;;;1147   #endif
;;;1148   	while (di) {						/* Strip trailing spaces and dots */
;;;1149   		w = lfn[di - 1];
;;;1150   		if (w != ' ' && w != '.') break;
;;;1151   		di--;
;;;1152   	}
;;;1153   	if (!di) return FR_INVALID_NAME;	/* Reject null string */
;;;1154   
;;;1155   	lfn[di] = 0;						/* LFN is created */
;;;1156   
;;;1157   	/* Create SFN in directory form */
;;;1158   	mem_set(dj->fn, ' ', 11);
;;;1159   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1160   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1161   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1162   
;;;1163   	b = i = 0; ni = 8;
;;;1164   	for (;;) {
;;;1165   		w = lfn[si++];					/* Get an LFN char */
;;;1166   		if (!w) break;					/* Break on enf of the LFN */
;;;1167   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1168   			cf |= NS_LOSS | NS_LFN; continue;
;;;1169   		}
;;;1170   
;;;1171   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1172   			if (ni == 11) {				/* Long extension */
;;;1173   				cf |= NS_LOSS | NS_LFN; break;
;;;1174   			}
;;;1175   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1176   			if (si > di) break;			/* No extension */
;;;1177   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1178   			b <<= 2; continue;
;;;1179   		}
;;;1180   
;;;1181   		if (w >= 0x80) {				/* Non ASCII char */
;;;1182   #ifdef _EXCVT
;;;1183   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1184   			if (w) w = cvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
;;;1185   #else
;;;1186   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1187   #endif
;;;1188   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1189   		}
;;;1190   
;;;1191   		if (_DF1S && w >= 0x100) {		/* Double byte char */
;;;1192   			if (i >= ni - 1) {
;;;1193   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1194   			}
;;;1195   			dj->fn[i++] = (BYTE)(w >> 8);
;;;1196   		} else {						/* Single byte char */
;;;1197   			if (!w || chk_chr("+,;[=]", w)) {		/* Replace illegal chars for SFN */
;;;1198   				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
;;;1199   			} else {
;;;1200   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1201   					b |= 2;
;;;1202   				} else {
;;;1203   					if (IsLower(w)) {	/* ASCII small capital */
;;;1204   						b |= 1; w -= 0x20;
;;;1205   					}
;;;1206   				}
;;;1207   			}
;;;1208   		}
;;;1209   		dj->fn[i++] = (BYTE)w;
;;;1210   	}
;;;1211   
;;;1212   	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace it with 0x05 */
;;;1213   
;;;1214   	if (ni == 8) b <<= 2;
;;;1215   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1216   		cf |= NS_LFN;
;;;1217   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
;;;1218   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1219   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1220   	}
;;;1221   
;;;1222   	dj->fn[NS] = cf;	/* SFN is created */
;;;1223   
;;;1224   	return FR_OK;
;;;1225   
;;;1226   
;;;1227   #else	/* Non-LFN configuration */
;;;1228   	BYTE b, c, d, *sfn;
;;;1229   	int ni, si, i;
;;;1230   	const char *p;
;;;1231   
;;;1232   	/* Create file name in directory form */
;;;1233   	sfn = dj->fn;
000004  9800              LDR      r0,[sp,#0]
000006  6986              LDR      r6,[r0,#0x18]
;;;1234   	mem_set(sfn, ' ', 11);
000008  220b              MOVS     r2,#0xb
00000a  2120              MOVS     r1,#0x20
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       mem_set
;;;1235   	si = i = b = 0; ni = 8;
000012  2000              MOVS     r0,#0
000014  4605              MOV      r5,r0
000016  4680              MOV      r8,r0
000018  4682              MOV      r10,r0
00001a  f04f0908          MOV      r9,#8
;;;1236   	p = *path;
00001e  9801              LDR      r0,[sp,#4]
000020  f8d0b000          LDR      r11,[r0,#0]
;;;1237   #if _FS_RPATH
;;;1238   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1239   		for (;;) {
;;;1240   			c = p[si++];
;;;1241   			if (c != '.' || si >= 3) break;
;;;1242   			sfn[i++] = c;
;;;1243   		}
;;;1244   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1245   		*path = &p[si];									/* Rerurn pointer to the next segment */
;;;1246   		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1247   		return FR_OK;
;;;1248   	}
;;;1249   #endif
;;;1250   	for (;;) {
000024  bf00              NOP      
                  |L6.38|
;;;1251   		c = p[si++];
000026  4650              MOV      r0,r10
000028  f10a0a01          ADD      r10,r10,#1
00002c  f81b4000          LDRB     r4,[r11,r0]
;;;1252   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
000030  2c20              CMP      r4,#0x20
000032  dd03              BLE      |L6.60|
000034  2c2f              CMP      r4,#0x2f
000036  d001              BEQ      |L6.60|
000038  2c5c              CMP      r4,#0x5c
00003a  d100              BNE      |L6.62|
                  |L6.60|
00003c  e056              B        |L6.236|
                  |L6.62|
;;;1253   		if (c == '.' || i >= ni) {
00003e  2c2e              CMP      r4,#0x2e
000040  d001              BEQ      |L6.70|
000042  45c8              CMP      r8,r9
000044  db0e              BLT      |L6.100|
                  |L6.70|
;;;1254   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
000046  f1b90f08          CMP      r9,#8
00004a  d101              BNE      |L6.80|
00004c  2c2e              CMP      r4,#0x2e
00004e  d002              BEQ      |L6.86|
                  |L6.80|
000050  2006              MOVS     r0,#6
                  |L6.82|
;;;1255   			i = 8; ni = 11;
;;;1256   			b <<= 2; continue;
;;;1257   		}
;;;1258   		if (c >= 0x80) {				/* Extended char */
;;;1259   #ifdef _EXCVT
;;;1260   			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
;;;1261   #else
;;;1262   			b |= 3;						/* Eliminate NT flag if ext char is exist */
;;;1263   #if !_DF1S	/* ASCII only cfg */
;;;1264   			return FR_INVALID_NAME;
;;;1265   #endif
;;;1266   #endif
;;;1267   		}
;;;1268   		if (IsDBCS1(c)) {				/* DBC 1st byte? */
;;;1269   			d = p[si++];				/* Get 2nd byte */
;;;1270   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1271   				return FR_INVALID_NAME;
;;;1272   			sfn[i++] = c;
;;;1273   			sfn[i++] = d;
;;;1274   		} else {						/* Single byte code */
;;;1275   			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;1276   				return FR_INVALID_NAME;
;;;1277   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;1278   				b |= 2;
;;;1279   			} else {
;;;1280   				if (IsLower(c)) {		/* ASCII small capital? */
;;;1281   					b |= 1; c -= 0x20;
;;;1282   				}
;;;1283   			}
;;;1284   			sfn[i++] = c;
;;;1285   		}
;;;1286   	}
;;;1287   	*path = &p[si];						/* Rerurn pointer to the next segment */
;;;1288   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1289   
;;;1290   	if (!i) return FR_INVALID_NAME;		/* Reject null string */
;;;1291   	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
;;;1292   
;;;1293   	if (ni == 8) b <<= 2;
;;;1294   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1295   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1296   
;;;1297   	sfn[NS] = c;		/* Store NT flag, File name is created */
;;;1298   
;;;1299   	return FR_OK;
;;;1300   #endif
;;;1301   }
000052  e8bd9ffc          POP      {r2-r12,pc}
                  |L6.86|
000056  f04f0808          MOV      r8,#8                 ;1255
00005a  f04f090b          MOV      r9,#0xb               ;1255
00005e  06a8              LSLS     r0,r5,#26             ;1256
000060  0e05              LSRS     r5,r0,#24             ;1256
000062  e7e0              B        |L6.38|
                  |L6.100|
000064  2c80              CMP      r4,#0x80              ;1258
000066  db01              BLT      |L6.108|
000068  f0450503          ORR      r5,r5,#3              ;1262
                  |L6.108|
00006c  2c81              CMP      r4,#0x81              ;1268
00006e  db01              BLT      |L6.116|
000070  2c9f              CMP      r4,#0x9f              ;1268
000072  dd03              BLE      |L6.124|
                  |L6.116|
000074  2ce0              CMP      r4,#0xe0              ;1268
000076  db1d              BLT      |L6.180|
000078  2cfc              CMP      r4,#0xfc              ;1268
00007a  dc1b              BGT      |L6.180|
                  |L6.124|
00007c  4650              MOV      r0,r10                ;1269
00007e  f10a0a01          ADD      r10,r10,#1            ;1269
000082  f81b7000          LDRB     r7,[r11,r0]           ;1269
000086  2f40              CMP      r7,#0x40              ;1270
000088  db01              BLT      |L6.142|
00008a  2f7e              CMP      r7,#0x7e              ;1270
00008c  dd03              BLE      |L6.150|
                  |L6.142|
00008e  2f80              CMP      r7,#0x80              ;1270
000090  db05              BLT      |L6.158|
000092  2ffc              CMP      r7,#0xfc              ;1270
000094  dc03              BGT      |L6.158|
                  |L6.150|
000096  f1a90001          SUB      r0,r9,#1              ;1270
00009a  4540              CMP      r0,r8                 ;1270
00009c  dc01              BGT      |L6.162|
                  |L6.158|
00009e  2006              MOVS     r0,#6                 ;1271
0000a0  e7d7              B        |L6.82|
                  |L6.162|
0000a2  4640              MOV      r0,r8                 ;1272
0000a4  f1080801          ADD      r8,r8,#1              ;1272
0000a8  5434              STRB     r4,[r6,r0]            ;1272
0000aa  4640              MOV      r0,r8                 ;1273
0000ac  f1080801          ADD      r8,r8,#1              ;1273
0000b0  5437              STRB     r7,[r6,r0]            ;1273
0000b2  e01a              B        |L6.234|
                  |L6.180|
0000b4  4621              MOV      r1,r4                 ;1275
0000b6  a022              ADR      r0,|L6.320|
0000b8  f7fffffe          BL       chk_chr
0000bc  b108              CBZ      r0,|L6.194|
0000be  2006              MOVS     r0,#6                 ;1276
0000c0  e7c7              B        |L6.82|
                  |L6.194|
0000c2  2c41              CMP      r4,#0x41              ;1277
0000c4  db04              BLT      |L6.208|
0000c6  2c5a              CMP      r4,#0x5a              ;1277
0000c8  dc02              BGT      |L6.208|
0000ca  f0450502          ORR      r5,r5,#2              ;1278
0000ce  e008              B        |L6.226|
                  |L6.208|
0000d0  2c61              CMP      r4,#0x61              ;1280
0000d2  db06              BLT      |L6.226|
0000d4  2c7a              CMP      r4,#0x7a              ;1280
0000d6  dc04              BGT      |L6.226|
0000d8  f0450501          ORR      r5,r5,#1              ;1281
0000dc  f1a40020          SUB      r0,r4,#0x20           ;1281
0000e0  b2c4              UXTB     r4,r0                 ;1281
                  |L6.226|
0000e2  4640              MOV      r0,r8                 ;1284
0000e4  f1080801          ADD      r8,r8,#1              ;1284
0000e8  5434              STRB     r4,[r6,r0]            ;1284
                  |L6.234|
0000ea  e79c              B        |L6.38|
                  |L6.236|
0000ec  bf00              NOP                            ;1252
0000ee  eb0b010a          ADD      r1,r11,r10            ;1287
0000f2  9801              LDR      r0,[sp,#4]            ;1287
0000f4  6001              STR      r1,[r0,#0]            ;1287
0000f6  2c20              CMP      r4,#0x20              ;1288
0000f8  dc01              BGT      |L6.254|
0000fa  2004              MOVS     r0,#4                 ;1288
0000fc  e000              B        |L6.256|
                  |L6.254|
0000fe  2000              MOVS     r0,#0                 ;1288
                  |L6.256|
000100  4604              MOV      r4,r0                 ;1288
000102  f1b80f00          CMP      r8,#0                 ;1290
000106  d101              BNE      |L6.268|
000108  2006              MOVS     r0,#6                 ;1290
00010a  e7a2              B        |L6.82|
                  |L6.268|
00010c  7830              LDRB     r0,[r6,#0]            ;1291
00010e  28e5              CMP      r0,#0xe5              ;1291
000110  d101              BNE      |L6.278|
000112  2005              MOVS     r0,#5                 ;1291
000114  7030              STRB     r0,[r6,#0]            ;1291
                  |L6.278|
000116  f1b90f08          CMP      r9,#8                 ;1293
00011a  d101              BNE      |L6.288|
00011c  06a8              LSLS     r0,r5,#26             ;1293
00011e  0e05              LSRS     r5,r0,#24             ;1293
                  |L6.288|
000120  f0050003          AND      r0,r5,#3              ;1294
000124  2801              CMP      r0,#1                 ;1294
000126  d101              BNE      |L6.300|
000128  f0440410          ORR      r4,r4,#0x10           ;1294
                  |L6.300|
00012c  f005000c          AND      r0,r5,#0xc            ;1295
000130  2804              CMP      r0,#4                 ;1295
000132  d101              BNE      |L6.312|
000134  f0440408          ORR      r4,r4,#8              ;1295
                  |L6.312|
000138  72f4              STRB     r4,[r6,#0xb]          ;1297
00013a  2000              MOVS     r0,#0                 ;1299
00013c  e789              B        |L6.82|
;;;1302   
                          ENDP

00013e  0000              DCW      0x0000
                  |L6.320|
000140  20222a2b          DCB      " ""*+,[=]|",127,0
000144  2c5b3d5d
000148  7c7f00  
00014b  00                DCB      0

                          AREA ||i.dir_find||, CODE, READONLY, ALIGN=1

                  dir_find PROC
;;;829    static
;;;830    FRESULT dir_find (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;831    	DIR *dj			/* Pointer to the directory object linked to the file name */
;;;832    )
;;;833    {
000004  4604              MOV      r4,r0
;;;834    	FRESULT res;
;;;835    	BYTE c, *dir;
;;;836    #if _USE_LFN
;;;837    	BYTE a, ord, sum;
;;;838    #endif
;;;839    
;;;840    	res = dir_seek(dj, 0);			/* Rewind directory object */
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dir_seek
00000e  4605              MOV      r5,r0
;;;841    	if (res != FR_OK) return res;
000010  b115              CBZ      r5,|L7.24|
000012  4628              MOV      r0,r5
                  |L7.20|
;;;842    
;;;843    #if _USE_LFN
;;;844    	ord = sum = 0xFF;
;;;845    #endif
;;;846    	do {
;;;847    		res = move_window(dj->fs, dj->sect);
;;;848    		if (res != FR_OK) break;
;;;849    		dir = dj->dir;					/* Ptr to the directory entry of current index */
;;;850    		c = dir[DIR_Name];
;;;851    		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;852    #if _USE_LFN	/* LFN configuration */
;;;853    		a = dir[DIR_Attr] & AM_MASK;
;;;854    		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;855    			ord = 0xFF;
;;;856    		} else {
;;;857    			if (a == AM_LFN) {			/* An LFN entry is found */
;;;858    				if (dj->lfn) {
;;;859    					if (c & 0x40) {		/* Is it start of LFN sequence? */
;;;860    						sum = dir[LDIR_Chksum];
;;;861    						c &= 0xBF; ord = c;	/* LFN start order */
;;;862    						dj->lfn_idx = dj->index;
;;;863    					}
;;;864    					/* Check validity of the LFN entry and compare it with given name */
;;;865    					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;866    				}
;;;867    			} else {					/* An SFN entry is found */
;;;868    				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;869    				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;870    				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
;;;871    			}
;;;872    		}
;;;873    #else		/* Non LFN configuration */
;;;874    		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
;;;875    			break;
;;;876    #endif
;;;877    		res = dir_next(dj, FALSE);		/* Next entry */
;;;878    	} while (res == FR_OK);
;;;879    
;;;880    	return res;
;;;881    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L7.24|
000018  bf00              NOP                            ;846
                  |L7.26|
00001a  6921              LDR      r1,[r4,#0x10]         ;847
00001c  6820              LDR      r0,[r4,#0]            ;847
00001e  f7fffffe          BL       move_window
000022  4605              MOV      r5,r0                 ;847
000024  b105              CBZ      r5,|L7.40|
000026  e016              B        |L7.86|
                  |L7.40|
000028  6966              LDR      r6,[r4,#0x14]         ;849
00002a  7837              LDRB     r7,[r6,#0]            ;850
00002c  b90f              CBNZ     r7,|L7.50|
00002e  2504              MOVS     r5,#4                 ;851
000030  e011              B        |L7.86|
                  |L7.50|
000032  7af0              LDRB     r0,[r6,#0xb]          ;874
000034  f0000008          AND      r0,r0,#8              ;874
000038  b930              CBNZ     r0,|L7.72|
00003a  220b              MOVS     r2,#0xb               ;874
00003c  4630              MOV      r0,r6                 ;874
00003e  69a1              LDR      r1,[r4,#0x18]         ;874
000040  f7fffffe          BL       mem_cmp
000044  b900              CBNZ     r0,|L7.72|
000046  e006              B        |L7.86|
                  |L7.72|
000048  2100              MOVS     r1,#0                 ;877
00004a  4620              MOV      r0,r4                 ;877
00004c  f7fffffe          BL       dir_next
000050  4605              MOV      r5,r0                 ;877
000052  2d00              CMP      r5,#0                 ;878
000054  d0e1              BEQ      |L7.26|
                  |L7.86|
000056  bf00              NOP                            ;848
000058  4628              MOV      r0,r5                 ;880
00005a  e7db              B        |L7.20|
;;;882    
                          ENDP


                          AREA ||i.dir_next||, CODE, READONLY, ALIGN=1

                  dir_next PROC
;;;592    static
;;;593    FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;594    	DIR *dj,		/* Pointer to directory object */
;;;595    	BOOL streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
;;;596    )
;;;597    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;598    	DWORD clst;
;;;599    	WORD i;
;;;600    
;;;601    
;;;602    	i = dj->index + 1;
000008  88e0              LDRH     r0,[r4,#6]
00000a  1c40              ADDS     r0,r0,#1
00000c  b286              UXTH     r6,r0
;;;603    	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
00000e  b10e              CBZ      r6,|L8.20|
000010  6920              LDR      r0,[r4,#0x10]
000012  b910              CBNZ     r0,|L8.26|
                  |L8.20|
;;;604    		return FR_NO_FILE;
000014  2004              MOVS     r0,#4
                  |L8.22|
;;;605    
;;;606    	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
;;;607    		dj->sect++;					/* Next sector */
;;;608    
;;;609    		if (dj->clust == 0) {	/* Static table */
;;;610    			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
;;;611    				return FR_NO_FILE;
;;;612    		}
;;;613    		else {					/* Dynamic table */
;;;614    			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;615    				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
;;;616    				if (clst <= 1) return FR_INT_ERR;
;;;617    				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;618    				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
;;;619    #if !_FS_READONLY
;;;620    					BYTE c;
;;;621    					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
;;;622    					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
;;;623    					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;624    					if (clst == 1) return FR_INT_ERR;
;;;625    					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;626    					/* Clean-up streached table */
;;;627    					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
;;;628    					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
;;;629    					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
;;;630    					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;631    						dj->fs->wflag = 1;
;;;632    						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
;;;633    						dj->fs->winsect++;
;;;634    					}
;;;635    					dj->fs->winsect -= c;						/* Rewind window address */
;;;636    #else
;;;637    					return FR_NO_FILE;			/* Report EOT */
;;;638    #endif
;;;639    				}
;;;640    				dj->clust = clst;				/* Initialize data for new cluster */
;;;641    				dj->sect = clust2sect(dj->fs, clst);
;;;642    			}
;;;643    		}
;;;644    	}
;;;645    
;;;646    	dj->index = i;
;;;647    	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
;;;648    
;;;649    	return FR_OK;
;;;650    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L8.26|
00001a  f006000f          AND      r0,r6,#0xf            ;606
00001e  2800              CMP      r0,#0                 ;606
000020  d16f              BNE      |L8.258|
000022  6920              LDR      r0,[r4,#0x10]         ;607
000024  1c40              ADDS     r0,r0,#1              ;607
000026  6120              STR      r0,[r4,#0x10]         ;607
000028  68e0              LDR      r0,[r4,#0xc]          ;609
00002a  b928              CBNZ     r0,|L8.56|
00002c  6820              LDR      r0,[r4,#0]            ;610
00002e  8900              LDRH     r0,[r0,#8]            ;610
000030  42b0              CMP      r0,r6                 ;610
000032  dc66              BGT      |L8.258|
000034  2004              MOVS     r0,#4                 ;611
000036  e7ee              B        |L8.22|
                  |L8.56|
000038  6820              LDR      r0,[r4,#0]            ;614
00003a  7880              LDRB     r0,[r0,#2]            ;614
00003c  1e40              SUBS     r0,r0,#1              ;614
00003e  ea001016          AND      r0,r0,r6,LSR #4       ;614
000042  2800              CMP      r0,#0                 ;614
000044  d15d              BNE      |L8.258|
000046  68e1              LDR      r1,[r4,#0xc]          ;615
000048  6820              LDR      r0,[r4,#0]            ;615
00004a  f7fffffe          BL       get_fat
00004e  4605              MOV      r5,r0                 ;615
000050  2d01              CMP      r5,#1                 ;616
000052  d801              BHI      |L8.88|
000054  2002              MOVS     r0,#2                 ;616
000056  e7de              B        |L8.22|
                  |L8.88|
000058  1c68              ADDS     r0,r5,#1              ;617
00005a  b908              CBNZ     r0,|L8.96|
00005c  2001              MOVS     r0,#1                 ;617
00005e  e7da              B        |L8.22|
                  |L8.96|
000060  6820              LDR      r0,[r4,#0]            ;618
000062  69c0              LDR      r0,[r0,#0x1c]         ;618
000064  42a8              CMP      r0,r5                 ;618
000066  d846              BHI      |L8.246|
000068  f1b80f00          CMP      r8,#0                 ;621
00006c  d101              BNE      |L8.114|
00006e  2004              MOVS     r0,#4                 ;621
000070  e7d1              B        |L8.22|
                  |L8.114|
000072  68e1              LDR      r1,[r4,#0xc]          ;622
000074  6820              LDR      r0,[r4,#0]            ;622
000076  f7fffffe          BL       create_chain
00007a  4605              MOV      r5,r0                 ;622
00007c  b90d              CBNZ     r5,|L8.130|
00007e  2007              MOVS     r0,#7                 ;623
000080  e7c9              B        |L8.22|
                  |L8.130|
000082  2d01              CMP      r5,#1                 ;624
000084  d101              BNE      |L8.138|
000086  2002              MOVS     r0,#2                 ;624
000088  e7c5              B        |L8.22|
                  |L8.138|
00008a  1c68              ADDS     r0,r5,#1              ;625
00008c  b908              CBNZ     r0,|L8.146|
00008e  2001              MOVS     r0,#1                 ;625
000090  e7c1              B        |L8.22|
                  |L8.146|
000092  2100              MOVS     r1,#0                 ;627
000094  6820              LDR      r0,[r4,#0]            ;627
000096  f7fffffe          BL       move_window
00009a  b108              CBZ      r0,|L8.160|
00009c  2001              MOVS     r0,#1                 ;627
00009e  e7ba              B        |L8.22|
                  |L8.160|
0000a0  6821              LDR      r1,[r4,#0]            ;628
0000a2  f1010030          ADD      r0,r1,#0x30           ;628
0000a6  f44f7200          MOV      r2,#0x200             ;628
0000aa  2100              MOVS     r1,#0                 ;628
0000ac  f7fffffe          BL       mem_set
0000b0  4629              MOV      r1,r5                 ;629
0000b2  6820              LDR      r0,[r4,#0]            ;629
0000b4  f7fffffe          BL       clust2sect
0000b8  6821              LDR      r1,[r4,#0]            ;629
0000ba  62c8              STR      r0,[r1,#0x2c]         ;629
0000bc  2700              MOVS     r7,#0                 ;630
0000be  e010              B        |L8.226|
                  |L8.192|
0000c0  2001              MOVS     r0,#1                 ;631
0000c2  6821              LDR      r1,[r4,#0]            ;631
0000c4  7108              STRB     r0,[r1,#4]            ;631
0000c6  2100              MOVS     r1,#0                 ;632
0000c8  6820              LDR      r0,[r4,#0]            ;632
0000ca  f7fffffe          BL       move_window
0000ce  b108              CBZ      r0,|L8.212|
0000d0  2001              MOVS     r0,#1                 ;632
0000d2  e7a0              B        |L8.22|
                  |L8.212|
0000d4  6820              LDR      r0,[r4,#0]            ;633
0000d6  6ac0              LDR      r0,[r0,#0x2c]         ;633
0000d8  1c40              ADDS     r0,r0,#1              ;633
0000da  6821              LDR      r1,[r4,#0]            ;633
0000dc  62c8              STR      r0,[r1,#0x2c]         ;633
0000de  1c78              ADDS     r0,r7,#1              ;630
0000e0  b2c7              UXTB     r7,r0                 ;630
                  |L8.226|
0000e2  6820              LDR      r0,[r4,#0]            ;630
0000e4  7880              LDRB     r0,[r0,#2]            ;630
0000e6  42b8              CMP      r0,r7                 ;630
0000e8  dcea              BGT      |L8.192|
0000ea  6820              LDR      r0,[r4,#0]            ;635
0000ec  6ac0              LDR      r0,[r0,#0x2c]         ;635
0000ee  1bc0              SUBS     r0,r0,r7              ;635
0000f0  6821              LDR      r1,[r4,#0]            ;635
0000f2  62c8              STR      r0,[r1,#0x2c]         ;635
0000f4  bf00              NOP                            ;639
                  |L8.246|
0000f6  60e5              STR      r5,[r4,#0xc]          ;640
0000f8  4629              MOV      r1,r5                 ;641
0000fa  6820              LDR      r0,[r4,#0]            ;641
0000fc  f7fffffe          BL       clust2sect
000100  6120              STR      r0,[r4,#0x10]         ;641
                  |L8.258|
000102  80e6              STRH     r6,[r4,#6]            ;646
000104  6820              LDR      r0,[r4,#0]            ;647
000106  3030              ADDS     r0,r0,#0x30           ;647
000108  f006010f          AND      r1,r6,#0xf            ;647
00010c  eb001041          ADD      r0,r0,r1,LSL #5       ;647
000110  6160              STR      r0,[r4,#0x14]         ;647
000112  2000              MOVS     r0,#0                 ;649
000114  e77f              B        |L8.22|
;;;651    
                          ENDP


                          AREA ||i.dir_read||, CODE, READONLY, ALIGN=1

                  dir_read PROC
;;;890    static
;;;891    FRESULT dir_read (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;892    	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
;;;893    )
;;;894    {
000004  4604              MOV      r4,r0
;;;895    	FRESULT res;
;;;896    	BYTE c, *dir;
;;;897    #if _USE_LFN
;;;898    	BYTE a, ord = 0xFF, sum = 0xFF;
;;;899    #endif
;;;900    
;;;901    	res = FR_NO_FILE;
000006  2504              MOVS     r5,#4
;;;902    	while (dj->sect) {
000008  e01b              B        |L9.66|
                  |L9.10|
;;;903    		res = move_window(dj->fs, dj->sect);
00000a  6921              LDR      r1,[r4,#0x10]
00000c  6820              LDR      r0,[r4,#0]
00000e  f7fffffe          BL       move_window
000012  4605              MOV      r5,r0
;;;904    		if (res != FR_OK) break;
000014  b105              CBZ      r5,|L9.24|
000016  e017              B        |L9.72|
                  |L9.24|
;;;905    		dir = dj->dir;					/* Ptr to the directory entry of current index */
000018  6967              LDR      r7,[r4,#0x14]
;;;906    		c = dir[DIR_Name];
00001a  783e              LDRB     r6,[r7,#0]
;;;907    		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
00001c  b90e              CBNZ     r6,|L9.34|
00001e  2504              MOVS     r5,#4
000020  e012              B        |L9.72|
                  |L9.34|
;;;908    #if _USE_LFN	/* LFN configuration */
;;;909    		a = dir[DIR_Attr] & AM_MASK;
;;;910    		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;911    			ord = 0xFF;
;;;912    		} else {
;;;913    			if (a == AM_LFN) {			/* An LFN entry is found */
;;;914    				if (c & 0x40) {			/* Is it start of LFN sequence? */
;;;915    					sum = dir[LDIR_Chksum];
;;;916    					c &= 0xBF; ord = c;
;;;917    					dj->lfn_idx = dj->index;
;;;918    				}
;;;919    				/* Check LFN validity and capture it */
;;;920    				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;921    			} else {					/* An SFN entry is found */
;;;922    				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
;;;923    					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
;;;924    				break;
;;;925    			}
;;;926    		}
;;;927    #else		/* Non LFN configuration */
;;;928    		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
000022  2ee5              CMP      r6,#0xe5
000024  d006              BEQ      |L9.52|
000026  2e2e              CMP      r6,#0x2e
000028  d004              BEQ      |L9.52|
00002a  7af8              LDRB     r0,[r7,#0xb]
00002c  f0000008          AND      r0,r0,#8
000030  b900              CBNZ     r0,|L9.52|
;;;929    			break;
000032  e009              B        |L9.72|
                  |L9.52|
;;;930    #endif
;;;931    		res = dir_next(dj, FALSE);				/* Next entry */
000034  2100              MOVS     r1,#0
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       dir_next
00003c  4605              MOV      r5,r0
;;;932    		if (res != FR_OK) break;
00003e  b105              CBZ      r5,|L9.66|
000040  e002              B        |L9.72|
                  |L9.66|
000042  6920              LDR      r0,[r4,#0x10]         ;902
000044  2800              CMP      r0,#0                 ;902
000046  d1e0              BNE      |L9.10|
                  |L9.72|
000048  bf00              NOP                            ;904
;;;933    	}
;;;934    
;;;935    	if (res != FR_OK) dj->sect = 0;
00004a  b10d              CBZ      r5,|L9.80|
00004c  2000              MOVS     r0,#0
00004e  6120              STR      r0,[r4,#0x10]
                  |L9.80|
;;;936    
;;;937    	return res;
000050  4628              MOV      r0,r5
;;;938    }
000052  e8bd81f0          POP      {r4-r8,pc}
;;;939    #endif
                          ENDP


                          AREA ||i.dir_register||, CODE, READONLY, ALIGN=1

                  dir_register PROC
;;;947    static
;;;948    FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;949    	DIR *dj				/* Target directory with object name to be created */
;;;950    )
;;;951    {
000004  4604              MOV      r4,r0
;;;952    	FRESULT res;
;;;953    	BYTE c, *dir;
;;;954    #if _USE_LFN	/* LFN configuration */
;;;955    	WORD n, ne, is;
;;;956    	BYTE sn[12], *fn, sum;
;;;957    	WCHAR *lfn;
;;;958    
;;;959    
;;;960    	fn = dj->fn; lfn = dj->lfn;
;;;961    	mem_cpy(sn, fn, 12);
;;;962    
;;;963    	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */
;;;964    
;;;965    	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
;;;966    		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
;;;967    		for (n = 1; n < 100; n++) {
;;;968    			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
;;;969    			res = dir_find(dj);				/* Check if the name collides with existing SFN */
;;;970    			if (res != FR_OK) break;
;;;971    		}
;;;972    		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
;;;973    		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;974    		fn[NS] = sn[NS]; dj->lfn = lfn;
;;;975    	}
;;;976    
;;;977    	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve reserve an SFN + LFN entries. */
;;;978    		for (ne = 0; lfn[ne]; ne++) ;
;;;979    		ne = (ne + 25) / 13;
;;;980    	} else {						/* Otherwise reserve only an SFN entry. */
;;;981    		ne = 1;
;;;982    	}
;;;983    
;;;984    	/* Reserve contiguous entries */
;;;985    	res = dir_seek(dj, 0);
;;;986    	if (res != FR_OK) return res;
;;;987    	n = is = 0;
;;;988    	do {
;;;989    		res = move_window(dj->fs, dj->sect);
;;;990    		if (res != FR_OK) break;
;;;991    		c = *dj->dir;				/* Check the entry status */
;;;992    		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
;;;993    			if (n == 0) is = dj->index;	/* First index of the contigulus entry */
;;;994    			if (++n == ne) break;	/* A contiguous entry that requiered count is found */
;;;995    		} else {
;;;996    			n = 0;					/* Not a blank entry. Restart to search */
;;;997    		}
;;;998    		res = dir_next(dj, TRUE);	/* Next entry with table streach */
;;;999    	} while (res == FR_OK);
;;;1000   
;;;1001   	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
;;;1002   		res = dir_seek(dj, is);
;;;1003   		if (res == FR_OK) {
;;;1004   			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
;;;1005   			ne--;
;;;1006   			do {					/* Store LFN entries in bottom first */
;;;1007   				res = move_window(dj->fs, dj->sect);
;;;1008   				if (res != FR_OK) break;
;;;1009   				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
;;;1010   				dj->fs->wflag = 1;
;;;1011   				res = dir_next(dj, FALSE);	/* Next entry */
;;;1012   			} while (res == FR_OK && --ne);
;;;1013   		}
;;;1014   	}
;;;1015   
;;;1016   #else	/* Non LFN configuration */
;;;1017   	res = dir_seek(dj, 0);
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dir_seek
00000e  4605              MOV      r5,r0
;;;1018   	if (res == FR_OK) {
000010  b9ad              CBNZ     r5,|L10.62|
;;;1019   		do {	/* Find a blank entry for the SFN */
000012  bf00              NOP      
                  |L10.20|
;;;1020   			res = move_window(dj->fs, dj->sect);
000014  6921              LDR      r1,[r4,#0x10]
000016  6820              LDR      r0,[r4,#0]
000018  f7fffffe          BL       move_window
00001c  4605              MOV      r5,r0
;;;1021   			if (res != FR_OK) break;
00001e  b105              CBZ      r5,|L10.34|
000020  e00c              B        |L10.60|
                  |L10.34|
;;;1022   			c = *dj->dir;
000022  6960              LDR      r0,[r4,#0x14]
000024  7806              LDRB     r6,[r0,#0]
;;;1023   			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
000026  2ee5              CMP      r6,#0xe5
000028  d000              BEQ      |L10.44|
00002a  b906              CBNZ     r6,|L10.46|
                  |L10.44|
00002c  e006              B        |L10.60|
                  |L10.46|
;;;1024   			res = dir_next(dj, TRUE);		/* Next entry with table streach */
00002e  2101              MOVS     r1,#1
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       dir_next
000036  4605              MOV      r5,r0
;;;1025   		} while (res == FR_OK);
000038  2d00              CMP      r5,#0
00003a  d0eb              BEQ      |L10.20|
                  |L10.60|
00003c  bf00              NOP                            ;1021
                  |L10.62|
;;;1026   	}
;;;1027   #endif
;;;1028   
;;;1029   	if (res == FR_OK) {		/* Initialize the SFN entry */
00003e  b9c5              CBNZ     r5,|L10.114|
;;;1030   		res = move_window(dj->fs, dj->sect);
000040  6921              LDR      r1,[r4,#0x10]
000042  6820              LDR      r0,[r4,#0]
000044  f7fffffe          BL       move_window
000048  4605              MOV      r5,r0
;;;1031   		if (res == FR_OK) {
00004a  b995              CBNZ     r5,|L10.114|
;;;1032   			dir = dj->dir;
00004c  6967              LDR      r7,[r4,#0x14]
;;;1033   			mem_set(dir, 0, 32);		/* Clean the entry */
00004e  2220              MOVS     r2,#0x20
000050  2100              MOVS     r1,#0
000052  4638              MOV      r0,r7
000054  f7fffffe          BL       mem_set
;;;1034   			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
000058  220b              MOVS     r2,#0xb
00005a  4638              MOV      r0,r7
00005c  69a1              LDR      r1,[r4,#0x18]
00005e  f7fffffe          BL       mem_cpy
;;;1035   			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
000062  69a0              LDR      r0,[r4,#0x18]
000064  7ac0              LDRB     r0,[r0,#0xb]
000066  f0000018          AND      r0,r0,#0x18
00006a  7338              STRB     r0,[r7,#0xc]
;;;1036   			dj->fs->wflag = 1;
00006c  2001              MOVS     r0,#1
00006e  6821              LDR      r1,[r4,#0]
000070  7108              STRB     r0,[r1,#4]
                  |L10.114|
;;;1037   		}
;;;1038   	}
;;;1039   
;;;1040   	return res;
000072  4628              MOV      r0,r5
;;;1041   }
000074  e8bd81f0          POP      {r4-r8,pc}
;;;1042   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_remove||, CODE, READONLY, ALIGN=1

                  dir_remove PROC
;;;1051   static
;;;1052   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;1053   	DIR *dj				/* Directory object pointing the entry to be removed */
;;;1054   )
;;;1055   {
000002  4604              MOV      r4,r0
;;;1056   	FRESULT res;
;;;1057   #if _USE_LFN	/* LFN configuration */
;;;1058   	WORD i;
;;;1059   
;;;1060   	i = dj->index;	/* SFN index */
;;;1061   	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
;;;1062   	if (res == FR_OK) {
;;;1063   		do {
;;;1064   			res = move_window(dj->fs, dj->sect);
;;;1065   			if (res != FR_OK) break;
;;;1066   			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
;;;1067   			dj->fs->wflag = 1;
;;;1068   			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
;;;1069   			res = dir_next(dj, FALSE);	/* Next entry */
;;;1070   		} while (res == FR_OK);
;;;1071   		if (res == FR_NO_FILE) res = FR_INT_ERR;
;;;1072   	}
;;;1073   
;;;1074   #else			/* Non LFN configuration */
;;;1075   	res = dir_seek(dj, dj->index);
000004  88e1              LDRH     r1,[r4,#6]
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       dir_seek
00000c  4605              MOV      r5,r0
;;;1076   	if (res == FR_OK) {
00000e  b95d              CBNZ     r5,|L11.40|
;;;1077   		res = move_window(dj->fs, dj->sect);
000010  6921              LDR      r1,[r4,#0x10]
000012  6820              LDR      r0,[r4,#0]
000014  f7fffffe          BL       move_window
000018  4605              MOV      r5,r0
;;;1078   		if (res == FR_OK) {
00001a  b92d              CBNZ     r5,|L11.40|
;;;1079   			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
00001c  20e5              MOVS     r0,#0xe5
00001e  6961              LDR      r1,[r4,#0x14]
000020  7008              STRB     r0,[r1,#0]
;;;1080   			dj->fs->wflag = 1;
000022  2001              MOVS     r0,#1
000024  6821              LDR      r1,[r4,#0]
000026  7108              STRB     r0,[r1,#4]
                  |L11.40|
;;;1081   		}
;;;1082   	}
;;;1083   #endif
;;;1084   
;;;1085   	return res;
000028  4628              MOV      r0,r5
;;;1086   }
00002a  bd70              POP      {r4-r6,pc}
;;;1087   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_seek||, CODE, READONLY, ALIGN=1

                  dir_seek PROC
;;;544    static
;;;545    FRESULT dir_seek (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;546    	DIR *dj,		/* Pointer to directory object */
;;;547    	WORD idx		/* Directory index number */
;;;548    )
;;;549    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;550    	DWORD clst;
;;;551    	WORD ic;
;;;552    
;;;553    
;;;554    	dj->index = idx;
000008  80e6              STRH     r6,[r4,#6]
;;;555    	clst = dj->sclust;
00000a  68a5              LDR      r5,[r4,#8]
;;;556    	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
00000c  2d01              CMP      r5,#1
00000e  d003              BEQ      |L12.24|
000010  6820              LDR      r0,[r4,#0]
000012  69c0              LDR      r0,[r0,#0x1c]
000014  42a8              CMP      r0,r5
000016  d802              BHI      |L12.30|
                  |L12.24|
;;;557    		return FR_INT_ERR;
000018  2002              MOVS     r0,#2
                  |L12.26|
;;;558    	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;559    		clst = dj->fs->dirbase;
;;;560    
;;;561    	if (clst == 0) {	/* Static table */
;;;562    		dj->clust = clst;
;;;563    		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
;;;564    			return FR_INT_ERR;
;;;565    		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
;;;566    	}
;;;567    	else {				/* Dynamic table */
;;;568    		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
;;;569    		while (idx >= ic) {	/* Follow cluster chain */
;;;570    			clst = get_fat(dj->fs, clst);				/* Get next cluster */
;;;571    			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;572    			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
;;;573    				return FR_INT_ERR;
;;;574    			idx -= ic;
;;;575    		}
;;;576    		dj->clust = clst;
;;;577    		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
;;;578    	}
;;;579    
;;;580    	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
;;;581    
;;;582    	return FR_OK;	/* Seek succeeded */
;;;583    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L12.30|
00001e  b92d              CBNZ     r5,|L12.44|
000020  6820              LDR      r0,[r4,#0]            ;558
000022  7800              LDRB     r0,[r0,#0]            ;558
000024  2803              CMP      r0,#3                 ;558
000026  d101              BNE      |L12.44|
000028  6820              LDR      r0,[r4,#0]            ;559
00002a  6a45              LDR      r5,[r0,#0x24]         ;559
                  |L12.44|
00002c  b965              CBNZ     r5,|L12.72|
00002e  60e5              STR      r5,[r4,#0xc]          ;562
000030  6820              LDR      r0,[r4,#0]            ;563
000032  8900              LDRH     r0,[r0,#8]            ;563
000034  42b0              CMP      r0,r6                 ;563
000036  dc01              BGT      |L12.60|
000038  2002              MOVS     r0,#2                 ;564
00003a  e7ee              B        |L12.26|
                  |L12.60|
00003c  6820              LDR      r0,[r4,#0]            ;565
00003e  6a40              LDR      r0,[r0,#0x24]         ;565
000040  eb001016          ADD      r0,r0,r6,LSR #4       ;565
000044  6120              STR      r0,[r4,#0x10]         ;565
000046  e020              B        |L12.138|
                  |L12.72|
000048  6820              LDR      r0,[r4,#0]            ;568
00004a  7880              LDRB     r0,[r0,#2]            ;568
00004c  0107              LSLS     r7,r0,#4              ;568
00004e  e012              B        |L12.118|
                  |L12.80|
000050  4629              MOV      r1,r5                 ;570
000052  6820              LDR      r0,[r4,#0]            ;570
000054  f7fffffe          BL       get_fat
000058  4605              MOV      r5,r0                 ;570
00005a  1c68              ADDS     r0,r5,#1              ;571
00005c  b908              CBNZ     r0,|L12.98|
00005e  2001              MOVS     r0,#1                 ;571
000060  e7db              B        |L12.26|
                  |L12.98|
000062  2d02              CMP      r5,#2                 ;572
000064  d303              BCC      |L12.110|
000066  6820              LDR      r0,[r4,#0]            ;572
000068  69c0              LDR      r0,[r0,#0x1c]         ;572
00006a  42a8              CMP      r0,r5                 ;572
00006c  d801              BHI      |L12.114|
                  |L12.110|
00006e  2002              MOVS     r0,#2                 ;573
000070  e7d3              B        |L12.26|
                  |L12.114|
000072  1bf0              SUBS     r0,r6,r7              ;574
000074  b286              UXTH     r6,r0                 ;574
                  |L12.118|
000076  42be              CMP      r6,r7                 ;569
000078  daea              BGE      |L12.80|
00007a  60e5              STR      r5,[r4,#0xc]          ;576
00007c  4629              MOV      r1,r5                 ;577
00007e  6820              LDR      r0,[r4,#0]            ;577
000080  f7fffffe          BL       clust2sect
000084  eb001016          ADD      r0,r0,r6,LSR #4       ;577
000088  6120              STR      r0,[r4,#0x10]         ;577
                  |L12.138|
00008a  6820              LDR      r0,[r4,#0]            ;580
00008c  3030              ADDS     r0,r0,#0x30           ;580
00008e  f006010f          AND      r1,r6,#0xf            ;580
000092  eb001041          ADD      r0,r0,r1,LSL #5       ;580
000096  6160              STR      r0,[r4,#0x14]         ;580
000098  2000              MOVS     r0,#0                 ;582
00009a  e7be              B        |L12.26|
;;;584    
                          ENDP


                          AREA ||i.f_chmod||, CODE, READONLY, ALIGN=1

                  f_chmod PROC
;;;2560   
;;;2561   FRESULT f_chmod (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2562   	const XCHAR *path,	/* Pointer to the file path */
;;;2563   	BYTE value,			/* Attribute bits */
;;;2564   	BYTE mask			/* Attribute mask to change */
;;;2565   )
;;;2566   {
000002  b08a              SUB      sp,sp,#0x28
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
;;;2567   	FRESULT res;
;;;2568   	DIR dj;
;;;2569   	NAMEBUF(sfn, lfn);
;;;2570   	BYTE *dir;
;;;2571   
;;;2572   
;;;2573   	res = chk_mounted(&path, &dj.fs, 1);
000008  2201              MOVS     r2,#1
00000a  a903              ADD      r1,sp,#0xc
00000c  a80a              ADD      r0,sp,#0x28
00000e  f7fffffe          BL       chk_mounted
000012  4606              MOV      r6,r0
;;;2574   	if (res == FR_OK) {
000014  b9de              CBNZ     r6,|L13.78|
;;;2575   		INITBUF(dj, sfn, lfn);
000016  f8cdd024          STR      sp,[sp,#0x24]
;;;2576   		res = follow_path(&dj, path);		/* Follow the file path */
00001a  a803              ADD      r0,sp,#0xc
00001c  990a              LDR      r1,[sp,#0x28]
00001e  f7fffffe          BL       follow_path
000022  4606              MOV      r6,r0
;;;2577   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000024  bf00              NOP      
;;;2578   			res = FR_INVALID_NAME;
;;;2579   		if (res == FR_OK) {
000026  b996              CBNZ     r6,|L13.78|
;;;2580   			dir = dj.dir;
000028  9d08              LDR      r5,[sp,#0x20]
;;;2581   			if (!dir) {						/* Is it a root directory? */
00002a  b90d              CBNZ     r5,|L13.48|
;;;2582   				res = FR_INVALID_NAME;
00002c  2606              MOVS     r6,#6
00002e  e00e              B        |L13.78|
                  |L13.48|
;;;2583   			} else {						/* File or sub directory */
;;;2584   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
000030  f0040427          AND      r4,r4,#0x27
;;;2585   				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
000034  ea070004          AND      r0,r7,r4
000038  7ae9              LDRB     r1,[r5,#0xb]
00003a  43a1              BICS     r1,r1,r4
00003c  4308              ORRS     r0,r0,r1
00003e  72e8              STRB     r0,[r5,#0xb]
;;;2586   				dj.fs->wflag = 1;
000040  2001              MOVS     r0,#1
000042  9903              LDR      r1,[sp,#0xc]
000044  7108              STRB     r0,[r1,#4]
;;;2587   				res = sync(dj.fs);
000046  9803              LDR      r0,[sp,#0xc]
000048  f7fffffe          BL       sync
00004c  4606              MOV      r6,r0
                  |L13.78|
;;;2588   			}
;;;2589   		}
;;;2590   	}
;;;2591   
;;;2592   	LEAVE_FF(dj.fs, res);
00004e  4630              MOV      r0,r6
;;;2593   }
000050  b00d              ADD      sp,sp,#0x34
000052  bdf0              POP      {r4-r7,pc}
;;;2594   
                          ENDP


                          AREA ||i.f_close||, CODE, READONLY, ALIGN=1

                  f_close PROC
;;;2020   
;;;2021   FRESULT f_close (
000000  b570              PUSH     {r4-r6,lr}
;;;2022   	FIL *fp		/* Pointer to the file object to be closed */
;;;2023   )
;;;2024   {
000002  4604              MOV      r4,r0
;;;2025   	FRESULT res;
;;;2026   
;;;2027   
;;;2028   #if _FS_READONLY
;;;2029   	res = validate(fp->fs, fp->id);
;;;2030   	if (res == FR_OK) fp->fs = NULL;
;;;2031   	LEAVE_FF(fp->fs, res);
;;;2032   #else
;;;2033   	res = f_sync(fp);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       f_sync
00000a  4605              MOV      r5,r0
;;;2034   	if (res == FR_OK) fp->fs = NULL;
00000c  b90d              CBNZ     r5,|L14.18|
00000e  2000              MOVS     r0,#0
000010  6020              STR      r0,[r4,#0]
                  |L14.18|
;;;2035   	return res;
000012  4628              MOV      r0,r5
;;;2036   #endif
;;;2037   }
000014  bd70              POP      {r4-r6,pc}
;;;2038   
                          ENDP


                          AREA ||i.f_getfree||, CODE, READONLY, ALIGN=1

                  f_getfree PROC
;;;2314   
;;;2315   FRESULT f_getfree (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2316   	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
;;;2317   	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
;;;2318   	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
;;;2319   )
;;;2320   {
000004  b082              SUB      sp,sp,#8
000006  468b              MOV      r11,r1
000008  4614              MOV      r4,r2
;;;2321   	FRESULT res;
;;;2322   	DWORD n, clst, sect, stat;
;;;2323   	UINT i;
;;;2324   	BYTE fat, *p;
;;;2325   
;;;2326   
;;;2327   	/* Get drive number */
;;;2328   	res = chk_mounted(&path, fatfs, 0);
00000a  2200              MOVS     r2,#0
00000c  4621              MOV      r1,r4
00000e  a802              ADD      r0,sp,#8
000010  f7fffffe          BL       chk_mounted
000014  9001              STR      r0,[sp,#4]
;;;2329   	if (res != FR_OK) LEAVE_FF(*fatfs, res);
000016  9801              LDR      r0,[sp,#4]
000018  b118              CBZ      r0,|L15.34|
00001a  9801              LDR      r0,[sp,#4]
                  |L15.28|
;;;2330   
;;;2331   	/* If number of free cluster is valid, return it without cluster scan. */
;;;2332   	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
;;;2333   		*nclst = (*fatfs)->free_clust;
;;;2334   		LEAVE_FF(*fatfs, FR_OK);
;;;2335   	}
;;;2336   
;;;2337   	/* Get number of free clusters */
;;;2338   	fat = (*fatfs)->fs_type;
;;;2339   	n = 0;
;;;2340   	if (fat == FS_FAT12) {
;;;2341   		clst = 2;
;;;2342   		do {
;;;2343   			stat = get_fat(*fatfs, clst);
;;;2344   			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
;;;2345   			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
;;;2346   			if (stat == 0) n++;
;;;2347   		} while (++clst < (*fatfs)->max_clust);
;;;2348   	} else {
;;;2349   		clst = (*fatfs)->max_clust;
;;;2350   		sect = (*fatfs)->fatbase;
;;;2351   		i = 0; p = 0;
;;;2352   		do {
;;;2353   			if (!i) {
;;;2354   				res = move_window(*fatfs, sect++);
;;;2355   				if (res != FR_OK)
;;;2356   					LEAVE_FF(*fatfs, res);
;;;2357   				p = (*fatfs)->win;
;;;2358   				i = SS(*fatfs);
;;;2359   			}
;;;2360   			if (fat == FS_FAT16) {
;;;2361   				if (LD_WORD(p) == 0) n++;
;;;2362   				p += 2; i -= 2;
;;;2363   			} else {
;;;2364   				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
;;;2365   				p += 4; i -= 4;
;;;2366   			}
;;;2367   		} while (--clst);
;;;2368   	}
;;;2369   	(*fatfs)->free_clust = n;
;;;2370   	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
;;;2371   	*nclst = n;
;;;2372   
;;;2373   	LEAVE_FF(*fatfs, FR_OK);
;;;2374   }
00001c  b005              ADD      sp,sp,#0x14
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L15.34|
000022  6820              LDR      r0,[r4,#0]            ;2332
000024  6901              LDR      r1,[r0,#0x10]         ;2332
000026  69c0              LDR      r0,[r0,#0x1c]         ;2332
000028  1e80              SUBS     r0,r0,#2              ;2332
00002a  4281              CMP      r1,r0                 ;2332
00002c  d805              BHI      |L15.58|
00002e  6820              LDR      r0,[r4,#0]            ;2333
000030  6900              LDR      r0,[r0,#0x10]         ;2333
000032  f8cb0000          STR      r0,[r11,#0]           ;2333
000036  2000              MOVS     r0,#0                 ;2334
000038  e7f0              B        |L15.28|
                  |L15.58|
00003a  6820              LDR      r0,[r4,#0]            ;2338
00003c  f890a000          LDRB     r10,[r0,#0]           ;2338
000040  2600              MOVS     r6,#0                 ;2339
000042  f1ba0f01          CMP      r10,#1                ;2340
000046  d11b              BNE      |L15.128|
000048  2702              MOVS     r7,#2                 ;2341
00004a  bf00              NOP                            ;2342
                  |L15.76|
00004c  4639              MOV      r1,r7                 ;2343
00004e  6820              LDR      r0,[r4,#0]            ;2343
000050  f7fffffe          BL       get_fat
000054  4680              MOV      r8,r0                 ;2343
000056  f1080001          ADD      r0,r8,#1              ;2344
00005a  b908              CBNZ     r0,|L15.96|
00005c  2001              MOVS     r0,#1                 ;2344
00005e  e7dd              B        |L15.28|
                  |L15.96|
000060  f1b80f01          CMP      r8,#1                 ;2345
000064  d101              BNE      |L15.106|
000066  2002              MOVS     r0,#2                 ;2345
000068  e7d8              B        |L15.28|
                  |L15.106|
00006a  f1b80f00          CMP      r8,#0                 ;2346
00006e  d100              BNE      |L15.114|
000070  1c76              ADDS     r6,r6,#1              ;2346
                  |L15.114|
000072  1c78              ADDS     r0,r7,#1              ;2347
000074  4607              MOV      r7,r0                 ;2347
000076  6821              LDR      r1,[r4,#0]            ;2347
000078  69c9              LDR      r1,[r1,#0x1c]         ;2347
00007a  4288              CMP      r0,r1                 ;2347
00007c  d3e6              BCC      |L15.76|
00007e  e03d              B        |L15.252|
                  |L15.128|
000080  6820              LDR      r0,[r4,#0]            ;2349
000082  69c7              LDR      r7,[r0,#0x1c]         ;2349
000084  6820              LDR      r0,[r4,#0]            ;2350
000086  6a00              LDR      r0,[r0,#0x20]         ;2350
000088  9000              STR      r0,[sp,#0]            ;2350
00008a  f04f0900          MOV      r9,#0                 ;2351
00008e  2500              MOVS     r5,#0                 ;2351
000090  bf00              NOP                            ;2352
                  |L15.146|
000092  f1b90f00          CMP      r9,#0                 ;2353
000096  d110              BNE      |L15.186|
000098  9a00              LDR      r2,[sp,#0]            ;2354
00009a  1c53              ADDS     r3,r2,#1              ;2354
00009c  4611              MOV      r1,r2                 ;2354
00009e  9300              STR      r3,[sp,#0]            ;2354
0000a0  6820              LDR      r0,[r4,#0]            ;2354
0000a2  f7fffffe          BL       move_window
0000a6  9001              STR      r0,[sp,#4]            ;2354
0000a8  9801              LDR      r0,[sp,#4]            ;2355
0000aa  b108              CBZ      r0,|L15.176|
0000ac  9801              LDR      r0,[sp,#4]            ;2356
0000ae  e7b5              B        |L15.28|
                  |L15.176|
0000b0  6820              LDR      r0,[r4,#0]            ;2357
0000b2  f1000530          ADD      r5,r0,#0x30           ;2357
0000b6  f44f7900          MOV      r9,#0x200             ;2358
                  |L15.186|
0000ba  f1ba0f02          CMP      r10,#2                ;2360
0000be  d109              BNE      |L15.212|
0000c0  7828              LDRB     r0,[r5,#0]            ;2361
0000c2  7869              LDRB     r1,[r5,#1]            ;2361
0000c4  ea402001          ORR      r0,r0,r1,LSL #8       ;2361
0000c8  b900              CBNZ     r0,|L15.204|
0000ca  1c76              ADDS     r6,r6,#1              ;2361
                  |L15.204|
0000cc  1cad              ADDS     r5,r5,#2              ;2362
0000ce  f1a90902          SUB      r9,r9,#2              ;2362
0000d2  e010              B        |L15.246|
                  |L15.212|
0000d4  78e8              LDRB     r0,[r5,#3]            ;2364
0000d6  0600              LSLS     r0,r0,#24             ;2364
0000d8  78a9              LDRB     r1,[r5,#2]            ;2364
0000da  ea404001          ORR      r0,r0,r1,LSL #16      ;2364
0000de  7869              LDRB     r1,[r5,#1]            ;2364
0000e0  ea402001          ORR      r0,r0,r1,LSL #8       ;2364
0000e4  7829              LDRB     r1,[r5,#0]            ;2364
0000e6  4308              ORRS     r0,r0,r1              ;2364
0000e8  f0204070          BIC      r0,r0,#0xf0000000     ;2364
0000ec  b900              CBNZ     r0,|L15.240|
0000ee  1c76              ADDS     r6,r6,#1              ;2364
                  |L15.240|
0000f0  1d2d              ADDS     r5,r5,#4              ;2365
0000f2  f1a90904          SUB      r9,r9,#4              ;2365
                  |L15.246|
0000f6  1e78              SUBS     r0,r7,#1              ;2367
0000f8  1e07              SUBS     r7,r0,#0              ;2367
0000fa  d1ca              BNE      |L15.146|
                  |L15.252|
0000fc  6820              LDR      r0,[r4,#0]            ;2369
0000fe  6106              STR      r6,[r0,#0x10]         ;2369
000100  f1ba0f03          CMP      r10,#3                ;2370
000104  d102              BNE      |L15.268|
000106  2001              MOVS     r0,#1                 ;2370
000108  6821              LDR      r1,[r4,#0]            ;2370
00010a  7148              STRB     r0,[r1,#5]            ;2370
                  |L15.268|
00010c  f8cb6000          STR      r6,[r11,#0]           ;2371
000110  2000              MOVS     r0,#0                 ;2373
000112  e783              B        |L15.28|
;;;2375   
                          ENDP


                          AREA ||i.f_lseek||, CODE, READONLY, ALIGN=1

                  f_lseek PROC
;;;2101   
;;;2102   FRESULT f_lseek (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2103   	FIL *fp,		/* Pointer to the file object */
;;;2104   	DWORD ofs		/* File pointer from top of file */
;;;2105   )
;;;2106   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;2107   	FRESULT res;
;;;2108   	DWORD clst, bcs, nsect, ifptr;
;;;2109   
;;;2110   
;;;2111   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
000008  88a1              LDRH     r1,[r4,#4]
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       validate
000010  4682              MOV      r10,r0
;;;2112   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000012  f1ba0f00          CMP      r10,#0
000016  d002              BEQ      |L16.30|
000018  4650              MOV      r0,r10
                  |L16.26|
;;;2113   	if (fp->flag & FA__ERROR)			/* Check abort flag */
;;;2114   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2115   	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;2116   #if !_FS_READONLY
;;;2117   		 && !(fp->flag & FA_WRITE)
;;;2118   #endif
;;;2119   		) ofs = fp->fsize;
;;;2120   
;;;2121   	ifptr = fp->fptr;
;;;2122   	fp->fptr = nsect = 0; fp->csect = 255;
;;;2123   	if (ofs > 0) {
;;;2124   		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;2125   		if (ifptr > 0 &&
;;;2126   			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;2127   			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;2128   			ofs -= fp->fptr;
;;;2129   			clst = fp->curr_clust;
;;;2130   		} else {									/* When seek to back cluster, */
;;;2131   			clst = fp->org_clust;					/* start from the first cluster */
;;;2132   #if !_FS_READONLY
;;;2133   			if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;2134   				clst = create_chain(fp->fs, 0);
;;;2135   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2136   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2137   				fp->org_clust = clst;
;;;2138   			}
;;;2139   #endif
;;;2140   			fp->curr_clust = clst;
;;;2141   		}
;;;2142   		if (clst != 0) {
;;;2143   			while (ofs > bcs) {						/* Cluster following loop */
;;;2144   #if !_FS_READONLY
;;;2145   				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;2146   					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
;;;2147   					if (clst == 0) {				/* When disk gets full, clip file size */
;;;2148   						ofs = bcs; break;
;;;2149   					}
;;;2150   				} else
;;;2151   #endif
;;;2152   					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;2153   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2154   				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
;;;2155   				fp->curr_clust = clst;
;;;2156   				fp->fptr += bcs;
;;;2157   				ofs -= bcs;
;;;2158   			}
;;;2159   			fp->fptr += ofs;
;;;2160   			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
;;;2161   			if (ofs % SS(fp->fs)) {
;;;2162   				nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;2163   				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;2164   				nsect += fp->csect;
;;;2165   				fp->csect++;
;;;2166   			}
;;;2167   		}
;;;2168   	}
;;;2169   	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
;;;2170   #if !_FS_TINY
;;;2171   #if !_FS_READONLY
;;;2172   		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
;;;2173   			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
;;;2174   				ABORT(fp->fs, FR_DISK_ERR);
;;;2175   			fp->flag &= ~FA__DIRTY;
;;;2176   		}
;;;2177   #endif
;;;2178   		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
;;;2179   			ABORT(fp->fs, FR_DISK_ERR);
;;;2180   #endif
;;;2181   		fp->dsect = nsect;
;;;2182   	}
;;;2183   #if !_FS_READONLY
;;;2184   	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
;;;2185   		fp->fsize = fp->fptr;
;;;2186   		fp->flag |= FA__WRITTEN;
;;;2187   	}
;;;2188   #endif
;;;2189   
;;;2190   	LEAVE_FF(fp->fs, res);
;;;2191   }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L16.30|
00001e  79a0              LDRB     r0,[r4,#6]            ;2113
000020  f0000080          AND      r0,r0,#0x80           ;2113
000024  b108              CBZ      r0,|L16.42|
000026  2002              MOVS     r0,#2                 ;2114
000028  e7f7              B        |L16.26|
                  |L16.42|
00002a  68e0              LDR      r0,[r4,#0xc]          ;2115
00002c  42b0              CMP      r0,r6                 ;2115
00002e  d204              BCS      |L16.58|
000030  79a0              LDRB     r0,[r4,#6]            ;2117
000032  f0000002          AND      r0,r0,#2              ;2117
000036  b900              CBNZ     r0,|L16.58|
000038  68e6              LDR      r6,[r4,#0xc]          ;2119
                  |L16.58|
00003a  f8d49008          LDR      r9,[r4,#8]            ;2121
00003e  f04f0800          MOV      r8,#0                 ;2122
000042  f8c48008          STR      r8,[r4,#8]            ;2122
000046  20ff              MOVS     r0,#0xff              ;2122
000048  71e0              STRB     r0,[r4,#7]            ;2122
00004a  2e00              CMP      r6,#0                 ;2123
00004c  d07d              BEQ      |L16.330|
00004e  6820              LDR      r0,[r4,#0]            ;2124
000050  7880              LDRB     r0,[r0,#2]            ;2124
000052  0247              LSLS     r7,r0,#9              ;2124
000054  f1b90f00          CMP      r9,#0                 ;2125
000058  d011              BEQ      |L16.126|
00005a  1e70              SUBS     r0,r6,#1              ;2126
00005c  fbb0f1f7          UDIV     r1,r0,r7              ;2126
000060  f1a90001          SUB      r0,r9,#1              ;2126
000064  fbb0f0f7          UDIV     r0,r0,r7              ;2126
000068  4281              CMP      r1,r0                 ;2126
00006a  d308              BCC      |L16.126|
00006c  f1a90001          SUB      r0,r9,#1              ;2127
000070  1e79              SUBS     r1,r7,#1              ;2127
000072  4388              BICS     r0,r0,r1              ;2127
000074  60a0              STR      r0,[r4,#8]            ;2127
000076  68a0              LDR      r0,[r4,#8]            ;2128
000078  1a36              SUBS     r6,r6,r0              ;2128
00007a  6965              LDR      r5,[r4,#0x14]         ;2129
00007c  e018              B        |L16.176|
                  |L16.126|
00007e  6925              LDR      r5,[r4,#0x10]         ;2131
000080  b9ad              CBNZ     r5,|L16.174|
000082  2100              MOVS     r1,#0                 ;2134
000084  6820              LDR      r0,[r4,#0]            ;2134
000086  f7fffffe          BL       create_chain
00008a  4605              MOV      r5,r0                 ;2134
00008c  2d01              CMP      r5,#1                 ;2135
00008e  d105              BNE      |L16.156|
000090  79a0              LDRB     r0,[r4,#6]            ;2135
000092  f0400080          ORR      r0,r0,#0x80           ;2135
000096  71a0              STRB     r0,[r4,#6]            ;2135
000098  2002              MOVS     r0,#2                 ;2135
00009a  e7be              B        |L16.26|
                  |L16.156|
00009c  1c68              ADDS     r0,r5,#1              ;2136
00009e  b928              CBNZ     r0,|L16.172|
0000a0  79a0              LDRB     r0,[r4,#6]            ;2136
0000a2  f0400080          ORR      r0,r0,#0x80           ;2136
0000a6  71a0              STRB     r0,[r4,#6]            ;2136
0000a8  2001              MOVS     r0,#1                 ;2136
0000aa  e7b6              B        |L16.26|
                  |L16.172|
0000ac  6125              STR      r5,[r4,#0x10]         ;2137
                  |L16.174|
0000ae  6165              STR      r5,[r4,#0x14]         ;2140
                  |L16.176|
0000b0  2d00              CMP      r5,#0                 ;2142
0000b2  d04a              BEQ      |L16.330|
0000b4  e029              B        |L16.266|
                  |L16.182|
0000b6  79a0              LDRB     r0,[r4,#6]            ;2145
0000b8  f0000002          AND      r0,r0,#2              ;2145
0000bc  b138              CBZ      r0,|L16.206|
0000be  4629              MOV      r1,r5                 ;2146
0000c0  6820              LDR      r0,[r4,#0]            ;2146
0000c2  f7fffffe          BL       create_chain
0000c6  4605              MOV      r5,r0                 ;2146
0000c8  b935              CBNZ     r5,|L16.216|
0000ca  463e              MOV      r6,r7                 ;2148
0000cc  e01f              B        |L16.270|
                  |L16.206|
0000ce  4629              MOV      r1,r5                 ;2152
0000d0  6820              LDR      r0,[r4,#0]            ;2152
0000d2  f7fffffe          BL       get_fat
0000d6  4605              MOV      r5,r0                 ;2152
                  |L16.216|
0000d8  1c68              ADDS     r0,r5,#1              ;2153
0000da  b928              CBNZ     r0,|L16.232|
0000dc  79a0              LDRB     r0,[r4,#6]            ;2153
0000de  f0400080          ORR      r0,r0,#0x80           ;2153
0000e2  71a0              STRB     r0,[r4,#6]            ;2153
0000e4  2001              MOVS     r0,#1                 ;2153
0000e6  e798              B        |L16.26|
                  |L16.232|
0000e8  2d01              CMP      r5,#1                 ;2154
0000ea  d903              BLS      |L16.244|
0000ec  6820              LDR      r0,[r4,#0]            ;2154
0000ee  69c0              LDR      r0,[r0,#0x1c]         ;2154
0000f0  42a8              CMP      r0,r5                 ;2154
0000f2  d805              BHI      |L16.256|
                  |L16.244|
0000f4  79a0              LDRB     r0,[r4,#6]            ;2154
0000f6  f0400080          ORR      r0,r0,#0x80           ;2154
0000fa  71a0              STRB     r0,[r4,#6]            ;2154
0000fc  2002              MOVS     r0,#2                 ;2154
0000fe  e78c              B        |L16.26|
                  |L16.256|
000100  6165              STR      r5,[r4,#0x14]         ;2155
000102  68a0              LDR      r0,[r4,#8]            ;2156
000104  4438              ADD      r0,r0,r7              ;2156
000106  60a0              STR      r0,[r4,#8]            ;2156
000108  1bf6              SUBS     r6,r6,r7              ;2157
                  |L16.266|
00010a  42be              CMP      r6,r7                 ;2143
00010c  d8d3              BHI      |L16.182|
                  |L16.270|
00010e  bf00              NOP                            ;2148
000110  68a0              LDR      r0,[r4,#8]            ;2159
000112  4430              ADD      r0,r0,r6              ;2159
000114  60a0              STR      r0,[r4,#8]            ;2159
000116  f3c62047          UBFX     r0,r6,#9,#8           ;2160
00011a  71e0              STRB     r0,[r4,#7]            ;2160
00011c  f3c60008          UBFX     r0,r6,#0,#9           ;2161
000120  b168              CBZ      r0,|L16.318|
000122  4629              MOV      r1,r5                 ;2162
000124  6820              LDR      r0,[r4,#0]            ;2162
000126  f7fffffe          BL       clust2sect
00012a  4680              MOV      r8,r0                 ;2162
00012c  f1b80f00          CMP      r8,#0                 ;2163
000130  d106              BNE      |L16.320|
000132  79a0              LDRB     r0,[r4,#6]            ;2163
000134  f0400080          ORR      r0,r0,#0x80           ;2163
000138  71a0              STRB     r0,[r4,#6]            ;2163
00013a  2002              MOVS     r0,#2                 ;2163
00013c  e76d              B        |L16.26|
                  |L16.318|
00013e  e004              B        |L16.330|
                  |L16.320|
000140  79e0              LDRB     r0,[r4,#7]            ;2164
000142  4480              ADD      r8,r8,r0              ;2164
000144  79e0              LDRB     r0,[r4,#7]            ;2165
000146  1c40              ADDS     r0,r0,#1              ;2165
000148  71e0              STRB     r0,[r4,#7]            ;2165
                  |L16.330|
00014a  8920              LDRH     r0,[r4,#8]            ;2169
00014c  f3c00008          UBFX     r0,r0,#0,#9           ;2169
000150  b350              CBZ      r0,|L16.424|
000152  69a0              LDR      r0,[r4,#0x18]         ;2169
000154  4540              CMP      r0,r8                 ;2169
000156  d027              BEQ      |L16.424|
000158  79a0              LDRB     r0,[r4,#6]            ;2172
00015a  f0000040          AND      r0,r0,#0x40           ;2172
00015e  b190              CBZ      r0,|L16.390|
000160  6821              LDR      r1,[r4,#0]            ;2173
000162  7848              LDRB     r0,[r1,#1]            ;2173
000164  2301              MOVS     r3,#1                 ;2173
000166  f1040124          ADD      r1,r4,#0x24           ;2173
00016a  69a2              LDR      r2,[r4,#0x18]         ;2173
00016c  f7fffffe          BL       disk_write
000170  b128              CBZ      r0,|L16.382|
000172  79a0              LDRB     r0,[r4,#6]            ;2174
000174  f0400080          ORR      r0,r0,#0x80           ;2174
000178  71a0              STRB     r0,[r4,#6]            ;2174
00017a  2001              MOVS     r0,#1                 ;2174
00017c  e74d              B        |L16.26|
                  |L16.382|
00017e  79a0              LDRB     r0,[r4,#6]            ;2175
000180  f0200040          BIC      r0,r0,#0x40           ;2175
000184  71a0              STRB     r0,[r4,#6]            ;2175
                  |L16.390|
000186  6821              LDR      r1,[r4,#0]            ;2178
000188  7848              LDRB     r0,[r1,#1]            ;2178
00018a  2301              MOVS     r3,#1                 ;2178
00018c  4642              MOV      r2,r8                 ;2178
00018e  f1040124          ADD      r1,r4,#0x24           ;2178
000192  f7fffffe          BL       disk_read
000196  b128              CBZ      r0,|L16.420|
000198  79a0              LDRB     r0,[r4,#6]            ;2179
00019a  f0400080          ORR      r0,r0,#0x80           ;2179
00019e  71a0              STRB     r0,[r4,#6]            ;2179
0001a0  2001              MOVS     r0,#1                 ;2179
0001a2  e73a              B        |L16.26|
                  |L16.420|
0001a4  f8c48018          STR      r8,[r4,#0x18]         ;2181
                  |L16.424|
0001a8  e9d40102          LDRD     r0,r1,[r4,#8]         ;2184
0001ac  4288              CMP      r0,r1                 ;2184
0001ae  d905              BLS      |L16.444|
0001b0  68a0              LDR      r0,[r4,#8]            ;2185
0001b2  60e0              STR      r0,[r4,#0xc]          ;2185
0001b4  79a0              LDRB     r0,[r4,#6]            ;2186
0001b6  f0400020          ORR      r0,r0,#0x20           ;2186
0001ba  71a0              STRB     r0,[r4,#6]            ;2186
                  |L16.444|
0001bc  4650              MOV      r0,r10                ;2190
0001be  e72c              B        |L16.26|
;;;2192   
                          ENDP


                          AREA ||i.f_mkdir||, CODE, READONLY, ALIGN=1

                  f_mkdir PROC
;;;2481   
;;;2482   FRESULT f_mkdir (
000000  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;2483   	const XCHAR *path		/* Pointer to the directory path */
;;;2484   )
;;;2485   {
000004  b08b              SUB      sp,sp,#0x2c
;;;2486   	FRESULT res;
;;;2487   	DIR dj;
;;;2488   	NAMEBUF(sfn, lfn);
;;;2489   	BYTE *dir, n;
;;;2490   	DWORD dsect, dclst, pclst, tim;
;;;2491   
;;;2492   
;;;2493   	res = chk_mounted(&path, &dj.fs, 1);
000006  2201              MOVS     r2,#1
000008  a904              ADD      r1,sp,#0x10
00000a  a80b              ADD      r0,sp,#0x2c
00000c  f7fffffe          BL       chk_mounted
000010  4607              MOV      r7,r0
;;;2494   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
000012  b11f              CBZ      r7,|L17.28|
000014  4638              MOV      r0,r7
                  |L17.22|
;;;2495   
;;;2496   	INITBUF(dj, sfn, lfn);
;;;2497   	res = follow_path(&dj, path);			/* Follow the file path */
;;;2498   	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
;;;2499   	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
;;;2500   		res = FR_INVALID_NAME;
;;;2501   	if (res != FR_NO_FILE)					/* Any error occured */
;;;2502   		LEAVE_FF(dj.fs, res);
;;;2503   
;;;2504   	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
;;;2505   	res = FR_OK;
;;;2506   	if (dclst == 0) res = FR_DENIED;
;;;2507   	if (dclst == 1) res = FR_INT_ERR;
;;;2508   	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
;;;2509   	if (res == FR_OK)
;;;2510   		res = move_window(dj.fs, 0);
;;;2511   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
;;;2512   	dsect = clust2sect(dj.fs, dclst);
;;;2513   
;;;2514   	dir = dj.fs->win;						/* Initialize the new directory table */
;;;2515   	mem_set(dir, 0, SS(dj.fs));
;;;2516   	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
;;;2517   	dir[DIR_Name] = '.';
;;;2518   	dir[DIR_Attr] = AM_DIR;
;;;2519   	tim = get_fattime();
;;;2520   	ST_DWORD(dir+DIR_WrtTime, tim);
;;;2521   	ST_WORD(dir+DIR_FstClusLO, dclst);
;;;2522   	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
;;;2523   	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
;;;2524   	dir[33] = '.';
;;;2525   	pclst = dj.sclust;
;;;2526   	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
;;;2527   		pclst = 0;
;;;2528   	ST_WORD(dir+32+DIR_FstClusLO, pclst);
;;;2529   	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
;;;2530   	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
;;;2531   		dj.fs->winsect = dsect++;
;;;2532   		dj.fs->wflag = 1;
;;;2533   		res = move_window(dj.fs, 0);
;;;2534   		if (res) LEAVE_FF(dj.fs, res);
;;;2535   		mem_set(dir, 0, SS(dj.fs));
;;;2536   	}
;;;2537   
;;;2538   	res = dir_register(&dj);
;;;2539   	if (res != FR_OK) {
;;;2540   		remove_chain(dj.fs, dclst);
;;;2541   	} else {
;;;2542   		dir = dj.dir;
;;;2543   		dir[DIR_Attr] = AM_DIR;					/* Attribute */
;;;2544   		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
;;;2545   		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
;;;2546   		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
;;;2547   		dj.fs->wflag = 1;
;;;2548   		res = sync(dj.fs);
;;;2549   	}
;;;2550   
;;;2551   	LEAVE_FF(dj.fs, res);
;;;2552   }
000016  b00c              ADD      sp,sp,#0x30
000018  e8bd87f0          POP      {r4-r10,pc}
                  |L17.28|
00001c  a801              ADD      r0,sp,#4              ;2496
00001e  900a              STR      r0,[sp,#0x28]         ;2496
000020  a804              ADD      r0,sp,#0x10           ;2497
000022  990b              LDR      r1,[sp,#0x2c]         ;2497
000024  f7fffffe          BL       follow_path
000028  4607              MOV      r7,r0                 ;2497
00002a  b907              CBNZ     r7,|L17.46|
00002c  2708              MOVS     r7,#8                 ;2498
                  |L17.46|
00002e  bf00              NOP                            ;2499
000030  2f04              CMP      r7,#4                 ;2501
000032  d001              BEQ      |L17.56|
000034  4638              MOV      r0,r7                 ;2502
000036  e7ee              B        |L17.22|
                  |L17.56|
000038  2100              MOVS     r1,#0                 ;2504
00003a  9804              LDR      r0,[sp,#0x10]         ;2504
00003c  f7fffffe          BL       create_chain
000040  4605              MOV      r5,r0                 ;2504
000042  2700              MOVS     r7,#0                 ;2505
000044  b905              CBNZ     r5,|L17.72|
000046  2707              MOVS     r7,#7                 ;2506
                  |L17.72|
000048  2d01              CMP      r5,#1                 ;2507
00004a  d100              BNE      |L17.78|
00004c  2702              MOVS     r7,#2                 ;2507
                  |L17.78|
00004e  1c68              ADDS     r0,r5,#1              ;2508
000050  b900              CBNZ     r0,|L17.84|
000052  2701              MOVS     r7,#1                 ;2508
                  |L17.84|
000054  b927              CBNZ     r7,|L17.96|
000056  2100              MOVS     r1,#0                 ;2510
000058  9804              LDR      r0,[sp,#0x10]         ;2510
00005a  f7fffffe          BL       move_window
00005e  4607              MOV      r7,r0                 ;2510
                  |L17.96|
000060  b10f              CBZ      r7,|L17.102|
000062  4638              MOV      r0,r7                 ;2511
000064  e7d7              B        |L17.22|
                  |L17.102|
000066  4629              MOV      r1,r5                 ;2512
000068  9804              LDR      r0,[sp,#0x10]         ;2512
00006a  f7fffffe          BL       clust2sect
00006e  4682              MOV      r10,r0                ;2512
000070  9804              LDR      r0,[sp,#0x10]         ;2514
000072  f1000430          ADD      r4,r0,#0x30           ;2514
000076  f44f7200          MOV      r2,#0x200             ;2515
00007a  2100              MOVS     r1,#0                 ;2515
00007c  4620              MOV      r0,r4                 ;2515
00007e  f7fffffe          BL       mem_set
000082  220b              MOVS     r2,#0xb               ;2516
000084  2120              MOVS     r1,#0x20              ;2516
000086  4620              MOV      r0,r4                 ;2516
000088  f7fffffe          BL       mem_set
00008c  202e              MOVS     r0,#0x2e              ;2517
00008e  7020              STRB     r0,[r4,#0]            ;2517
000090  2010              MOVS     r0,#0x10              ;2518
000092  72e0              STRB     r0,[r4,#0xb]          ;2518
000094  f7fffffe          BL       get_fattime
000098  4606              MOV      r6,r0                 ;2519
00009a  75a6              STRB     r6,[r4,#0x16]         ;2520
00009c  0a31              LSRS     r1,r6,#8              ;2520
00009e  75e1              STRB     r1,[r4,#0x17]         ;2520
0000a0  0c31              LSRS     r1,r6,#16             ;2520
0000a2  7621              STRB     r1,[r4,#0x18]         ;2520
0000a4  0e31              LSRS     r1,r6,#24             ;2520
0000a6  7661              STRB     r1,[r4,#0x19]         ;2520
0000a8  76a5              STRB     r5,[r4,#0x1a]         ;2521
0000aa  0a29              LSRS     r1,r5,#8              ;2521
0000ac  76e1              STRB     r1,[r4,#0x1b]         ;2521
0000ae  0c28              LSRS     r0,r5,#16             ;2522
0000b0  7520              STRB     r0,[r4,#0x14]         ;2522
0000b2  0e29              LSRS     r1,r5,#24             ;2522
0000b4  7561              STRB     r1,[r4,#0x15]         ;2522
0000b6  2220              MOVS     r2,#0x20              ;2523
0000b8  4621              MOV      r1,r4                 ;2523
0000ba  f1040020          ADD      r0,r4,#0x20           ;2523
0000be  f7fffffe          BL       mem_cpy
0000c2  202e              MOVS     r0,#0x2e              ;2524
0000c4  f8840021          STRB     r0,[r4,#0x21]         ;2524
0000c8  f8dd8018          LDR      r8,[sp,#0x18]         ;2525
0000cc  9804              LDR      r0,[sp,#0x10]         ;2526
0000ce  7800              LDRB     r0,[r0,#0]            ;2526
0000d0  2803              CMP      r0,#3                 ;2526
0000d2  d105              BNE      |L17.224|
0000d4  9804              LDR      r0,[sp,#0x10]         ;2526
0000d6  6a40              LDR      r0,[r0,#0x24]         ;2526
0000d8  4540              CMP      r0,r8                 ;2526
0000da  d101              BNE      |L17.224|
0000dc  f04f0800          MOV      r8,#0                 ;2527
                  |L17.224|
0000e0  f884803a          STRB     r8,[r4,#0x3a]         ;2528
0000e4  ea4f2118          LSR      r1,r8,#8              ;2528
0000e8  f884103b          STRB     r1,[r4,#0x3b]         ;2528
0000ec  f3c84107          UBFX     r1,r8,#16,#8          ;2529
0000f0  2034              MOVS     r0,#0x34              ;2529
0000f2  5501              STRB     r1,[r0,r4]            ;2529
0000f4  ea4f6118          LSR      r1,r8,#24             ;2529
0000f8  f8841035          STRB     r1,[r4,#0x35]         ;2529
0000fc  f04f0900          MOV      r9,#0                 ;2530
000100  e019              B        |L17.310|
                  |L17.258|
000102  9804              LDR      r0,[sp,#0x10]         ;2531
000104  f8c0a02c          STR      r10,[r0,#0x2c]        ;2531
000108  f10a0a01          ADD      r10,r10,#1            ;2531
00010c  2001              MOVS     r0,#1                 ;2532
00010e  9904              LDR      r1,[sp,#0x10]         ;2532
000110  7108              STRB     r0,[r1,#4]            ;2532
000112  2100              MOVS     r1,#0                 ;2533
000114  9804              LDR      r0,[sp,#0x10]         ;2533
000116  f7fffffe          BL       move_window
00011a  4607              MOV      r7,r0                 ;2533
00011c  b10f              CBZ      r7,|L17.290|
00011e  4638              MOV      r0,r7                 ;2534
000120  e779              B        |L17.22|
                  |L17.290|
000122  f44f7200          MOV      r2,#0x200             ;2535
000126  2100              MOVS     r1,#0                 ;2535
000128  4620              MOV      r0,r4                 ;2535
00012a  f7fffffe          BL       mem_set
00012e  f1090001          ADD      r0,r9,#1              ;2530
000132  f00009ff          AND      r9,r0,#0xff           ;2530
                  |L17.310|
000136  9804              LDR      r0,[sp,#0x10]         ;2530
000138  7880              LDRB     r0,[r0,#2]            ;2530
00013a  4548              CMP      r0,r9                 ;2530
00013c  dce1              BGT      |L17.258|
00013e  a804              ADD      r0,sp,#0x10           ;2538
000140  f7fffffe          BL       dir_register
000144  4607              MOV      r7,r0                 ;2538
000146  b127              CBZ      r7,|L17.338|
000148  4629              MOV      r1,r5                 ;2540
00014a  9804              LDR      r0,[sp,#0x10]         ;2540
00014c  f7fffffe          BL       remove_chain
000150  e017              B        |L17.386|
                  |L17.338|
000152  9c09              LDR      r4,[sp,#0x24]         ;2542
000154  2010              MOVS     r0,#0x10              ;2543
000156  72e0              STRB     r0,[r4,#0xb]          ;2543
000158  75a6              STRB     r6,[r4,#0x16]         ;2544
00015a  0a31              LSRS     r1,r6,#8              ;2544
00015c  75e1              STRB     r1,[r4,#0x17]         ;2544
00015e  0c31              LSRS     r1,r6,#16             ;2544
000160  7621              STRB     r1,[r4,#0x18]         ;2544
000162  0e31              LSRS     r1,r6,#24             ;2544
000164  7661              STRB     r1,[r4,#0x19]         ;2544
000166  76a5              STRB     r5,[r4,#0x1a]         ;2545
000168  0a29              LSRS     r1,r5,#8              ;2545
00016a  76e1              STRB     r1,[r4,#0x1b]         ;2545
00016c  0c28              LSRS     r0,r5,#16             ;2546
00016e  7520              STRB     r0,[r4,#0x14]         ;2546
000170  0e29              LSRS     r1,r5,#24             ;2546
000172  7561              STRB     r1,[r4,#0x15]         ;2546
000174  2001              MOVS     r0,#1                 ;2547
000176  9904              LDR      r1,[sp,#0x10]         ;2547
000178  7108              STRB     r0,[r1,#4]            ;2547
00017a  9804              LDR      r0,[sp,#0x10]         ;2548
00017c  f7fffffe          BL       sync
000180  4607              MOV      r7,r0                 ;2548
                  |L17.386|
000182  4638              MOV      r0,r7                 ;2551
000184  e747              B        |L17.22|
;;;2553   
                          ENDP


                          AREA ||i.f_mkfs||, CODE, READONLY, ALIGN=2

                  f_mkfs PROC
;;;2779   
;;;2780   FRESULT f_mkfs (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2781   	BYTE drv,			/* Logical drive number */
;;;2782   	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
;;;2783   	WORD allocsize		/* Allocation unit size [bytes] */
;;;2784   )
;;;2785   {
000004  b08c              SUB      sp,sp,#0x30
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
;;;2786   	static const DWORD sstbl[] = { 2048000, 1024000, 512000, 256000, 128000, 64000, 32000, 16000, 8000, 4000,   0 };
;;;2787   	static const WORD cstbl[] =  {   32768,   16384,   8192,   4096,   2048, 16384,  8192,  4096, 2048, 1024, 512 };
;;;2788   	BYTE fmt, m, *tbl;
;;;2789   	DWORD b_part, b_fat, b_dir, b_data;		/* Area offset (LBA) */
;;;2790   	DWORD n_part, n_rsv, n_fat, n_dir;		/* Area size */
;;;2791   	DWORD n_clst, d, n;
;;;2792   	WORD as;
;;;2793   	FATFS *fs;
;;;2794   	DSTATUS stat;
;;;2795   
;;;2796   
;;;2797   	/* Check validity of the parameters */
;;;2798   	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
00000a  980c              LDR      r0,[sp,#0x30]
00000c  2801              CMP      r0,#1
00000e  db03              BLT      |L18.24|
000010  200b              MOVS     r0,#0xb
                  |L18.18|
;;;2799   	if (partition >= 2) return FR_MKFS_ABORTED;
;;;2800   
;;;2801   	/* Check mounted drive and clear work area */
;;;2802   	fs = FatFs[drv];
;;;2803   	if (!fs) return FR_NOT_ENABLED;
;;;2804   	fs->fs_type = 0;
;;;2805   	drv = LD2PD(drv);
;;;2806   
;;;2807   	/* Get disk statics */
;;;2808   	stat = disk_initialize(drv);
;;;2809   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;2810   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;2811   #if _MAX_SS != 512						/* Get disk sector size */
;;;2812   	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
;;;2813   		|| SS(fs) > _MAX_SS)
;;;2814   		return FR_MKFS_ABORTED;
;;;2815   #endif
;;;2816   	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
;;;2817   		return FR_MKFS_ABORTED;
;;;2818   	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
;;;2819   	b_part = (!partition) ? 63 : 0;		/* Boot sector */
;;;2820   	n_part -= b_part;
;;;2821   	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
;;;2822   	if (d != allocsize) allocsize = 0;
;;;2823   	if (!allocsize) {					/* Auto selection of cluster size */
;;;2824   		d = n_part;
;;;2825   		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
;;;2826   		for (n = 0; d < sstbl[n]; n++) ;
;;;2827   		allocsize = cstbl[n];
;;;2828   	}
;;;2829   	if (allocsize < SS(fs)) allocsize = SS(fs);
;;;2830   
;;;2831   	allocsize /= SS(fs);		/* Number of sectors per cluster */
;;;2832   
;;;2833   	/* Pre-compute number of clusters and FAT type */
;;;2834   	n_clst = n_part / allocsize;
;;;2835   	fmt = FS_FAT12;
;;;2836   	if (n_clst >= 0xFF5) fmt = FS_FAT16;
;;;2837   	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
;;;2838   
;;;2839   	/* Determine offset and size of FAT structure */
;;;2840   	switch (fmt) {
;;;2841   	case FS_FAT12:
;;;2842   		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
;;;2843   		n_rsv = 1 + partition;
;;;2844   		n_dir = N_ROOTDIR * 32 / SS(fs);
;;;2845   		break;
;;;2846   	case FS_FAT16:
;;;2847   		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
;;;2848   		n_rsv = 1 + partition;
;;;2849   		n_dir = N_ROOTDIR * 32 / SS(fs);
;;;2850   		break;
;;;2851   	default:
;;;2852   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;2853   		n_rsv = 33 - partition;
;;;2854   		n_dir = 0;
;;;2855   	}
;;;2856   	b_fat = b_part + n_rsv;			/* FATs start sector */
;;;2857   	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
;;;2858   	b_data = b_dir + n_dir;			/* Data start sector */
;;;2859   
;;;2860   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;2861   	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
;;;2862   	n = (b_data + n - 1) & ~(n - 1);
;;;2863   	n_fat += (n - b_data) / N_FATS;
;;;2864   	/* b_dir and b_data are no longer used below */
;;;2865   
;;;2866   	/* Determine number of cluster and final check of validity of the FAT type */
;;;2867   	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
;;;2868   	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
;;;2869   		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
;;;2870   		return FR_MKFS_ABORTED;
;;;2871   
;;;2872   	/* Create partition table if needed */
;;;2873   	if (!partition) {
;;;2874   		DWORD n_disk = b_part + n_part;
;;;2875   
;;;2876   		mem_set(fs->win, 0, SS(fs));
;;;2877   		tbl = fs->win+MBR_Table;
;;;2878   		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
;;;2879   		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
;;;2880   			n_disk = n_disk / 63 / 255;
;;;2881   			tbl[7] = (BYTE)n_disk;
;;;2882   			tbl[6] = (BYTE)((n_disk >> 2) | 63);
;;;2883   		} else {
;;;2884   			ST_WORD(&tbl[6], 0xFFFF);
;;;2885   		}
;;;2886   		tbl[5] = 254;
;;;2887   		if (fmt != FS_FAT32)			/* System ID */
;;;2888   			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
;;;2889   		else
;;;2890   			tbl[4] = 0x0c;
;;;2891   		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
;;;2892   		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
;;;2893   		ST_WORD(tbl+64, 0xAA55);		/* Signature */
;;;2894   		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
;;;2895   			return FR_DISK_ERR;
;;;2896   		partition = 0xF8;
;;;2897   	} else {
;;;2898   		partition = 0xF0;
;;;2899   	}
;;;2900   
;;;2901   	/* Create boot record */
;;;2902   	tbl = fs->win;								/* Clear buffer */
;;;2903   	mem_set(tbl, 0, SS(fs));
;;;2904   	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
;;;2905   	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
;;;2906   	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
;;;2907   	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
;;;2908   	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
;;;2909   	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
;;;2910   	if (n_part < 0x10000) {						/* Number of total sectors */
;;;2911   		ST_WORD(tbl+BPB_TotSec16, n_part);
;;;2912   	} else {
;;;2913   		ST_DWORD(tbl+BPB_TotSec32, n_part);
;;;2914   	}
;;;2915   	tbl[BPB_Media] = partition;					/* Media descripter */
;;;2916   	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
;;;2917   	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
;;;2918   	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
;;;2919   	n = get_fattime();							/* Use current time as a VSN */
;;;2920   	if (fmt != FS_FAT32) {
;;;2921   		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
;;;2922   		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of secters per FAT */
;;;2923   		tbl[BS_DrvNum] = 0x80;					/* Drive number */
;;;2924   		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
;;;2925   		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
;;;2926   	} else {
;;;2927   		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
;;;2928   		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of secters per FAT */
;;;2929   		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
;;;2930   		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
;;;2931   		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
;;;2932   		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
;;;2933   		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
;;;2934   		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
;;;2935   	}
;;;2936   	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
;;;2937   	if (SS(fs) > 512U) {
;;;2938   		ST_WORD(tbl+SS(fs)-2, 0xAA55);
;;;2939   	}
;;;2940   	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
;;;2941   		return FR_DISK_ERR;
;;;2942   	if (fmt == FS_FAT32)
;;;2943   		disk_write(drv, tbl, b_part+6, 1);
;;;2944   
;;;2945   	/* Initialize FAT area */
;;;2946   	for (m = 0; m < N_FATS; m++) {
;;;2947   		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
;;;2948   		if (fmt != FS_FAT32) {
;;;2949   			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;2950   			n |= partition;
;;;2951   			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
;;;2952   		} else {
;;;2953   			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
;;;2954   			ST_DWORD(tbl+4, 0xFFFFFFFF);
;;;2955   			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
;;;2956   		}
;;;2957   		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;2958   			return FR_DISK_ERR;
;;;2959   		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
;;;2960   		for (n = 1; n < n_fat; n++) {
;;;2961   			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;2962   				return FR_DISK_ERR;
;;;2963   		}
;;;2964   	}
;;;2965   
;;;2966   	/* Initialize Root directory */
;;;2967   	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
;;;2968   	do {
;;;2969   		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;2970   			return FR_DISK_ERR;
;;;2971   	} while (--m);
;;;2972   
;;;2973   	/* Create FSInfo record if needed */
;;;2974   	if (fmt == FS_FAT32) {
;;;2975   		ST_WORD(tbl+BS_55AA, 0xAA55);
;;;2976   		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
;;;2977   		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
;;;2978   		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
;;;2979   		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
;;;2980   		disk_write(drv, tbl, b_part+1, 1);
;;;2981   		disk_write(drv, tbl, b_part+7, 1);
;;;2982   	}
;;;2983   
;;;2984   	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;2985   }
000012  b00f              ADD      sp,sp,#0x3c
000014  e8bd8ff0          POP      {r4-r11,pc}
                  |L18.24|
000018  f1b90f02          CMP      r9,#2                 ;2799
00001c  db01              BLT      |L18.34|
00001e  200e              MOVS     r0,#0xe               ;2799
000020  e7f7              B        |L18.18|
                  |L18.34|
000022  49fe              LDR      r1,|L18.1052|
000024  980c              LDR      r0,[sp,#0x30]         ;2802
000026  f8510020          LDR      r0,[r1,r0,LSL #2]     ;2802
00002a  9002              STR      r0,[sp,#8]            ;2802
00002c  9802              LDR      r0,[sp,#8]            ;2803
00002e  b908              CBNZ     r0,|L18.52|
000030  200c              MOVS     r0,#0xc               ;2803
000032  e7ee              B        |L18.18|
                  |L18.52|
000034  2100              MOVS     r1,#0                 ;2804
000036  9802              LDR      r0,[sp,#8]            ;2804
000038  7001              STRB     r1,[r0,#0]            ;2804
00003a  980c              LDR      r0,[sp,#0x30]         ;2805
00003c  900c              STR      r0,[sp,#0x30]         ;2805
00003e  980c              LDR      r0,[sp,#0x30]         ;2808
000040  f7fffffe          BL       disk_initialize
000044  9001              STR      r0,[sp,#4]            ;2808
000046  9801              LDR      r0,[sp,#4]            ;2809
000048  f0000001          AND      r0,r0,#1              ;2809
00004c  b108              CBZ      r0,|L18.82|
00004e  2003              MOVS     r0,#3                 ;2809
000050  e7df              B        |L18.18|
                  |L18.82|
000052  9801              LDR      r0,[sp,#4]            ;2810
000054  f0000004          AND      r0,r0,#4              ;2810
000058  b108              CBZ      r0,|L18.94|
00005a  200a              MOVS     r0,#0xa               ;2810
00005c  e7d9              B        |L18.18|
                  |L18.94|
00005e  aa07              ADD      r2,sp,#0x1c           ;2816
000060  2101              MOVS     r1,#1                 ;2816
000062  980c              LDR      r0,[sp,#0x30]         ;2816
000064  f7fffffe          BL       disk_ioctl
000068  b918              CBNZ     r0,|L18.114|
00006a  9807              LDR      r0,[sp,#0x1c]         ;2816
00006c  f5b06ffa          CMP      r0,#0x7d0             ;2816
000070  d201              BCS      |L18.118|
                  |L18.114|
000072  200e              MOVS     r0,#0xe               ;2817
000074  e7cd              B        |L18.18|
                  |L18.118|
000076  9807              LDR      r0,[sp,#0x1c]         ;2818
000078  f1b06ffa          CMP      r0,#0x7d00000         ;2818
00007c  d902              BLS      |L18.132|
00007e  f04f60fa          MOV      r0,#0x7d00000         ;2818
000082  9007              STR      r0,[sp,#0x1c]         ;2818
                  |L18.132|
000084  f1b90f00          CMP      r9,#0                 ;2819
000088  d101              BNE      |L18.142|
00008a  203f              MOVS     r0,#0x3f              ;2819
00008c  e000              B        |L18.144|
                  |L18.142|
00008e  2000              MOVS     r0,#0                 ;2819
                  |L18.144|
000090  4680              MOV      r8,r0                 ;2819
000092  9807              LDR      r0,[sp,#0x1c]         ;2820
000094  eba00008          SUB      r0,r0,r8              ;2820
000098  9007              STR      r0,[sp,#0x1c]         ;2820
00009a  f44f7000          MOV      r0,#0x200             ;2821
00009e  9005              STR      r0,[sp,#0x14]         ;2821
0000a0  e002              B        |L18.168|
                  |L18.162|
0000a2  9805              LDR      r0,[sp,#0x14]         ;2821
0000a4  0040              LSLS     r0,r0,#1              ;2821
0000a6  9005              STR      r0,[sp,#0x14]         ;2821
                  |L18.168|
0000a8  9805              LDR      r0,[sp,#0x14]         ;2821
0000aa  f5b04f00          CMP      r0,#0x8000            ;2821
0000ae  d802              BHI      |L18.182|
0000b0  9805              LDR      r0,[sp,#0x14]         ;2821
0000b2  4550              CMP      r0,r10                ;2821
0000b4  d1f5              BNE      |L18.162|
                  |L18.182|
0000b6  9805              LDR      r0,[sp,#0x14]         ;2822
0000b8  4550              CMP      r0,r10                ;2822
0000ba  d001              BEQ      |L18.192|
0000bc  f04f0a00          MOV      r10,#0                ;2822
                  |L18.192|
0000c0  f1ba0f00          CMP      r10,#0                ;2823
0000c4  d120              BNE      |L18.264|
0000c6  9807              LDR      r0,[sp,#0x1c]         ;2824
0000c8  9005              STR      r0,[sp,#0x14]         ;2824
0000ca  f44f7000          MOV      r0,#0x200             ;2825
0000ce  9003              STR      r0,[sp,#0xc]          ;2825
0000d0  e005              B        |L18.222|
                  |L18.210|
0000d2  9805              LDR      r0,[sp,#0x14]         ;2825
0000d4  0840              LSRS     r0,r0,#1              ;2825
0000d6  9005              STR      r0,[sp,#0x14]         ;2825
0000d8  9803              LDR      r0,[sp,#0xc]          ;2825
0000da  1040              ASRS     r0,r0,#1              ;2825
0000dc  9003              STR      r0,[sp,#0xc]          ;2825
                  |L18.222|
0000de  9803              LDR      r0,[sp,#0xc]          ;2825
0000e0  f5b07f00          CMP      r0,#0x200             ;2825
0000e4  d8f5              BHI      |L18.210|
0000e6  2000              MOVS     r0,#0                 ;2826
0000e8  9004              STR      r0,[sp,#0x10]         ;2826
0000ea  e002              B        |L18.242|
                  |L18.236|
0000ec  9804              LDR      r0,[sp,#0x10]         ;2826
0000ee  1c40              ADDS     r0,r0,#1              ;2826
0000f0  9004              STR      r0,[sp,#0x10]         ;2826
                  |L18.242|
0000f2  48cb              LDR      r0,|L18.1056|
0000f4  9904              LDR      r1,[sp,#0x10]         ;2826
0000f6  f8501021          LDR      r1,[r0,r1,LSL #2]     ;2826
0000fa  9805              LDR      r0,[sp,#0x14]         ;2826
0000fc  4281              CMP      r1,r0                 ;2826
0000fe  d8f5              BHI      |L18.236|
000100  48c8              LDR      r0,|L18.1060|
000102  9904              LDR      r1,[sp,#0x10]         ;2827
000104  f830a011          LDRH     r10,[r0,r1,LSL #1]    ;2827
                  |L18.264|
000108  f5ba7f00          CMP      r10,#0x200            ;2829
00010c  d201              BCS      |L18.274|
00010e  f44f7a00          MOV      r10,#0x200            ;2829
                  |L18.274|
000112  ea4f2a5a          LSR      r10,r10,#9            ;2831
000116  9807              LDR      r0,[sp,#0x1c]         ;2834
000118  fbb0f6fa          UDIV     r6,r0,r10             ;2834
00011c  2701              MOVS     r7,#1                 ;2835
00011e  f64070f5          MOV      r0,#0xff5             ;2836
000122  4286              CMP      r6,r0                 ;2836
000124  d300              BCC      |L18.296|
000126  2702              MOVS     r7,#2                 ;2836
                  |L18.296|
000128  f64f70f5          MOV      r0,#0xfff5            ;2837
00012c  4286              CMP      r6,r0                 ;2837
00012e  d300              BCC      |L18.306|
000130  2703              MOVS     r7,#3                 ;2837
                  |L18.306|
000132  2f01              CMP      r7,#1                 ;2840
000134  d002              BEQ      |L18.316|
000136  2f02              CMP      r7,#2                 ;2840
000138  d119              BNE      |L18.366|
00013a  e00d              B        |L18.344|
                  |L18.316|
00013c  eb060046          ADD      r0,r6,r6,LSL #1       ;2842
000140  1c40              ADDS     r0,r0,#1              ;2842
000142  2103              MOVS     r1,#3                 ;2842
000144  eb010050          ADD      r0,r1,r0,LSR #1       ;2842
000148  f20010ff          ADD      r0,r0,#0x1ff          ;2842
00014c  0a45              LSRS     r5,r0,#9              ;2842
00014e  f1090b01          ADD      r11,r9,#1             ;2843
000152  2020              MOVS     r0,#0x20              ;2844
000154  9006              STR      r0,[sp,#0x18]         ;2844
000156  e015              B        |L18.388|
                  |L18.344|
000158  2004              MOVS     r0,#4                 ;2847
00015a  eb000046          ADD      r0,r0,r6,LSL #1       ;2847
00015e  f20010ff          ADD      r0,r0,#0x1ff          ;2847
000162  0a45              LSRS     r5,r0,#9              ;2847
000164  f1090b01          ADD      r11,r9,#1             ;2848
000168  2020              MOVS     r0,#0x20              ;2849
00016a  9006              STR      r0,[sp,#0x18]         ;2849
00016c  e00a              B        |L18.388|
                  |L18.366|
00016e  2008              MOVS     r0,#8                 ;2852
000170  eb000086          ADD      r0,r0,r6,LSL #2       ;2852
000174  f20010ff          ADD      r0,r0,#0x1ff          ;2852
000178  0a45              LSRS     r5,r0,#9              ;2852
00017a  f1c90b21          RSB      r11,r9,#0x21          ;2853
00017e  2000              MOVS     r0,#0                 ;2854
000180  9006              STR      r0,[sp,#0x18]         ;2854
000182  bf00              NOP                            ;2840
                  |L18.388|
000184  bf00              NOP                            ;2845
000186  eb08000b          ADD      r0,r8,r11             ;2856
00018a  900a              STR      r0,[sp,#0x28]         ;2856
00018c  980a              LDR      r0,[sp,#0x28]         ;2857
00018e  4428              ADD      r0,r0,r5              ;2857
000190  9009              STR      r0,[sp,#0x24]         ;2857
000192  9906              LDR      r1,[sp,#0x18]         ;2858
000194  9809              LDR      r0,[sp,#0x24]         ;2858
000196  4408              ADD      r0,r0,r1              ;2858
000198  9008              STR      r0,[sp,#0x20]         ;2858
00019a  aa04              ADD      r2,sp,#0x10           ;2861
00019c  2103              MOVS     r1,#3                 ;2861
00019e  980c              LDR      r0,[sp,#0x30]         ;2861
0001a0  f7fffffe          BL       disk_ioctl
0001a4  b108              CBZ      r0,|L18.426|
0001a6  200e              MOVS     r0,#0xe               ;2861
0001a8  e733              B        |L18.18|
                  |L18.426|
0001aa  9904              LDR      r1,[sp,#0x10]         ;2862
0001ac  9808              LDR      r0,[sp,#0x20]         ;2862
0001ae  4408              ADD      r0,r0,r1              ;2862
0001b0  1e40              SUBS     r0,r0,#1              ;2862
0001b2  1e49              SUBS     r1,r1,#1              ;2862
0001b4  4388              BICS     r0,r0,r1              ;2862
0001b6  9004              STR      r0,[sp,#0x10]         ;2862
0001b8  9904              LDR      r1,[sp,#0x10]         ;2863
0001ba  9808              LDR      r0,[sp,#0x20]         ;2863
0001bc  1a08              SUBS     r0,r1,r0              ;2863
0001be  4405              ADD      r5,r5,r0              ;2863
0001c0  9807              LDR      r0,[sp,#0x1c]         ;2867
0001c2  eba0000b          SUB      r0,r0,r11             ;2867
0001c6  1b41              SUBS     r1,r0,r5              ;2867
0001c8  9806              LDR      r0,[sp,#0x18]         ;2867
0001ca  1a08              SUBS     r0,r1,r0              ;2867
0001cc  fbb0f6fa          UDIV     r6,r0,r10             ;2867
0001d0  2f02              CMP      r7,#2                 ;2868
0001d2  d103              BNE      |L18.476|
0001d4  f64070f5          MOV      r0,#0xff5             ;2868
0001d8  4286              CMP      r6,r0                 ;2868
0001da  d305              BCC      |L18.488|
                  |L18.476|
0001dc  2f03              CMP      r7,#3                 ;2869
0001de  d105              BNE      |L18.492|
0001e0  f64f70f5          MOV      r0,#0xfff5            ;2869
0001e4  4286              CMP      r6,r0                 ;2869
0001e6  d201              BCS      |L18.492|
                  |L18.488|
0001e8  200e              MOVS     r0,#0xe               ;2870
0001ea  e712              B        |L18.18|
                  |L18.492|
0001ec  f1b90f00          CMP      r9,#0                 ;2873
0001f0  d15e              BNE      |L18.688|
0001f2  9807              LDR      r0,[sp,#0x1c]         ;2874
0001f4  4440              ADD      r0,r0,r8              ;2874
0001f6  9000              STR      r0,[sp,#0]            ;2874
0001f8  f44f7200          MOV      r2,#0x200             ;2876
0001fc  2100              MOVS     r1,#0                 ;2876
0001fe  9802              LDR      r0,[sp,#8]            ;2876
000200  3030              ADDS     r0,r0,#0x30           ;2876
000202  f7fffffe          BL       mem_set
000206  9802              LDR      r0,[sp,#8]            ;2877
000208  f50074f7          ADD      r4,r0,#0x1ee          ;2877
00020c  2080              MOVS     r0,#0x80              ;2878
00020e  7020              STRB     r0,[r4,#0]            ;2878
000210  2001              MOVS     r0,#1                 ;2878
000212  7060              STRB     r0,[r4,#1]            ;2878
000214  70a0              STRB     r0,[r4,#2]            ;2878
000216  2000              MOVS     r0,#0                 ;2878
000218  70e0              STRB     r0,[r4,#3]            ;2878
00021a  4983              LDR      r1,|L18.1064|
00021c  9800              LDR      r0,[sp,#0]            ;2879
00021e  4288              CMP      r0,r1                 ;2879
000220  d20f              BCS      |L18.578|
000222  213f              MOVS     r1,#0x3f              ;2880
000224  9800              LDR      r0,[sp,#0]            ;2880
000226  fbb0f0f1          UDIV     r0,r0,r1              ;2880
00022a  21ff              MOVS     r1,#0xff              ;2880
00022c  fbb0f0f1          UDIV     r0,r0,r1              ;2880
000230  9000              STR      r0,[sp,#0]            ;2880
000232  9800              LDR      r0,[sp,#0]            ;2881
000234  71e0              STRB     r0,[r4,#7]            ;2881
000236  213f              MOVS     r1,#0x3f              ;2882
000238  9800              LDR      r0,[sp,#0]            ;2882
00023a  ea410090          ORR      r0,r1,r0,LSR #2       ;2882
00023e  71a0              STRB     r0,[r4,#6]            ;2882
000240  e003              B        |L18.586|
                  |L18.578|
000242  20ff              MOVS     r0,#0xff              ;2884
000244  71a0              STRB     r0,[r4,#6]            ;2884
000246  21ff              MOVS     r1,#0xff              ;2884
000248  71e1              STRB     r1,[r4,#7]            ;2884
                  |L18.586|
00024a  20fe              MOVS     r0,#0xfe              ;2886
00024c  7160              STRB     r0,[r4,#5]            ;2886
00024e  2f03              CMP      r7,#3                 ;2887
000250  d008              BEQ      |L18.612|
000252  9807              LDR      r0,[sp,#0x1c]         ;2888
000254  f5b03f80          CMP      r0,#0x10000           ;2888
000258  d201              BCS      |L18.606|
00025a  2004              MOVS     r0,#4                 ;2888
00025c  e000              B        |L18.608|
                  |L18.606|
00025e  2006              MOVS     r0,#6                 ;2888
                  |L18.608|
000260  7120              STRB     r0,[r4,#4]            ;2888
000262  e001              B        |L18.616|
                  |L18.612|
000264  200c              MOVS     r0,#0xc               ;2890
000266  7120              STRB     r0,[r4,#4]            ;2890
                  |L18.616|
000268  203f              MOVS     r0,#0x3f              ;2891
00026a  7220              STRB     r0,[r4,#8]            ;2891
00026c  2100              MOVS     r1,#0                 ;2891
00026e  7261              STRB     r1,[r4,#9]            ;2891
000270  72a1              STRB     r1,[r4,#0xa]          ;2891
000272  72e1              STRB     r1,[r4,#0xb]          ;2891
000274  9807              LDR      r0,[sp,#0x1c]         ;2892
000276  7320              STRB     r0,[r4,#0xc]          ;2892
000278  9807              LDR      r0,[sp,#0x1c]         ;2892
00027a  0a01              LSRS     r1,r0,#8              ;2892
00027c  7361              STRB     r1,[r4,#0xd]          ;2892
00027e  9807              LDR      r0,[sp,#0x1c]         ;2892
000280  0c01              LSRS     r1,r0,#16             ;2892
000282  73a1              STRB     r1,[r4,#0xe]          ;2892
000284  9807              LDR      r0,[sp,#0x1c]         ;2892
000286  0e01              LSRS     r1,r0,#24             ;2892
000288  73e1              STRB     r1,[r4,#0xf]          ;2892
00028a  2055              MOVS     r0,#0x55              ;2893
00028c  f8840040          STRB     r0,[r4,#0x40]         ;2893
000290  21aa              MOVS     r1,#0xaa              ;2893
000292  2041              MOVS     r0,#0x41              ;2893
000294  5501              STRB     r1,[r0,r4]            ;2893
000296  2301              MOVS     r3,#1                 ;2894
000298  2200              MOVS     r2,#0                 ;2894
00029a  9902              LDR      r1,[sp,#8]            ;2894
00029c  3130              ADDS     r1,r1,#0x30           ;2894
00029e  980c              LDR      r0,[sp,#0x30]         ;2894
0002a0  f7fffffe          BL       disk_write
0002a4  b108              CBZ      r0,|L18.682|
0002a6  2001              MOVS     r0,#1                 ;2895
0002a8  e6b3              B        |L18.18|
                  |L18.682|
0002aa  f04f09f8          MOV      r9,#0xf8              ;2896
0002ae  e001              B        |L18.692|
                  |L18.688|
0002b0  f04f09f0          MOV      r9,#0xf0              ;2898
                  |L18.692|
0002b4  9802              LDR      r0,[sp,#8]            ;2902
0002b6  f1000430          ADD      r4,r0,#0x30           ;2902
0002ba  f44f7200          MOV      r2,#0x200             ;2903
0002be  2100              MOVS     r1,#0                 ;2903
0002c0  4620              MOV      r0,r4                 ;2903
0002c2  f7fffffe          BL       mem_set
0002c6  20eb              MOVS     r0,#0xeb              ;2904
0002c8  7020              STRB     r0,[r4,#0]            ;2904
0002ca  20fe              MOVS     r0,#0xfe              ;2904
0002cc  7060              STRB     r0,[r4,#1]            ;2904
0002ce  2090              MOVS     r0,#0x90              ;2904
0002d0  70a0              STRB     r0,[r4,#2]            ;2904
0002d2  2000              MOVS     r0,#0                 ;2904
0002d4  70e0              STRB     r0,[r4,#3]            ;2904
0002d6  72e0              STRB     r0,[r4,#0xb]          ;2905
0002d8  2102              MOVS     r1,#2                 ;2905
0002da  7321              STRB     r1,[r4,#0xc]          ;2905
0002dc  f884a00d          STRB     r10,[r4,#0xd]         ;2906
0002e0  f884b00e          STRB     r11,[r4,#0xe]         ;2907
0002e4  ea4f211b          LSR      r1,r11,#8             ;2907
0002e8  73e1              STRB     r1,[r4,#0xf]          ;2907
0002ea  2001              MOVS     r0,#1                 ;2908
0002ec  7420              STRB     r0,[r4,#0x10]         ;2908
0002ee  9806              LDR      r0,[sp,#0x18]         ;2909
0002f0  0700              LSLS     r0,r0,#28             ;2909
0002f2  0e00              LSRS     r0,r0,#24             ;2909
0002f4  7460              STRB     r0,[r4,#0x11]         ;2909
0002f6  9806              LDR      r0,[sp,#0x18]         ;2909
0002f8  f3c01117          UBFX     r1,r0,#4,#24          ;2909
0002fc  74a1              STRB     r1,[r4,#0x12]         ;2909
0002fe  9807              LDR      r0,[sp,#0x1c]         ;2910
000300  f5b03f80          CMP      r0,#0x10000           ;2910
000304  d205              BCS      |L18.786|
000306  9807              LDR      r0,[sp,#0x1c]         ;2911
000308  74e0              STRB     r0,[r4,#0x13]         ;2911
00030a  9807              LDR      r0,[sp,#0x1c]         ;2911
00030c  0a01              LSRS     r1,r0,#8              ;2911
00030e  7521              STRB     r1,[r4,#0x14]         ;2911
000310  e010              B        |L18.820|
                  |L18.786|
000312  9807              LDR      r0,[sp,#0x1c]         ;2913
000314  f8840020          STRB     r0,[r4,#0x20]         ;2913
000318  9807              LDR      r0,[sp,#0x1c]         ;2913
00031a  f3c02107          UBFX     r1,r0,#8,#8           ;2913
00031e  2021              MOVS     r0,#0x21              ;2913
000320  5501              STRB     r1,[r0,r4]            ;2913
000322  9807              LDR      r0,[sp,#0x1c]         ;2913
000324  f3c04107          UBFX     r1,r0,#16,#8          ;2913
000328  2022              MOVS     r0,#0x22              ;2913
00032a  5501              STRB     r1,[r0,r4]            ;2913
00032c  9807              LDR      r0,[sp,#0x1c]         ;2913
00032e  0e01              LSRS     r1,r0,#24             ;2913
000330  2023              MOVS     r0,#0x23              ;2913
000332  5501              STRB     r1,[r0,r4]            ;2913
                  |L18.820|
000334  f8849015          STRB     r9,[r4,#0x15]         ;2915
000338  203f              MOVS     r0,#0x3f              ;2916
00033a  7620              STRB     r0,[r4,#0x18]         ;2916
00033c  2100              MOVS     r1,#0                 ;2916
00033e  7661              STRB     r1,[r4,#0x19]         ;2916
000340  20ff              MOVS     r0,#0xff              ;2917
000342  76a0              STRB     r0,[r4,#0x1a]         ;2917
000344  76e1              STRB     r1,[r4,#0x1b]         ;2917
000346  f884801c          STRB     r8,[r4,#0x1c]         ;2918
00034a  ea4f2118          LSR      r1,r8,#8              ;2918
00034e  7761              STRB     r1,[r4,#0x1d]         ;2918
000350  ea4f4118          LSR      r1,r8,#16             ;2918
000354  77a1              STRB     r1,[r4,#0x1e]         ;2918
000356  ea4f6118          LSR      r1,r8,#24             ;2918
00035a  77e1              STRB     r1,[r4,#0x1f]         ;2918
00035c  f7fffffe          BL       get_fattime
000360  9004              STR      r0,[sp,#0x10]         ;2919
000362  2f03              CMP      r7,#3                 ;2920
000364  d020              BEQ      |L18.936|
000366  9804              LDR      r0,[sp,#0x10]         ;2921
000368  f8840027          STRB     r0,[r4,#0x27]         ;2921
00036c  9804              LDR      r0,[sp,#0x10]         ;2921
00036e  f3c02107          UBFX     r1,r0,#8,#8           ;2921
000372  2028              MOVS     r0,#0x28              ;2921
000374  5501              STRB     r1,[r0,r4]            ;2921
000376  9804              LDR      r0,[sp,#0x10]         ;2921
000378  f3c04107          UBFX     r1,r0,#16,#8          ;2921
00037c  2029              MOVS     r0,#0x29              ;2921
00037e  5501              STRB     r1,[r0,r4]            ;2921
000380  9804              LDR      r0,[sp,#0x10]         ;2921
000382  0e01              LSRS     r1,r0,#24             ;2921
000384  202a              MOVS     r0,#0x2a              ;2921
000386  5501              STRB     r1,[r0,r4]            ;2921
000388  75a5              STRB     r5,[r4,#0x16]         ;2922
00038a  0a29              LSRS     r1,r5,#8              ;2922
00038c  75e1              STRB     r1,[r4,#0x17]         ;2922
00038e  2080              MOVS     r0,#0x80              ;2923
000390  f8840024          STRB     r0,[r4,#0x24]         ;2923
000394  2029              MOVS     r0,#0x29              ;2924
000396  f8840026          STRB     r0,[r4,#0x26]         ;2924
00039a  2213              MOVS     r2,#0x13              ;2925
00039c  a123              ADR      r1,|L18.1068|
00039e  f104002b          ADD      r0,r4,#0x2b           ;2925
0003a2  f7fffffe          BL       mem_cpy
0003a6  e050              B        |L18.1098|
                  |L18.936|
0003a8  9804              LDR      r0,[sp,#0x10]         ;2927
0003aa  f8840043          STRB     r0,[r4,#0x43]         ;2927
0003ae  9804              LDR      r0,[sp,#0x10]         ;2927
0003b0  f3c02107          UBFX     r1,r0,#8,#8           ;2927
0003b4  2044              MOVS     r0,#0x44              ;2927
0003b6  5501              STRB     r1,[r0,r4]            ;2927
0003b8  9804              LDR      r0,[sp,#0x10]         ;2927
0003ba  f3c04107          UBFX     r1,r0,#16,#8          ;2927
0003be  2045              MOVS     r0,#0x45              ;2927
0003c0  5501              STRB     r1,[r0,r4]            ;2927
0003c2  9804              LDR      r0,[sp,#0x10]         ;2927
0003c4  0e01              LSRS     r1,r0,#24             ;2927
0003c6  2046              MOVS     r0,#0x46              ;2927
0003c8  5501              STRB     r1,[r0,r4]            ;2927
0003ca  f8845024          STRB     r5,[r4,#0x24]         ;2928
0003ce  f3c52107          UBFX     r1,r5,#8,#8           ;2928
0003d2  2025              MOVS     r0,#0x25              ;2928
0003d4  5501              STRB     r1,[r0,r4]            ;2928
0003d6  f3c54107          UBFX     r1,r5,#16,#8          ;2928
0003da  2026              MOVS     r0,#0x26              ;2928
0003dc  5501              STRB     r1,[r0,r4]            ;2928
0003de  0e29              LSRS     r1,r5,#24             ;2928
0003e0  2027              MOVS     r0,#0x27              ;2928
0003e2  5501              STRB     r1,[r0,r4]            ;2928
0003e4  2002              MOVS     r0,#2                 ;2929
0003e6  f884002c          STRB     r0,[r4,#0x2c]         ;2929
0003ea  2100              MOVS     r1,#0                 ;2929
0003ec  202d              MOVS     r0,#0x2d              ;2929
0003ee  5501              STRB     r1,[r0,r4]            ;2929
0003f0  202e              MOVS     r0,#0x2e              ;2929
0003f2  5501              STRB     r1,[r0,r4]            ;2929
0003f4  202f              MOVS     r0,#0x2f              ;2929
0003f6  5501              STRB     r1,[r0,r4]            ;2929
0003f8  2001              MOVS     r0,#1                 ;2930
0003fa  f8840030          STRB     r0,[r4,#0x30]         ;2930
0003fe  2031              MOVS     r0,#0x31              ;2930
000400  5501              STRB     r1,[r0,r4]            ;2930
000402  2006              MOVS     r0,#6                 ;2931
000404  f8840032          STRB     r0,[r4,#0x32]         ;2931
000408  2033              MOVS     r0,#0x33              ;2931
00040a  5501              STRB     r1,[r0,r4]            ;2931
00040c  2080              MOVS     r0,#0x80              ;2932
00040e  f8840040          STRB     r0,[r4,#0x40]         ;2932
000412  2029              MOVS     r0,#0x29              ;2933
000414  f8840042          STRB     r0,[r4,#0x42]         ;2933
000418  2213              MOVS     r2,#0x13              ;2934
00041a  e011              B        |L18.1088|
                  |L18.1052|
                          DCD      FatFs
                  |L18.1056|
                          DCD      sstbl
                  |L18.1060|
                          DCD      cstbl
                  |L18.1064|
                          DCD      0x00fb0400
                  |L18.1068|
00042c  4e4f204e          DCB      "NO NAME    FAT     ",0
000430  414d4520
000434  20202046
000438  41542020
00043c  20202000
                  |L18.1088|
000440  a175              ADR      r1,|L18.1560|
000442  f1040047          ADD      r0,r4,#0x47           ;2934
000446  f7fffffe          BL       mem_cpy
                  |L18.1098|
00044a  2055              MOVS     r0,#0x55              ;2936
00044c  f88401fe          STRB     r0,[r4,#0x1fe]        ;2936
000450  21aa              MOVS     r1,#0xaa              ;2936
000452  f24010ff          MOV      r0,#0x1ff             ;2936
000456  5501              STRB     r1,[r0,r4]            ;2936
000458  2301              MOVS     r3,#1                 ;2940
00045a  4642              MOV      r2,r8                 ;2940
00045c  4621              MOV      r1,r4                 ;2940
00045e  980c              LDR      r0,[sp,#0x30]         ;2940
000460  f7fffffe          BL       disk_write
000464  b108              CBZ      r0,|L18.1130|
000466  2001              MOVS     r0,#1                 ;2941
000468  e5d3              B        |L18.18|
                  |L18.1130|
00046a  2f03              CMP      r7,#3                 ;2942
00046c  d106              BNE      |L18.1148|
00046e  2301              MOVS     r3,#1                 ;2943
000470  f1080206          ADD      r2,r8,#6              ;2943
000474  4621              MOV      r1,r4                 ;2943
000476  980c              LDR      r0,[sp,#0x30]         ;2943
000478  f7fffffe          BL       disk_write
                  |L18.1148|
00047c  2000              MOVS     r0,#0                 ;2946
00047e  900b              STR      r0,[sp,#0x2c]         ;2946
000480  e059              B        |L18.1334|
                  |L18.1154|
000482  f44f7200          MOV      r2,#0x200             ;2947
000486  2100              MOVS     r1,#0                 ;2947
000488  4620              MOV      r0,r4                 ;2947
00048a  f7fffffe          BL       mem_set
00048e  2f03              CMP      r7,#3                 ;2948
000490  d016              BEQ      |L18.1216|
000492  2f01              CMP      r7,#1                 ;2949
000494  d101              BNE      |L18.1178|
000496  4865              LDR      r0,|L18.1580|
000498  e001              B        |L18.1182|
                  |L18.1178|
00049a  f06f00ff          MVN      r0,#0xff              ;2949
                  |L18.1182|
00049e  9004              STR      r0,[sp,#0x10]         ;2949
0004a0  9804              LDR      r0,[sp,#0x10]         ;2950
0004a2  ea400009          ORR      r0,r0,r9              ;2950
0004a6  9004              STR      r0,[sp,#0x10]         ;2950
0004a8  9804              LDR      r0,[sp,#0x10]         ;2951
0004aa  7020              STRB     r0,[r4,#0]            ;2951
0004ac  9804              LDR      r0,[sp,#0x10]         ;2951
0004ae  0a00              LSRS     r0,r0,#8              ;2951
0004b0  7060              STRB     r0,[r4,#1]            ;2951
0004b2  9804              LDR      r0,[sp,#0x10]         ;2951
0004b4  0c00              LSRS     r0,r0,#16             ;2951
0004b6  70a0              STRB     r0,[r4,#2]            ;2951
0004b8  9804              LDR      r0,[sp,#0x10]         ;2951
0004ba  0e00              LSRS     r0,r0,#24             ;2951
0004bc  70e0              STRB     r0,[r4,#3]            ;2951
0004be  e00f              B        |L18.1248|
                  |L18.1216|
0004c0  20f8              MOVS     r0,#0xf8              ;2953
0004c2  7020              STRB     r0,[r4,#0]            ;2953
0004c4  20ff              MOVS     r0,#0xff              ;2953
0004c6  7060              STRB     r0,[r4,#1]            ;2953
0004c8  70a0              STRB     r0,[r4,#2]            ;2953
0004ca  70e0              STRB     r0,[r4,#3]            ;2953
0004cc  7120              STRB     r0,[r4,#4]            ;2954
0004ce  21ff              MOVS     r1,#0xff              ;2954
0004d0  7161              STRB     r1,[r4,#5]            ;2954
0004d2  71a1              STRB     r1,[r4,#6]            ;2954
0004d4  71e1              STRB     r1,[r4,#7]            ;2954
0004d6  7220              STRB     r0,[r4,#8]            ;2955
0004d8  7261              STRB     r1,[r4,#9]            ;2955
0004da  72a1              STRB     r1,[r4,#0xa]          ;2955
0004dc  210f              MOVS     r1,#0xf               ;2955
0004de  72e1              STRB     r1,[r4,#0xb]          ;2955
                  |L18.1248|
0004e0  980a              LDR      r0,[sp,#0x28]         ;2957
0004e2  1c41              ADDS     r1,r0,#1              ;2957
0004e4  4602              MOV      r2,r0                 ;2957
0004e6  2301              MOVS     r3,#1                 ;2957
0004e8  910a              STR      r1,[sp,#0x28]         ;2957
0004ea  4621              MOV      r1,r4                 ;2957
0004ec  980c              LDR      r0,[sp,#0x30]         ;2957
0004ee  f7fffffe          BL       disk_write
0004f2  b108              CBZ      r0,|L18.1272|
0004f4  2001              MOVS     r0,#1                 ;2958
0004f6  e58c              B        |L18.18|
                  |L18.1272|
0004f8  f44f7200          MOV      r2,#0x200             ;2959
0004fc  2100              MOVS     r1,#0                 ;2959
0004fe  4620              MOV      r0,r4                 ;2959
000500  f7fffffe          BL       mem_set
000504  2001              MOVS     r0,#1                 ;2960
000506  9004              STR      r0,[sp,#0x10]         ;2960
000508  e00e              B        |L18.1320|
                  |L18.1290|
00050a  980a              LDR      r0,[sp,#0x28]         ;2961
00050c  1c41              ADDS     r1,r0,#1              ;2961
00050e  4602              MOV      r2,r0                 ;2961
000510  2301              MOVS     r3,#1                 ;2961
000512  910a              STR      r1,[sp,#0x28]         ;2961
000514  4621              MOV      r1,r4                 ;2961
000516  980c              LDR      r0,[sp,#0x30]         ;2961
000518  f7fffffe          BL       disk_write
00051c  b108              CBZ      r0,|L18.1314|
00051e  2001              MOVS     r0,#1                 ;2962
000520  e577              B        |L18.18|
                  |L18.1314|
000522  9804              LDR      r0,[sp,#0x10]         ;2960
000524  1c40              ADDS     r0,r0,#1              ;2960
000526  9004              STR      r0,[sp,#0x10]         ;2960
                  |L18.1320|
000528  9804              LDR      r0,[sp,#0x10]         ;2960
00052a  42a8              CMP      r0,r5                 ;2960
00052c  d3ed              BCC      |L18.1290|
00052e  980b              LDR      r0,[sp,#0x2c]         ;2946
000530  1c40              ADDS     r0,r0,#1              ;2946
000532  b2c0              UXTB     r0,r0                 ;2946
000534  900b              STR      r0,[sp,#0x2c]         ;2946
                  |L18.1334|
000536  980b              LDR      r0,[sp,#0x2c]         ;2946
000538  2801              CMP      r0,#1                 ;2946
00053a  dba2              BLT      |L18.1154|
00053c  2f03              CMP      r7,#3                 ;2967
00053e  d101              BNE      |L18.1348|
000540  4650              MOV      r0,r10                ;2967
000542  e000              B        |L18.1350|
                  |L18.1348|
000544  9806              LDR      r0,[sp,#0x18]         ;2967
                  |L18.1350|
000546  b2c0              UXTB     r0,r0                 ;2967
000548  900b              STR      r0,[sp,#0x2c]         ;2967
00054a  bf00              NOP                            ;2968
                  |L18.1356|
00054c  980a              LDR      r0,[sp,#0x28]         ;2969
00054e  1c41              ADDS     r1,r0,#1              ;2969
000550  4602              MOV      r2,r0                 ;2969
000552  2301              MOVS     r3,#1                 ;2969
000554  910a              STR      r1,[sp,#0x28]         ;2969
000556  4621              MOV      r1,r4                 ;2969
000558  980c              LDR      r0,[sp,#0x30]         ;2969
00055a  f7fffffe          BL       disk_write
00055e  b108              CBZ      r0,|L18.1380|
000560  2001              MOVS     r0,#1                 ;2970
000562  e556              B        |L18.18|
                  |L18.1380|
000564  980b              LDR      r0,[sp,#0x2c]         ;2971
000566  1e40              SUBS     r0,r0,#1              ;2971
000568  b2c0              UXTB     r0,r0                 ;2971
00056a  900b              STR      r0,[sp,#0x2c]         ;2971
00056c  2800              CMP      r0,#0                 ;2971
00056e  d1ed              BNE      |L18.1356|
000570  2f03              CMP      r7,#3                 ;2974
000572  d146              BNE      |L18.1538|
000574  2055              MOVS     r0,#0x55              ;2975
000576  f88401fe          STRB     r0,[r4,#0x1fe]        ;2975
00057a  21aa              MOVS     r1,#0xaa              ;2975
00057c  f24010ff          MOV      r0,#0x1ff             ;2975
000580  5501              STRB     r1,[r0,r4]            ;2975
000582  2052              MOVS     r0,#0x52              ;2976
000584  7020              STRB     r0,[r4,#0]            ;2976
000586  7060              STRB     r0,[r4,#1]            ;2976
000588  2061              MOVS     r0,#0x61              ;2976
00058a  70a0              STRB     r0,[r4,#2]            ;2976
00058c  2041              MOVS     r0,#0x41              ;2976
00058e  70e0              STRB     r0,[r4,#3]            ;2976
000590  2072              MOVS     r0,#0x72              ;2977
000592  f88401e4          STRB     r0,[r4,#0x1e4]        ;2977
000596  2172              MOVS     r1,#0x72              ;2977
000598  f24010e5          MOV      r0,#0x1e5             ;2977
00059c  5501              STRB     r1,[r0,r4]            ;2977
00059e  2141              MOVS     r1,#0x41              ;2977
0005a0  1c40              ADDS     r0,r0,#1              ;2977
0005a2  5501              STRB     r1,[r0,r4]            ;2977
0005a4  2161              MOVS     r1,#0x61              ;2977
0005a6  1c40              ADDS     r0,r0,#1              ;2977
0005a8  5501              STRB     r1,[r0,r4]            ;2977
0005aa  1e70              SUBS     r0,r6,#1              ;2978
0005ac  f88401e8          STRB     r0,[r4,#0x1e8]        ;2978
0005b0  f3c02107          UBFX     r1,r0,#8,#8           ;2978
0005b4  f24010e9          MOV      r0,#0x1e9             ;2978
0005b8  5501              STRB     r1,[r0,r4]            ;2978
0005ba  1e70              SUBS     r0,r6,#1              ;2978
0005bc  f3c04107          UBFX     r1,r0,#16,#8          ;2978
0005c0  f44f70f5          MOV      r0,#0x1ea             ;2978
0005c4  5501              STRB     r1,[r0,r4]            ;2978
0005c6  1e70              SUBS     r0,r6,#1              ;2978
0005c8  0e01              LSRS     r1,r0,#24             ;2978
0005ca  f24010eb          MOV      r0,#0x1eb             ;2978
0005ce  5501              STRB     r1,[r0,r4]            ;2978
0005d0  20ff              MOVS     r0,#0xff              ;2979
0005d2  f88401ec          STRB     r0,[r4,#0x1ec]        ;2979
0005d6  21ff              MOVS     r1,#0xff              ;2979
0005d8  f24010ed          MOV      r0,#0x1ed             ;2979
0005dc  5501              STRB     r1,[r0,r4]            ;2979
0005de  1c40              ADDS     r0,r0,#1              ;2979
0005e0  5501              STRB     r1,[r0,r4]            ;2979
0005e2  1c40              ADDS     r0,r0,#1              ;2979
0005e4  5501              STRB     r1,[r0,r4]            ;2979
0005e6  2301              MOVS     r3,#1                 ;2980
0005e8  f1080201          ADD      r2,r8,#1              ;2980
0005ec  4621              MOV      r1,r4                 ;2980
0005ee  980c              LDR      r0,[sp,#0x30]         ;2980
0005f0  f7fffffe          BL       disk_write
0005f4  2301              MOVS     r3,#1                 ;2981
0005f6  f1080207          ADD      r2,r8,#7              ;2981
0005fa  4621              MOV      r1,r4                 ;2981
0005fc  980c              LDR      r0,[sp,#0x30]         ;2981
0005fe  f7fffffe          BL       disk_write
                  |L18.1538|
000602  2200              MOVS     r2,#0                 ;2984
000604  4611              MOV      r1,r2                 ;2984
000606  980c              LDR      r0,[sp,#0x30]         ;2984
000608  f7fffffe          BL       disk_ioctl
00060c  b108              CBZ      r0,|L18.1554|
00060e  2001              MOVS     r0,#1                 ;2984
000610  e4ff              B        |L18.18|
                  |L18.1554|
000612  2000              MOVS     r0,#0                 ;2984
000614  e4fd              B        |L18.18|
;;;2986   
                          ENDP

000616  0000              DCW      0x0000
                  |L18.1560|
000618  4e4f204e          DCB      "NO NAME    FAT32   ",0
00061c  414d4520
000620  20202046
000624  41543332
000628  20202000
                  |L18.1580|
                          DCD      0x00ffff00

                          AREA ||i.f_mount||, CODE, READONLY, ALIGN=2

                  f_mount PROC
;;;1627   
;;;1628   FRESULT f_mount (
000000  4602              MOV      r2,r0
;;;1629   	BYTE vol,		/* Logical drive number to be mounted/unmounted */
;;;1630   	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
;;;1631   )
;;;1632   {
;;;1633   	FATFS *rfs;
;;;1634   
;;;1635   
;;;1636   	if (vol >= _DRIVES)				/* Check if the drive number is valid */
000002  2a01              CMP      r2,#1
000004  db01              BLT      |L19.10|
;;;1637   		return FR_INVALID_DRIVE;
000006  200b              MOVS     r0,#0xb
                  |L19.8|
;;;1638   	rfs = FatFs[vol];				/* Get current fs object */
;;;1639   
;;;1640   	if (rfs) {
;;;1641   #if _FS_REENTRANT					/* Discard sync object of the current volume */
;;;1642   		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
;;;1643   #endif
;;;1644   		rfs->fs_type = 0;			/* Clear old fs object */
;;;1645   	}
;;;1646   
;;;1647   	if (fs) {
;;;1648   		fs->fs_type = 0;			/* Clear new fs object */
;;;1649   #if _FS_REENTRANT					/* Create sync object for the new volume */
;;;1650   		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
;;;1651   #endif
;;;1652   	}
;;;1653   	FatFs[vol] = fs;				/* Register new fs object */
;;;1654   
;;;1655   	return FR_OK;
;;;1656   }
000008  4770              BX       lr
                  |L19.10|
00000a  4807              LDR      r0,|L19.40|
00000c  f8503022          LDR      r3,[r0,r2,LSL #2]     ;1638
000010  b10b              CBZ      r3,|L19.22|
000012  2000              MOVS     r0,#0                 ;1644
000014  7018              STRB     r0,[r3,#0]            ;1644
                  |L19.22|
000016  b109              CBZ      r1,|L19.28|
000018  2000              MOVS     r0,#0                 ;1648
00001a  7008              STRB     r0,[r1,#0]            ;1648
                  |L19.28|
00001c  4802              LDR      r0,|L19.40|
00001e  f8401022          STR      r1,[r0,r2,LSL #2]     ;1653
000022  2000              MOVS     r0,#0                 ;1655
000024  e7f0              B        |L19.8|
;;;1657   
                          ENDP

000026  0000              DCW      0x0000
                  |L19.40|
                          DCD      FatFs

                          AREA ||i.f_open||, CODE, READONLY, ALIGN=1

                  f_open PROC
;;;1664   
;;;1665   FRESULT f_open (
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;1666   	FIL *fp,			/* Pointer to the blank file object */
;;;1667   	const XCHAR *path,	/* Pointer to the file name */
;;;1668   	BYTE mode			/* Access mode and file open mode flags */
;;;1669   )
;;;1670   {
000004  b08a              SUB      sp,sp,#0x28
000006  4605              MOV      r5,r0
000008  4616              MOV      r6,r2
;;;1671   	FRESULT res;
;;;1672   	DIR dj;
;;;1673   	NAMEBUF(sfn, lfn);
;;;1674   	BYTE *dir;
;;;1675   
;;;1676   
;;;1677   	fp->fs = NULL;		/* Clear file object */
00000a  2000              MOVS     r0,#0
00000c  6028              STR      r0,[r5,#0]
;;;1678   #if !_FS_READONLY
;;;1679   	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
00000e  f006061f          AND      r6,r6,#0x1f
;;;1680   	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
000012  f006021e          AND      r2,r6,#0x1e
000016  a903              ADD      r1,sp,#0xc
000018  a80b              ADD      r0,sp,#0x2c
00001a  f7fffffe          BL       chk_mounted
00001e  4607              MOV      r7,r0
;;;1681   #else
;;;1682   	mode &= FA_READ;
;;;1683   	res = chk_mounted(&path, &dj.fs, 0);
;;;1684   #endif
;;;1685   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
000020  b11f              CBZ      r7,|L20.42|
000022  4638              MOV      r0,r7
                  |L20.36|
;;;1686   	INITBUF(dj, sfn, lfn);
;;;1687   	res = follow_path(&dj, path);	/* Follow the file path */
;;;1688   
;;;1689   #if !_FS_READONLY
;;;1690   	/* Create or Open a file */
;;;1691   	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
;;;1692   		DWORD ps, cl;
;;;1693   
;;;1694   		if (res != FR_OK) {			/* No file, create new */
;;;1695   			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
;;;1696   				res = dir_register(&dj);
;;;1697   			if (res != FR_OK) LEAVE_FF(dj.fs, res);
;;;1698   			mode |= FA_CREATE_ALWAYS;
;;;1699   			dir = dj.dir;			/* Created entry (SFN entry) */
;;;1700   		}
;;;1701   		else {						/* Any object is already existing */
;;;1702   			if (mode & FA_CREATE_NEW)			/* Cannot create new */
;;;1703   				LEAVE_FF(dj.fs, FR_EXIST);
;;;1704   			dir = dj.dir;
;;;1705   			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
;;;1706   				LEAVE_FF(dj.fs, FR_DENIED);
;;;1707   			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
;;;1708   				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
;;;1709   				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
;;;1710   				ST_WORD(dir+DIR_FstClusLO, 0);
;;;1711   				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
;;;1712   				dj.fs->wflag = 1;
;;;1713   				ps = dj.fs->winsect;			/* Remove the cluster chain */
;;;1714   				if (cl) {
;;;1715   					res = remove_chain(dj.fs, cl);
;;;1716   					if (res) LEAVE_FF(dj.fs, res);
;;;1717   					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;1718   				}
;;;1719   				res = move_window(dj.fs, ps);
;;;1720   				if (res != FR_OK) LEAVE_FF(dj.fs, res);
;;;1721   			}
;;;1722   		}
;;;1723   		if (mode & FA_CREATE_ALWAYS) {
;;;1724   			dir[DIR_Attr] = 0;					/* Reset attribute */
;;;1725   			ps = get_fattime();
;;;1726   			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
;;;1727   			dj.fs->wflag = 1;
;;;1728   			mode |= FA__WRITTEN;				/* Set file changed flag */
;;;1729   		}
;;;1730   	}
;;;1731   	/* Open an existing file */
;;;1732   	else {
;;;1733   #endif /* !_FS_READONLY */
;;;1734   		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
;;;1735   		dir = dj.dir;
;;;1736   		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
;;;1737   			LEAVE_FF(dj.fs, FR_NO_FILE);
;;;1738   #if !_FS_READONLY
;;;1739   		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;1740   			LEAVE_FF(dj.fs, FR_DENIED);
;;;1741   	}
;;;1742   	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
;;;1743   	fp->dir_ptr = dj.dir;
;;;1744   #endif
;;;1745   	fp->flag = mode;					/* File access mode */
;;;1746   	fp->org_clust =						/* File start cluster */
;;;1747   		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
;;;1748   	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
;;;1749   	fp->fptr = 0; fp->csect = 255;		/* File pointer */
;;;1750   	fp->dsect = 0;
;;;1751   	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
;;;1752   
;;;1753   	LEAVE_FF(dj.fs, FR_OK);
;;;1754   }
000024  b00d              ADD      sp,sp,#0x34
000026  e8bd83f0          POP      {r4-r9,pc}
                  |L20.42|
00002a  f8cdd024          STR      sp,[sp,#0x24]         ;1686
00002e  a803              ADD      r0,sp,#0xc            ;1687
000030  990b              LDR      r1,[sp,#0x2c]         ;1687
000032  f7fffffe          BL       follow_path
000036  4607              MOV      r7,r0                 ;1687
000038  f006001c          AND      r0,r6,#0x1c           ;1691
00003c  2800              CMP      r0,#0                 ;1691
00003e  d068              BEQ      |L20.274|
000040  b167              CBZ      r7,|L20.92|
000042  2f04              CMP      r7,#4                 ;1695
000044  d103              BNE      |L20.78|
000046  a803              ADD      r0,sp,#0xc            ;1696
000048  f7fffffe          BL       dir_register
00004c  4607              MOV      r7,r0                 ;1696
                  |L20.78|
00004e  b10f              CBZ      r7,|L20.84|
000050  4638              MOV      r0,r7                 ;1697
000052  e7e7              B        |L20.36|
                  |L20.84|
000054  f0460608          ORR      r6,r6,#8              ;1698
000058  9c08              LDR      r4,[sp,#0x20]         ;1699
00005a  e041              B        |L20.224|
                  |L20.92|
00005c  f0060004          AND      r0,r6,#4              ;1702
000060  b108              CBZ      r0,|L20.102|
000062  2008              MOVS     r0,#8                 ;1703
000064  e7de              B        |L20.36|
                  |L20.102|
000066  9c08              LDR      r4,[sp,#0x20]         ;1704
000068  b11c              CBZ      r4,|L20.114|
00006a  7ae0              LDRB     r0,[r4,#0xb]          ;1705
00006c  f0000011          AND      r0,r0,#0x11           ;1705
000070  b108              CBZ      r0,|L20.118|
                  |L20.114|
000072  2007              MOVS     r0,#7                 ;1706
000074  e7d6              B        |L20.36|
                  |L20.118|
000076  f0060008          AND      r0,r6,#8              ;1707
00007a  b380              CBZ      r0,|L20.222|
00007c  7ea1              LDRB     r1,[r4,#0x1a]         ;1708
00007e  7ee0              LDRB     r0,[r4,#0x1b]         ;1708
000080  ea412100          ORR      r1,r1,r0,LSL #8       ;1708
000084  7d22              LDRB     r2,[r4,#0x14]         ;1708
000086  7d60              LDRB     r0,[r4,#0x15]         ;1708
000088  ea422000          ORR      r0,r2,r0,LSL #8       ;1708
00008c  ea414900          ORR      r9,r1,r0,LSL #16      ;1708
000090  2000              MOVS     r0,#0                 ;1709
000092  7520              STRB     r0,[r4,#0x14]         ;1709
000094  2100              MOVS     r1,#0                 ;1709
000096  7561              STRB     r1,[r4,#0x15]         ;1709
000098  76a0              STRB     r0,[r4,#0x1a]         ;1710
00009a  76e1              STRB     r1,[r4,#0x1b]         ;1710
00009c  7720              STRB     r0,[r4,#0x1c]         ;1711
00009e  7761              STRB     r1,[r4,#0x1d]         ;1711
0000a0  77a1              STRB     r1,[r4,#0x1e]         ;1711
0000a2  77e1              STRB     r1,[r4,#0x1f]         ;1711
0000a4  2001              MOVS     r0,#1                 ;1712
0000a6  9903              LDR      r1,[sp,#0xc]          ;1712
0000a8  7108              STRB     r0,[r1,#4]            ;1712
0000aa  9803              LDR      r0,[sp,#0xc]          ;1713
0000ac  f8d0802c          LDR      r8,[r0,#0x2c]         ;1713
0000b0  f1b90f00          CMP      r9,#0                 ;1714
0000b4  d00b              BEQ      |L20.206|
0000b6  4649              MOV      r1,r9                 ;1715
0000b8  9803              LDR      r0,[sp,#0xc]          ;1715
0000ba  f7fffffe          BL       remove_chain
0000be  4607              MOV      r7,r0                 ;1715
0000c0  b10f              CBZ      r7,|L20.198|
0000c2  4638              MOV      r0,r7                 ;1716
0000c4  e7ae              B        |L20.36|
                  |L20.198|
0000c6  f1a90001          SUB      r0,r9,#1              ;1717
0000ca  9903              LDR      r1,[sp,#0xc]          ;1717
0000cc  60c8              STR      r0,[r1,#0xc]          ;1717
                  |L20.206|
0000ce  4641              MOV      r1,r8                 ;1719
0000d0  9803              LDR      r0,[sp,#0xc]          ;1719
0000d2  f7fffffe          BL       move_window
0000d6  4607              MOV      r7,r0                 ;1719
0000d8  b10f              CBZ      r7,|L20.222|
0000da  4638              MOV      r0,r7                 ;1720
0000dc  e7a2              B        |L20.36|
                  |L20.222|
0000de  e7ff              B        |L20.224|
                  |L20.224|
0000e0  f0060008          AND      r0,r6,#8              ;1723
0000e4  b1a0              CBZ      r0,|L20.272|
0000e6  2000              MOVS     r0,#0                 ;1724
0000e8  72e0              STRB     r0,[r4,#0xb]          ;1724
0000ea  f7fffffe          BL       get_fattime
0000ee  4680              MOV      r8,r0                 ;1725
0000f0  f884800e          STRB     r8,[r4,#0xe]          ;1726
0000f4  ea4f2118          LSR      r1,r8,#8              ;1726
0000f8  73e1              STRB     r1,[r4,#0xf]          ;1726
0000fa  ea4f4118          LSR      r1,r8,#16             ;1726
0000fe  7421              STRB     r1,[r4,#0x10]         ;1726
000100  ea4f6118          LSR      r1,r8,#24             ;1726
000104  7461              STRB     r1,[r4,#0x11]         ;1726
000106  2001              MOVS     r0,#1                 ;1727
000108  9903              LDR      r1,[sp,#0xc]          ;1727
00010a  7108              STRB     r0,[r1,#4]            ;1727
00010c  f0460620          ORR      r6,r6,#0x20           ;1728
                  |L20.272|
000110  e013              B        |L20.314|
                  |L20.274|
000112  b10f              CBZ      r7,|L20.280|
000114  4638              MOV      r0,r7                 ;1734
000116  e785              B        |L20.36|
                  |L20.280|
000118  9c08              LDR      r4,[sp,#0x20]         ;1735
00011a  b11c              CBZ      r4,|L20.292|
00011c  7ae0              LDRB     r0,[r4,#0xb]          ;1736
00011e  f0000010          AND      r0,r0,#0x10           ;1736
000122  b108              CBZ      r0,|L20.296|
                  |L20.292|
000124  2004              MOVS     r0,#4                 ;1737
000126  e77d              B        |L20.36|
                  |L20.296|
000128  f0060002          AND      r0,r6,#2              ;1739
00012c  b128              CBZ      r0,|L20.314|
00012e  7ae0              LDRB     r0,[r4,#0xb]          ;1739
000130  f0000001          AND      r0,r0,#1              ;1739
000134  b108              CBZ      r0,|L20.314|
000136  2007              MOVS     r0,#7                 ;1740
000138  e774              B        |L20.36|
                  |L20.314|
00013a  9803              LDR      r0,[sp,#0xc]          ;1742
00013c  6ac0              LDR      r0,[r0,#0x2c]         ;1742
00013e  61e8              STR      r0,[r5,#0x1c]         ;1742
000140  9808              LDR      r0,[sp,#0x20]         ;1743
000142  6228              STR      r0,[r5,#0x20]         ;1743
000144  71ae              STRB     r6,[r5,#6]            ;1745
000146  7ea1              LDRB     r1,[r4,#0x1a]         ;1746
000148  7ee0              LDRB     r0,[r4,#0x1b]         ;1746
00014a  ea412100          ORR      r1,r1,r0,LSL #8       ;1746
00014e  7d22              LDRB     r2,[r4,#0x14]         ;1746
000150  7d60              LDRB     r0,[r4,#0x15]         ;1746
000152  ea422000          ORR      r0,r2,r0,LSL #8       ;1746
000156  ea414000          ORR      r0,r1,r0,LSL #16      ;1746
00015a  6128              STR      r0,[r5,#0x10]         ;1746
00015c  7fe0              LDRB     r0,[r4,#0x1f]         ;1748
00015e  0601              LSLS     r1,r0,#24             ;1748
000160  7fa0              LDRB     r0,[r4,#0x1e]         ;1748
000162  ea414100          ORR      r1,r1,r0,LSL #16      ;1748
000166  7f60              LDRB     r0,[r4,#0x1d]         ;1748
000168  ea412000          ORR      r0,r1,r0,LSL #8       ;1748
00016c  7f21              LDRB     r1,[r4,#0x1c]         ;1748
00016e  4308              ORRS     r0,r0,r1              ;1748
000170  60e8              STR      r0,[r5,#0xc]          ;1748
000172  2000              MOVS     r0,#0                 ;1749
000174  60a8              STR      r0,[r5,#8]            ;1749
000176  20ff              MOVS     r0,#0xff              ;1749
000178  71e8              STRB     r0,[r5,#7]            ;1749
00017a  2000              MOVS     r0,#0                 ;1750
00017c  61a8              STR      r0,[r5,#0x18]         ;1750
00017e  9803              LDR      r0,[sp,#0xc]          ;1751
000180  6028              STR      r0,[r5,#0]            ;1751
000182  9803              LDR      r0,[sp,#0xc]          ;1751
000184  88c0              LDRH     r0,[r0,#6]            ;1751
000186  80a8              STRH     r0,[r5,#4]            ;1751
000188  2000              MOVS     r0,#0                 ;1753
00018a  e74b              B        |L20.36|
;;;1755   
                          ENDP


                          AREA ||i.f_opendir||, CODE, READONLY, ALIGN=1

                  f_opendir PROC
;;;2200   
;;;2201   FRESULT f_opendir (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;2202   	DIR *dj,			/* Pointer to directory object to create */
;;;2203   	const XCHAR *path	/* Pointer to the directory path */
;;;2204   )
;;;2205   {
000002  b084              SUB      sp,sp,#0x10
000004  4604              MOV      r4,r0
;;;2206   	FRESULT res;
;;;2207   	NAMEBUF(sfn, lfn);
;;;2208   	BYTE *dir;
;;;2209   
;;;2210   
;;;2211   	res = chk_mounted(&path, &dj->fs, 0);
000006  2200              MOVS     r2,#0
000008  4621              MOV      r1,r4
00000a  a805              ADD      r0,sp,#0x14
00000c  f7fffffe          BL       chk_mounted
000010  4606              MOV      r6,r0
;;;2212   	if (res == FR_OK) {
000012  bb36              CBNZ     r6,|L21.98|
;;;2213   		INITBUF((*dj), sfn, lfn);
000014  a801              ADD      r0,sp,#4
000016  61a0              STR      r0,[r4,#0x18]
;;;2214   		res = follow_path(dj, path);			/* Follow the path to the directory */
000018  4620              MOV      r0,r4
00001a  9905              LDR      r1,[sp,#0x14]
00001c  f7fffffe          BL       follow_path
000020  4606              MOV      r6,r0
;;;2215   		if (res == FR_OK) {						/* Follow completed */
000022  b9de              CBNZ     r6,|L21.92|
;;;2216   			dir = dj->dir;
000024  6965              LDR      r5,[r4,#0x14]
;;;2217   			if (dir) {							/* It is not the root dir */
000026  b185              CBZ      r5,|L21.74|
;;;2218   				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
000028  7ae8              LDRB     r0,[r5,#0xb]
00002a  f0000010          AND      r0,r0,#0x10
00002e  b158              CBZ      r0,|L21.72|
;;;2219   					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
000030  7ea9              LDRB     r1,[r5,#0x1a]
000032  7ee8              LDRB     r0,[r5,#0x1b]
000034  ea412100          ORR      r1,r1,r0,LSL #8
000038  7d2a              LDRB     r2,[r5,#0x14]
00003a  7d68              LDRB     r0,[r5,#0x15]
00003c  ea422000          ORR      r0,r2,r0,LSL #8
000040  ea414000          ORR      r0,r1,r0,LSL #16
000044  60a0              STR      r0,[r4,#8]
000046  e000              B        |L21.74|
                  |L21.72|
;;;2220   				} else {						/* The object is not a directory */
;;;2221   					res = FR_NO_PATH;
000048  2605              MOVS     r6,#5
                  |L21.74|
;;;2222   				}
;;;2223   			}
;;;2224   			if (res == FR_OK) {
00004a  b93e              CBNZ     r6,|L21.92|
;;;2225   				dj->id = dj->fs->id;
00004c  6820              LDR      r0,[r4,#0]
00004e  88c0              LDRH     r0,[r0,#6]
000050  80a0              STRH     r0,[r4,#4]
;;;2226   				res = dir_seek(dj, 0);			/* Rewind dir */
000052  2100              MOVS     r1,#0
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       dir_seek
00005a  4606              MOV      r6,r0
                  |L21.92|
;;;2227   			}
;;;2228   		}
;;;2229   		if (res == FR_NO_FILE) res = FR_NO_PATH;
00005c  2e04              CMP      r6,#4
00005e  d100              BNE      |L21.98|
000060  2605              MOVS     r6,#5
                  |L21.98|
;;;2230   	}
;;;2231   
;;;2232   	LEAVE_FF(dj->fs, res);
000062  4630              MOV      r0,r6
;;;2233   }
000064  b006              ADD      sp,sp,#0x18
000066  bd70              POP      {r4-r6,pc}
;;;2234   
                          ENDP


                          AREA ||i.f_read||, CODE, READONLY, ALIGN=1

                  f_read PROC
;;;1762   
;;;1763   FRESULT f_read (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1764   	FIL *fp, 		/* Pointer to the file object */
;;;1765   	void *buff,		/* Pointer to data buffer */
;;;1766   	UINT btr,		/* Number of bytes to read */
;;;1767   	UINT *br		/* Pointer to number of bytes read */
;;;1768   )
;;;1769   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  4699              MOV      r9,r3
;;;1770   	FRESULT res;
;;;1771   	DWORD clst, sect, remain;
;;;1772   	UINT rcnt, cc;
;;;1773   	BYTE *rbuff = buff;
00000c  f8dda010          LDR      r10,[sp,#0x10]
;;;1774   
;;;1775   
;;;1776   	*br = 0;	/* Initialize bytes read */
000010  2000              MOVS     r0,#0
000012  f8c90000          STR      r0,[r9,#0]
;;;1777   
;;;1778   	res = validate(fp->fs, fp->id);					/* Check validity of the object */
000016  88a1              LDRH     r1,[r4,#4]
000018  6820              LDR      r0,[r4,#0]
00001a  f7fffffe          BL       validate
00001e  9002              STR      r0,[sp,#8]
;;;1779   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000020  9802              LDR      r0,[sp,#8]
000022  b118              CBZ      r0,|L22.44|
000024  9802              LDR      r0,[sp,#8]
                  |L22.38|
;;;1780   	if (fp->flag & FA__ERROR)						/* Check abort flag */
;;;1781   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;1782   	if (!(fp->flag & FA_READ)) 						/* Check access mode */
;;;1783   		LEAVE_FF(fp->fs, FR_DENIED);
;;;1784   	remain = fp->fsize - fp->fptr;
;;;1785   	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
;;;1786   
;;;1787   	for ( ;  btr;									/* Repeat until all data transferred */
;;;1788   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;1789   		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
;;;1790   			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
;;;1791   				clst = (fp->fptr == 0) ?			/* On the top of the file? */
;;;1792   					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
;;;1793   				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;1794   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;1795   				fp->curr_clust = clst;				/* Update current cluster */
;;;1796   				fp->csect = 0;						/* Reset sector offset in the cluster */
;;;1797   			}
;;;1798   			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
;;;1799   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;1800   			sect += fp->csect;
;;;1801   			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
;;;1802   			if (cc) {								/* Read maximum contiguous sectors directly */
;;;1803   				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;1804   					cc = fp->fs->csize - fp->csect;
;;;1805   				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
;;;1806   					ABORT(fp->fs, FR_DISK_ERR);
;;;1807   #if !_FS_READONLY && _FS_MINIMIZE <= 2
;;;1808   #if _FS_TINY
;;;1809   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;1810   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;1811   #else
;;;1812   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;1813   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;1814   #endif
;;;1815   #endif
;;;1816   				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
;;;1817   				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
;;;1818   				continue;
;;;1819   			}
;;;1820   #if !_FS_TINY
;;;1821   #if !_FS_READONLY
;;;1822   			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
;;;1823   				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
;;;1824   					ABORT(fp->fs, FR_DISK_ERR);
;;;1825   				fp->flag &= ~FA__DIRTY;
;;;1826   			}
;;;1827   #endif
;;;1828   			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
;;;1829   				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
;;;1830   					ABORT(fp->fs, FR_DISK_ERR);
;;;1831   			}
;;;1832   #endif
;;;1833   			fp->dsect = sect;
;;;1834   			fp->csect++;							/* Next sector address in the cluster */
;;;1835   		}
;;;1836   		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;1837   		if (rcnt > btr) rcnt = btr;
;;;1838   #if _FS_TINY
;;;1839   		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
;;;1840   			ABORT(fp->fs, FR_DISK_ERR);
;;;1841   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;1842   #else
;;;1843   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;1844   #endif
;;;1845   	}
;;;1846   
;;;1847   	LEAVE_FF(fp->fs, FR_OK);
;;;1848   }
000026  b007              ADD      sp,sp,#0x1c
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L22.44|
00002c  79a0              LDRB     r0,[r4,#6]            ;1780
00002e  f0000080          AND      r0,r0,#0x80           ;1780
000032  b108              CBZ      r0,|L22.56|
000034  2002              MOVS     r0,#2                 ;1781
000036  e7f6              B        |L22.38|
                  |L22.56|
000038  79a0              LDRB     r0,[r4,#6]            ;1782
00003a  f0000001          AND      r0,r0,#1              ;1782
00003e  b908              CBNZ     r0,|L22.68|
000040  2007              MOVS     r0,#7                 ;1783
000042  e7f0              B        |L22.38|
                  |L22.68|
000044  e9d41002          LDRD     r1,r0,[r4,#8]         ;1784
000048  1a40              SUBS     r0,r0,r1              ;1784
00004a  9001              STR      r0,[sp,#4]            ;1784
00004c  9801              LDR      r0,[sp,#4]            ;1785
00004e  4285              CMP      r5,r0                 ;1785
000050  d900              BLS      |L22.84|
000052  9d01              LDR      r5,[sp,#4]            ;1785
                  |L22.84|
000054  e0b8              B        |L22.456|
                  |L22.86|
000056  8920              LDRH     r0,[r4,#8]            ;1789
000058  f3c00008          UBFX     r0,r0,#0,#9           ;1789
00005c  2800              CMP      r0,#0                 ;1789
00005e  d17b              BNE      |L22.344|
000060  79e0              LDRB     r0,[r4,#7]            ;1790
000062  6821              LDR      r1,[r4,#0]            ;1790
000064  7889              LDRB     r1,[r1,#2]            ;1790
000066  4288              CMP      r0,r1                 ;1790
000068  db1e              BLT      |L22.168|
00006a  68a0              LDR      r0,[r4,#8]            ;1791
00006c  b908              CBNZ     r0,|L22.114|
00006e  6920              LDR      r0,[r4,#0x10]         ;1792
000070  e003              B        |L22.122|
                  |L22.114|
000072  6961              LDR      r1,[r4,#0x14]         ;1792
000074  6820              LDR      r0,[r4,#0]            ;1792
000076  f7fffffe          BL       get_fat
                  |L22.122|
00007a  4683              MOV      r11,r0                ;1792
00007c  f1bb0f01          CMP      r11,#1                ;1793
000080  d805              BHI      |L22.142|
000082  79a0              LDRB     r0,[r4,#6]            ;1793
000084  f0400080          ORR      r0,r0,#0x80           ;1793
000088  71a0              STRB     r0,[r4,#6]            ;1793
00008a  2002              MOVS     r0,#2                 ;1793
00008c  e7cb              B        |L22.38|
                  |L22.142|
00008e  f10b0001          ADD      r0,r11,#1             ;1794
000092  b928              CBNZ     r0,|L22.160|
000094  79a0              LDRB     r0,[r4,#6]            ;1794
000096  f0400080          ORR      r0,r0,#0x80           ;1794
00009a  71a0              STRB     r0,[r4,#6]            ;1794
00009c  2001              MOVS     r0,#1                 ;1794
00009e  e7c2              B        |L22.38|
                  |L22.160|
0000a0  f8c4b014          STR      r11,[r4,#0x14]        ;1795
0000a4  2000              MOVS     r0,#0                 ;1796
0000a6  71e0              STRB     r0,[r4,#7]            ;1796
                  |L22.168|
0000a8  6961              LDR      r1,[r4,#0x14]         ;1798
0000aa  6820              LDR      r0,[r4,#0]            ;1798
0000ac  f7fffffe          BL       clust2sect
0000b0  4606              MOV      r6,r0                 ;1798
0000b2  b92e              CBNZ     r6,|L22.192|
0000b4  79a0              LDRB     r0,[r4,#6]            ;1799
0000b6  f0400080          ORR      r0,r0,#0x80           ;1799
0000ba  71a0              STRB     r0,[r4,#6]            ;1799
0000bc  2002              MOVS     r0,#2                 ;1799
0000be  e7b2              B        |L22.38|
                  |L22.192|
0000c0  79e0              LDRB     r0,[r4,#7]            ;1800
0000c2  4406              ADD      r6,r6,r0              ;1800
0000c4  ea4f2855          LSR      r8,r5,#9              ;1801
0000c8  f1b80f00          CMP      r8,#0                 ;1802
0000cc  d031              BEQ      |L22.306|
0000ce  79e0              LDRB     r0,[r4,#7]            ;1803
0000d0  4440              ADD      r0,r0,r8              ;1803
0000d2  6821              LDR      r1,[r4,#0]            ;1803
0000d4  7889              LDRB     r1,[r1,#2]            ;1803
0000d6  4288              CMP      r0,r1                 ;1803
0000d8  d904              BLS      |L22.228|
0000da  6820              LDR      r0,[r4,#0]            ;1804
0000dc  7880              LDRB     r0,[r0,#2]            ;1804
0000de  79e1              LDRB     r1,[r4,#7]            ;1804
0000e0  eba00801          SUB      r8,r0,r1              ;1804
                  |L22.228|
0000e4  f00803ff          AND      r3,r8,#0xff           ;1805
0000e8  6821              LDR      r1,[r4,#0]            ;1805
0000ea  7848              LDRB     r0,[r1,#1]            ;1805
0000ec  4632              MOV      r2,r6                 ;1805
0000ee  4651              MOV      r1,r10                ;1805
0000f0  f7fffffe          BL       disk_read
0000f4  b128              CBZ      r0,|L22.258|
0000f6  79a0              LDRB     r0,[r4,#6]            ;1806
0000f8  f0400080          ORR      r0,r0,#0x80           ;1806
0000fc  71a0              STRB     r0,[r4,#6]            ;1806
0000fe  2001              MOVS     r0,#1                 ;1806
000100  e791              B        |L22.38|
                  |L22.258|
000102  79a0              LDRB     r0,[r4,#6]            ;1812
000104  f0000040          AND      r0,r0,#0x40           ;1812
000108  b168              CBZ      r0,|L22.294|
00010a  69a0              LDR      r0,[r4,#0x18]         ;1812
00010c  1b80              SUBS     r0,r0,r6              ;1812
00010e  4540              CMP      r0,r8                 ;1812
000110  d209              BCS      |L22.294|
000112  69a1              LDR      r1,[r4,#0x18]         ;1813
000114  1b89              SUBS     r1,r1,r6              ;1813
000116  eb0a2041          ADD      r0,r10,r1,LSL #9      ;1813
00011a  f44f7200          MOV      r2,#0x200             ;1813
00011e  f1040124          ADD      r1,r4,#0x24           ;1813
000122  f7fffffe          BL       mem_cpy
                  |L22.294|
000126  79e0              LDRB     r0,[r4,#7]            ;1816
000128  4440              ADD      r0,r0,r8              ;1816
00012a  71e0              STRB     r0,[r4,#7]            ;1816
00012c  ea4f2748          LSL      r7,r8,#9              ;1817
000130  e040              B        |L22.436|
                  |L22.306|
000132  79a0              LDRB     r0,[r4,#6]            ;1822
000134  f0000040          AND      r0,r0,#0x40           ;1822
000138  b198              CBZ      r0,|L22.354|
00013a  6821              LDR      r1,[r4,#0]            ;1823
00013c  7848              LDRB     r0,[r1,#1]            ;1823
00013e  2301              MOVS     r3,#1                 ;1823
000140  f1040124          ADD      r1,r4,#0x24           ;1823
000144  69a2              LDR      r2,[r4,#0x18]         ;1823
000146  f7fffffe          BL       disk_write
00014a  b130              CBZ      r0,|L22.346|
00014c  79a0              LDRB     r0,[r4,#6]            ;1824
00014e  f0400080          ORR      r0,r0,#0x80           ;1824
000152  71a0              STRB     r0,[r4,#6]            ;1824
000154  2001              MOVS     r0,#1                 ;1824
000156  e766              B        |L22.38|
                  |L22.344|
000158  e019              B        |L22.398|
                  |L22.346|
00015a  79a0              LDRB     r0,[r4,#6]            ;1825
00015c  f0200040          BIC      r0,r0,#0x40           ;1825
000160  71a0              STRB     r0,[r4,#6]            ;1825
                  |L22.354|
000162  69a0              LDR      r0,[r4,#0x18]         ;1828
000164  42b0              CMP      r0,r6                 ;1828
000166  d00e              BEQ      |L22.390|
000168  6821              LDR      r1,[r4,#0]            ;1829
00016a  7848              LDRB     r0,[r1,#1]            ;1829
00016c  2301              MOVS     r3,#1                 ;1829
00016e  4632              MOV      r2,r6                 ;1829
000170  f1040124          ADD      r1,r4,#0x24           ;1829
000174  f7fffffe          BL       disk_read
000178  b128              CBZ      r0,|L22.390|
00017a  79a0              LDRB     r0,[r4,#6]            ;1830
00017c  f0400080          ORR      r0,r0,#0x80           ;1830
000180  71a0              STRB     r0,[r4,#6]            ;1830
000182  2001              MOVS     r0,#1                 ;1830
000184  e74f              B        |L22.38|
                  |L22.390|
000186  61a6              STR      r6,[r4,#0x18]         ;1833
000188  79e0              LDRB     r0,[r4,#7]            ;1834
00018a  1c40              ADDS     r0,r0,#1              ;1834
00018c  71e0              STRB     r0,[r4,#7]            ;1834
                  |L22.398|
00018e  8920              LDRH     r0,[r4,#8]            ;1836
000190  f3c00008          UBFX     r0,r0,#0,#9           ;1836
000194  f5c07700          RSB      r7,r0,#0x200          ;1836
000198  42af              CMP      r7,r5                 ;1837
00019a  d900              BLS      |L22.414|
00019c  462f              MOV      r7,r5                 ;1837
                  |L22.414|
00019e  8920              LDRH     r0,[r4,#8]            ;1843
0001a0  f3c00208          UBFX     r2,r0,#0,#9           ;1843
0001a4  f1040024          ADD      r0,r4,#0x24           ;1843
0001a8  1811              ADDS     r1,r2,r0              ;1843
0001aa  463a              MOV      r2,r7                 ;1843
0001ac  4650              MOV      r0,r10                ;1843
0001ae  f7fffffe          BL       mem_cpy
0001b2  bf00              NOP                            ;1818
                  |L22.436|
0001b4  44ba              ADD      r10,r10,r7            ;1788
0001b6  68a0              LDR      r0,[r4,#8]            ;1788
0001b8  4438              ADD      r0,r0,r7              ;1788
0001ba  60a0              STR      r0,[r4,#8]            ;1788
0001bc  f8d90000          LDR      r0,[r9,#0]            ;1788
0001c0  4438              ADD      r0,r0,r7              ;1788
0001c2  f8c90000          STR      r0,[r9,#0]            ;1788
0001c6  1bed              SUBS     r5,r5,r7              ;1788
                  |L22.456|
0001c8  2d00              CMP      r5,#0                 ;1787
0001ca  f47faf44          BNE      |L22.86|
0001ce  2000              MOVS     r0,#0                 ;1847
0001d0  e729              B        |L22.38|
;;;1849   
                          ENDP


                          AREA ||i.f_readdir||, CODE, READONLY, ALIGN=1

                  f_readdir PROC
;;;2241   
;;;2242   FRESULT f_readdir (
000000  b5fe              PUSH     {r1-r7,lr}
;;;2243   	DIR *dj,			/* Pointer to the open directory object */
;;;2244   	FILINFO *fno		/* Pointer to file information to return */
;;;2245   )
;;;2246   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;2247   	FRESULT res;
;;;2248   	NAMEBUF(sfn, lfn);
;;;2249   
;;;2250   
;;;2251   	res = validate(dj->fs, dj->id);			/* Check validity of the object */
000006  88a1              LDRH     r1,[r4,#4]
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       validate
00000e  4605              MOV      r5,r0
;;;2252   	if (res == FR_OK) {
000010  bb05              CBNZ     r5,|L23.84|
;;;2253   		INITBUF((*dj), sfn, lfn);
000012  f8c4d018          STR      sp,[r4,#0x18]
;;;2254   		if (!fno) {
000016  b92e              CBNZ     r6,|L23.36|
;;;2255   			res = dir_seek(dj, 0);
000018  2100              MOVS     r1,#0
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       dir_seek
000020  4605              MOV      r5,r0
000022  e017              B        |L23.84|
                  |L23.36|
;;;2256   		} else {
;;;2257   			res = dir_read(dj);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       dir_read
00002a  4605              MOV      r5,r0
;;;2258   			if (res == FR_NO_FILE) {
00002c  2d04              CMP      r5,#4
00002e  d102              BNE      |L23.54|
;;;2259   				dj->sect = 0;
000030  2000              MOVS     r0,#0
000032  6120              STR      r0,[r4,#0x10]
;;;2260   				res = FR_OK;
000034  2500              MOVS     r5,#0
                  |L23.54|
;;;2261   			}
;;;2262   			if (res == FR_OK) {				/* A valid entry is found */
000036  b96d              CBNZ     r5,|L23.84|
;;;2263   				get_fileinfo(dj, fno);		/* Get the object information */
000038  4631              MOV      r1,r6
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       get_fileinfo
;;;2264   				res = dir_next(dj, FALSE);	/* Increment index for next */
000040  2100              MOVS     r1,#0
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       dir_next
000048  4605              MOV      r5,r0
;;;2265   				if (res == FR_NO_FILE) {
00004a  2d04              CMP      r5,#4
00004c  d102              BNE      |L23.84|
;;;2266   					dj->sect = 0;
00004e  2000              MOVS     r0,#0
000050  6120              STR      r0,[r4,#0x10]
;;;2267   					res = FR_OK;
000052  2500              MOVS     r5,#0
                  |L23.84|
;;;2268   				}
;;;2269   			}
;;;2270   		}
;;;2271   	}
;;;2272   
;;;2273   	LEAVE_FF(dj->fs, res);
000054  4628              MOV      r0,r5
;;;2274   }
000056  bdfe              POP      {r1-r7,pc}
;;;2275   
                          ENDP


                          AREA ||i.f_rename||, CODE, READONLY, ALIGN=1

                  f_rename PROC
;;;2641   
;;;2642   FRESULT f_rename (
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;2643   	const XCHAR *path_old,	/* Pointer to the old name */
;;;2644   	const XCHAR *path_new	/* Pointer to the new name */
;;;2645   )
;;;2646   {
000002  b097              SUB      sp,sp,#0x5c
000004  460f              MOV      r7,r1
;;;2647   	FRESULT res;
;;;2648   	DIR dj_old, dj_new;
;;;2649   	NAMEBUF(sfn, lfn);
;;;2650   	BYTE buf[21], *dir;
;;;2651   	DWORD dw;
;;;2652   
;;;2653   
;;;2654   	INITBUF(dj_old, sfn, lfn);
000006  a806              ADD      r0,sp,#0x18
000008  9016              STR      r0,[sp,#0x58]
;;;2655   	res = chk_mounted(&path_old, &dj_old.fs, 1);
00000a  2201              MOVS     r2,#1
00000c  a910              ADD      r1,sp,#0x40
00000e  a817              ADD      r0,sp,#0x5c
000010  f7fffffe          BL       chk_mounted
000014  4605              MOV      r5,r0
;;;2656   	if (res == FR_OK) {
000016  b93d              CBNZ     r5,|L24.40|
;;;2657   		dj_new.fs = dj_old.fs;
000018  9810              LDR      r0,[sp,#0x40]
00001a  9009              STR      r0,[sp,#0x24]
;;;2658   		res = follow_path(&dj_old, path_old);	/* Check old object */
00001c  a810              ADD      r0,sp,#0x40
00001e  9917              LDR      r1,[sp,#0x5c]
000020  f7fffffe          BL       follow_path
000024  4605              MOV      r5,r0
;;;2659   		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
000026  bf00              NOP      
                  |L24.40|
;;;2660   			res = FR_INVALID_NAME;
;;;2661   	}
;;;2662   	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
000028  b115              CBZ      r5,|L24.48|
00002a  4628              MOV      r0,r5
                  |L24.44|
;;;2663   
;;;2664   	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
;;;2665   	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
;;;2666   
;;;2667   	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
;;;2668   	res = follow_path(&dj_new, path_new);		/* Check new object */
;;;2669   	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
;;;2670   	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
;;;2671   		res = dir_register(&dj_new);			/* Register the new object */
;;;2672   		if (res == FR_OK) {
;;;2673   			dir = dj_new.dir;					/* Copy object information into new entry */
;;;2674   			mem_cpy(dir+13, buf+2, 19);
;;;2675   			dir[DIR_Attr] = buf[0] | AM_ARC;
;;;2676   			dj_old.fs->wflag = 1;
;;;2677   			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
;;;2678   				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
;;;2679   				if (!dw) {
;;;2680   					res = FR_INT_ERR;
;;;2681   				} else {
;;;2682   					res = move_window(dj_new.fs, dw);
;;;2683   					dir = dj_new.fs->win+32;
;;;2684   					if (res == FR_OK && dir[1] == '.') {
;;;2685   						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
;;;2686   						ST_WORD(dir+DIR_FstClusLO, dw);
;;;2687   						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
;;;2688   						dj_new.fs->wflag = 1;
;;;2689   					}
;;;2690   				}
;;;2691   			}
;;;2692   			if (res == FR_OK) {
;;;2693   				res = dir_remove(&dj_old);			/* Remove old entry */
;;;2694   				if (res == FR_OK)
;;;2695   					res = sync(dj_old.fs);
;;;2696   			}
;;;2697   		}
;;;2698   	}
;;;2699   
;;;2700   	LEAVE_FF(dj_old.fs, res);
;;;2701   }
00002c  b019              ADD      sp,sp,#0x64
00002e  bdf0              POP      {r4-r7,pc}
                  |L24.48|
000030  9815              LDR      r0,[sp,#0x54]         ;2664
000032  b908              CBNZ     r0,|L24.56|
000034  2004              MOVS     r0,#4                 ;2664
000036  e7f9              B        |L24.44|
                  |L24.56|
000038  9815              LDR      r0,[sp,#0x54]         ;2665
00003a  f100010b          ADD      r1,r0,#0xb            ;2665
00003e  2215              MOVS     r2,#0x15              ;2665
000040  4668              MOV      r0,sp                 ;2665
000042  f7fffffe          BL       mem_cpy
000046  221c              MOVS     r2,#0x1c              ;2667
000048  a910              ADD      r1,sp,#0x40           ;2667
00004a  a809              ADD      r0,sp,#0x24           ;2667
00004c  f7fffffe          BL       mem_cpy
000050  4639              MOV      r1,r7                 ;2668
000052  a809              ADD      r0,sp,#0x24           ;2668
000054  f7fffffe          BL       follow_path
000058  4605              MOV      r5,r0                 ;2668
00005a  b905              CBNZ     r5,|L24.94|
00005c  2508              MOVS     r5,#8                 ;2669
                  |L24.94|
00005e  2d04              CMP      r5,#4                 ;2670
000060  d159              BNE      |L24.278|
000062  a809              ADD      r0,sp,#0x24           ;2671
000064  f7fffffe          BL       dir_register
000068  4605              MOV      r5,r0                 ;2671
00006a  2d00              CMP      r5,#0                 ;2672
00006c  d153              BNE      |L24.278|
00006e  9c0e              LDR      r4,[sp,#0x38]         ;2673
000070  2213              MOVS     r2,#0x13              ;2674
000072  f10d0102          ADD      r1,sp,#2              ;2674
000076  f104000d          ADD      r0,r4,#0xd            ;2674
00007a  f7fffffe          BL       mem_cpy
00007e  f89d0000          LDRB     r0,[sp,#0]            ;2675
000082  f0400020          ORR      r0,r0,#0x20           ;2675
000086  72e0              STRB     r0,[r4,#0xb]          ;2675
000088  2001              MOVS     r0,#1                 ;2676
00008a  9910              LDR      r1,[sp,#0x40]         ;2676
00008c  7108              STRB     r0,[r1,#4]            ;2676
00008e  7ae0              LDRB     r0,[r4,#0xb]          ;2677
000090  f0000010          AND      r0,r0,#0x10           ;2677
000094  2800              CMP      r0,#0                 ;2677
000096  d034              BEQ      |L24.258|
000098  7d23              LDRB     r3,[r4,#0x14]         ;2678
00009a  7d62              LDRB     r2,[r4,#0x15]         ;2678
00009c  ea432202          ORR      r2,r3,r2,LSL #8       ;2678
0000a0  f894c01a          LDRB     r12,[r4,#0x1a]        ;2678
0000a4  7ee3              LDRB     r3,[r4,#0x1b]         ;2678
0000a6  ea4c2303          ORR      r3,r12,r3,LSL #8      ;2678
0000aa  ea420103          ORR      r1,r2,r3              ;2678
0000ae  9809              LDR      r0,[sp,#0x24]         ;2678
0000b0  f7fffffe          BL       clust2sect
0000b4  4606              MOV      r6,r0                 ;2678
0000b6  b90e              CBNZ     r6,|L24.188|
0000b8  2502              MOVS     r5,#2                 ;2680
0000ba  e022              B        |L24.258|
                  |L24.188|
0000bc  4631              MOV      r1,r6                 ;2682
0000be  9809              LDR      r0,[sp,#0x24]         ;2682
0000c0  f7fffffe          BL       move_window
0000c4  4605              MOV      r5,r0                 ;2682
0000c6  9809              LDR      r0,[sp,#0x24]         ;2683
0000c8  f1000450          ADD      r4,r0,#0x50           ;2683
0000cc  b9cd              CBNZ     r5,|L24.258|
0000ce  7860              LDRB     r0,[r4,#1]            ;2684
0000d0  282e              CMP      r0,#0x2e              ;2684
0000d2  d116              BNE      |L24.258|
0000d4  9809              LDR      r0,[sp,#0x24]         ;2685
0000d6  7800              LDRB     r0,[r0,#0]            ;2685
0000d8  2803              CMP      r0,#3                 ;2685
0000da  d106              BNE      |L24.234|
0000dc  9909              LDR      r1,[sp,#0x24]         ;2685
0000de  980b              LDR      r0,[sp,#0x2c]         ;2685
0000e0  6a49              LDR      r1,[r1,#0x24]         ;2685
0000e2  4288              CMP      r0,r1                 ;2685
0000e4  d101              BNE      |L24.234|
0000e6  2000              MOVS     r0,#0                 ;2685
0000e8  e000              B        |L24.236|
                  |L24.234|
0000ea  980b              LDR      r0,[sp,#0x2c]         ;2685
                  |L24.236|
0000ec  4606              MOV      r6,r0                 ;2685
0000ee  76a6              STRB     r6,[r4,#0x1a]         ;2686
0000f0  0a31              LSRS     r1,r6,#8              ;2686
0000f2  76e1              STRB     r1,[r4,#0x1b]         ;2686
0000f4  0c30              LSRS     r0,r6,#16             ;2687
0000f6  7520              STRB     r0,[r4,#0x14]         ;2687
0000f8  0e31              LSRS     r1,r6,#24             ;2687
0000fa  7561              STRB     r1,[r4,#0x15]         ;2687
0000fc  2001              MOVS     r0,#1                 ;2688
0000fe  9909              LDR      r1,[sp,#0x24]         ;2688
000100  7108              STRB     r0,[r1,#4]            ;2688
                  |L24.258|
000102  b945              CBNZ     r5,|L24.278|
000104  a810              ADD      r0,sp,#0x40           ;2693
000106  f7fffffe          BL       dir_remove
00010a  4605              MOV      r5,r0                 ;2693
00010c  b91d              CBNZ     r5,|L24.278|
00010e  9810              LDR      r0,[sp,#0x40]         ;2695
000110  f7fffffe          BL       sync
000114  4605              MOV      r5,r0                 ;2695
                  |L24.278|
000116  4628              MOV      r0,r5                 ;2700
000118  e788              B        |L24.44|
;;;2702   
                          ENDP


                          AREA ||i.f_stat||, CODE, READONLY, ALIGN=1

                  f_stat PROC
;;;2282   
;;;2283   FRESULT f_stat (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2284   	const XCHAR *path,	/* Pointer to the file path */
;;;2285   	FILINFO *fno		/* Pointer to file information to return */
;;;2286   )
;;;2287   {
000002  b08b              SUB      sp,sp,#0x2c
000004  460d              MOV      r5,r1
;;;2288   	FRESULT res;
;;;2289   	DIR dj;
;;;2290   	NAMEBUF(sfn, lfn);
;;;2291   
;;;2292   
;;;2293   	res = chk_mounted(&path, &dj.fs, 0);
000006  2200              MOVS     r2,#0
000008  a904              ADD      r1,sp,#0x10
00000a  a80b              ADD      r0,sp,#0x2c
00000c  f7fffffe          BL       chk_mounted
000010  4604              MOV      r4,r0
;;;2294   	if (res == FR_OK) {
000012  b97c              CBNZ     r4,|L25.52|
;;;2295   		INITBUF(dj, sfn, lfn);
000014  a801              ADD      r0,sp,#4
000016  900a              STR      r0,[sp,#0x28]
;;;2296   		res = follow_path(&dj, path);	/* Follow the file path */
000018  a804              ADD      r0,sp,#0x10
00001a  990b              LDR      r1,[sp,#0x2c]
00001c  f7fffffe          BL       follow_path
000020  4604              MOV      r4,r0
;;;2297   		if (res == FR_OK) {				/* Follwo completed */
000022  b93c              CBNZ     r4,|L25.52|
;;;2298   			if (dj.dir)	/* Found an object */
000024  9809              LDR      r0,[sp,#0x24]
000026  b120              CBZ      r0,|L25.50|
;;;2299   				get_fileinfo(&dj, fno);
000028  4629              MOV      r1,r5
00002a  a804              ADD      r0,sp,#0x10
00002c  f7fffffe          BL       get_fileinfo
000030  e000              B        |L25.52|
                  |L25.50|
;;;2300   			else		/* It is root dir */
;;;2301   				res = FR_INVALID_NAME;
000032  2406              MOVS     r4,#6
                  |L25.52|
;;;2302   		}
;;;2303   	}
;;;2304   
;;;2305   	LEAVE_FF(dj.fs, res);
000034  4620              MOV      r0,r4
;;;2306   }
000036  b00d              ADD      sp,sp,#0x34
000038  bd30              POP      {r4,r5,pc}
;;;2307   
                          ENDP


                          AREA ||i.f_sync||, CODE, READONLY, ALIGN=1

                  f_sync PROC
;;;1972   
;;;1973   FRESULT f_sync (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1974   	FIL *fp		/* Pointer to the file object */
;;;1975   )
;;;1976   {
000004  4604              MOV      r4,r0
;;;1977   	FRESULT res;
;;;1978   	DWORD tim;
;;;1979   	BYTE *dir;
;;;1980   
;;;1981   
;;;1982   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
000006  88a1              LDRH     r1,[r4,#4]
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       validate
00000e  4607              MOV      r7,r0
;;;1983   	if (res == FR_OK) {
000010  2f00              CMP      r7,#0
000012  d14f              BNE      |L26.180|
;;;1984   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
000014  79a0              LDRB     r0,[r4,#6]
000016  f0000020          AND      r0,r0,#0x20
00001a  2800              CMP      r0,#0
00001c  d04a              BEQ      |L26.180|
;;;1985   #if !_FS_TINY	/* Write-back dirty buffer */
;;;1986   			if (fp->flag & FA__DIRTY) {
00001e  79a0              LDRB     r0,[r4,#6]
000020  f0000040          AND      r0,r0,#0x40
000024  b178              CBZ      r0,|L26.70|
;;;1987   				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
000026  6821              LDR      r1,[r4,#0]
000028  7848              LDRB     r0,[r1,#1]
00002a  2301              MOVS     r3,#1
00002c  f1040124          ADD      r1,r4,#0x24
000030  69a2              LDR      r2,[r4,#0x18]
000032  f7fffffe          BL       disk_write
000036  b110              CBZ      r0,|L26.62|
;;;1988   					LEAVE_FF(fp->fs, FR_DISK_ERR);
000038  2001              MOVS     r0,#1
                  |L26.58|
;;;1989   				fp->flag &= ~FA__DIRTY;
;;;1990   			}
;;;1991   #endif
;;;1992   			/* Update the directory entry */
;;;1993   			res = move_window(fp->fs, fp->dir_sect);
;;;1994   			if (res == FR_OK) {
;;;1995   				dir = fp->dir_ptr;
;;;1996   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;1997   				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
;;;1998   				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
;;;1999   				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
;;;2000   				tim = get_fattime();			/* Updated time */
;;;2001   				ST_DWORD(dir+DIR_WrtTime, tim);
;;;2002   				fp->flag &= ~FA__WRITTEN;
;;;2003   				fp->fs->wflag = 1;
;;;2004   				res = sync(fp->fs);
;;;2005   			}
;;;2006   		}
;;;2007   	}
;;;2008   
;;;2009   	LEAVE_FF(fp->fs, res);
;;;2010   }
00003a  e8bd81f0          POP      {r4-r8,pc}
                  |L26.62|
00003e  79a0              LDRB     r0,[r4,#6]            ;1989
000040  f0200040          BIC      r0,r0,#0x40           ;1989
000044  71a0              STRB     r0,[r4,#6]            ;1989
                  |L26.70|
000046  69e1              LDR      r1,[r4,#0x1c]         ;1993
000048  6820              LDR      r0,[r4,#0]            ;1993
00004a  f7fffffe          BL       move_window
00004e  4607              MOV      r7,r0                 ;1993
000050  2f00              CMP      r7,#0                 ;1994
000052  d12f              BNE      |L26.180|
000054  6a25              LDR      r5,[r4,#0x20]         ;1995
000056  7ae8              LDRB     r0,[r5,#0xb]          ;1996
000058  f0400020          ORR      r0,r0,#0x20           ;1996
00005c  72e8              STRB     r0,[r5,#0xb]          ;1996
00005e  7b20              LDRB     r0,[r4,#0xc]          ;1997
000060  7728              STRB     r0,[r5,#0x1c]         ;1997
000062  89a0              LDRH     r0,[r4,#0xc]          ;1997
000064  0a01              LSRS     r1,r0,#8              ;1997
000066  7769              STRB     r1,[r5,#0x1d]         ;1997
000068  68e0              LDR      r0,[r4,#0xc]          ;1997
00006a  0c01              LSRS     r1,r0,#16             ;1997
00006c  77a9              STRB     r1,[r5,#0x1e]         ;1997
00006e  68e0              LDR      r0,[r4,#0xc]          ;1997
000070  0e01              LSRS     r1,r0,#24             ;1997
000072  77e9              STRB     r1,[r5,#0x1f]         ;1997
000074  7c20              LDRB     r0,[r4,#0x10]         ;1998
000076  76a8              STRB     r0,[r5,#0x1a]         ;1998
000078  8a20              LDRH     r0,[r4,#0x10]         ;1998
00007a  0a01              LSRS     r1,r0,#8              ;1998
00007c  76e9              STRB     r1,[r5,#0x1b]         ;1998
00007e  6920              LDR      r0,[r4,#0x10]         ;1999
000080  0c00              LSRS     r0,r0,#16             ;1999
000082  7528              STRB     r0,[r5,#0x14]         ;1999
000084  6920              LDR      r0,[r4,#0x10]         ;1999
000086  0e01              LSRS     r1,r0,#24             ;1999
000088  7569              STRB     r1,[r5,#0x15]         ;1999
00008a  f7fffffe          BL       get_fattime
00008e  4606              MOV      r6,r0                 ;2000
000090  75ae              STRB     r6,[r5,#0x16]         ;2001
000092  0a31              LSRS     r1,r6,#8              ;2001
000094  75e9              STRB     r1,[r5,#0x17]         ;2001
000096  0c31              LSRS     r1,r6,#16             ;2001
000098  7629              STRB     r1,[r5,#0x18]         ;2001
00009a  0e31              LSRS     r1,r6,#24             ;2001
00009c  7669              STRB     r1,[r5,#0x19]         ;2001
00009e  79a0              LDRB     r0,[r4,#6]            ;2002
0000a0  f0200020          BIC      r0,r0,#0x20           ;2002
0000a4  71a0              STRB     r0,[r4,#6]            ;2002
0000a6  2001              MOVS     r0,#1                 ;2003
0000a8  6821              LDR      r1,[r4,#0]            ;2003
0000aa  7108              STRB     r0,[r1,#4]            ;2003
0000ac  6820              LDR      r0,[r4,#0]            ;2004
0000ae  f7fffffe          BL       sync
0000b2  4607              MOV      r7,r0                 ;2004
                  |L26.180|
0000b4  4638              MOV      r0,r7                 ;2009
0000b6  e7c0              B        |L26.58|
;;;2011   
                          ENDP


                          AREA ||i.f_truncate||, CODE, READONLY, ALIGN=1

                  f_truncate PROC
;;;2382   
;;;2383   FRESULT f_truncate (
000000  b570              PUSH     {r4-r6,lr}
;;;2384   	FIL *fp		/* Pointer to the file object */
;;;2385   )
;;;2386   {
000002  4604              MOV      r4,r0
;;;2387   	FRESULT res;
;;;2388   	DWORD ncl;
;;;2389   
;;;2390   
;;;2391   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
000004  88a1              LDRH     r1,[r4,#4]
000006  6820              LDR      r0,[r4,#0]
000008  f7fffffe          BL       validate
00000c  4606              MOV      r6,r0
;;;2392   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00000e  b10e              CBZ      r6,|L27.20|
000010  4630              MOV      r0,r6
                  |L27.18|
;;;2393   	if (fp->flag & FA__ERROR)			/* Check abort flag */
;;;2394   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2395   	if (!(fp->flag & FA_WRITE))			/* Check access mode */
;;;2396   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2397   
;;;2398   	if (fp->fsize > fp->fptr) {
;;;2399   		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
;;;2400   		fp->flag |= FA__WRITTEN;
;;;2401   		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
;;;2402   			res = remove_chain(fp->fs, fp->org_clust);
;;;2403   			fp->org_clust = 0;
;;;2404   		} else {				/* When truncate a part of the file, remove remaining clusters */
;;;2405   			ncl = get_fat(fp->fs, fp->curr_clust);
;;;2406   			res = FR_OK;
;;;2407   			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
;;;2408   			if (ncl == 1) res = FR_INT_ERR;
;;;2409   			if (res == FR_OK && ncl < fp->fs->max_clust) {
;;;2410   				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
;;;2411   				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
;;;2412   			}
;;;2413   		}
;;;2414   	}
;;;2415   	if (res != FR_OK) fp->flag |= FA__ERROR;
;;;2416   
;;;2417   	LEAVE_FF(fp->fs, res);
;;;2418   }
000012  bd70              POP      {r4-r6,pc}
                  |L27.20|
000014  79a0              LDRB     r0,[r4,#6]            ;2393
000016  f0000080          AND      r0,r0,#0x80           ;2393
00001a  b108              CBZ      r0,|L27.32|
00001c  2002              MOVS     r0,#2                 ;2394
00001e  e7f8              B        |L27.18|
                  |L27.32|
000020  79a0              LDRB     r0,[r4,#6]            ;2395
000022  f0000002          AND      r0,r0,#2              ;2395
000026  b908              CBNZ     r0,|L27.44|
000028  2007              MOVS     r0,#7                 ;2396
00002a  e7f2              B        |L27.18|
                  |L27.44|
00002c  e9d41002          LDRD     r1,r0,[r4,#8]         ;2398
000030  4288              CMP      r0,r1                 ;2398
000032  d92d              BLS      |L27.144|
000034  68a0              LDR      r0,[r4,#8]            ;2399
000036  60e0              STR      r0,[r4,#0xc]          ;2399
000038  79a0              LDRB     r0,[r4,#6]            ;2400
00003a  f0400020          ORR      r0,r0,#0x20           ;2400
00003e  71a0              STRB     r0,[r4,#6]            ;2400
000040  68a0              LDR      r0,[r4,#8]            ;2401
000042  b938              CBNZ     r0,|L27.84|
000044  6921              LDR      r1,[r4,#0x10]         ;2402
000046  6820              LDR      r0,[r4,#0]            ;2402
000048  f7fffffe          BL       remove_chain
00004c  4606              MOV      r6,r0                 ;2402
00004e  2000              MOVS     r0,#0                 ;2403
000050  6120              STR      r0,[r4,#0x10]         ;2403
000052  e01d              B        |L27.144|
                  |L27.84|
000054  6961              LDR      r1,[r4,#0x14]         ;2405
000056  6820              LDR      r0,[r4,#0]            ;2405
000058  f7fffffe          BL       get_fat
00005c  4605              MOV      r5,r0                 ;2405
00005e  2600              MOVS     r6,#0                 ;2406
000060  1c68              ADDS     r0,r5,#1              ;2407
000062  b900              CBNZ     r0,|L27.102|
000064  2601              MOVS     r6,#1                 ;2407
                  |L27.102|
000066  2d01              CMP      r5,#1                 ;2408
000068  d100              BNE      |L27.108|
00006a  2602              MOVS     r6,#2                 ;2408
                  |L27.108|
00006c  b986              CBNZ     r6,|L27.144|
00006e  6820              LDR      r0,[r4,#0]            ;2409
000070  69c0              LDR      r0,[r0,#0x1c]         ;2409
000072  42a8              CMP      r0,r5                 ;2409
000074  d90c              BLS      |L27.144|
000076  f06f4270          MVN      r2,#0xf0000000        ;2410
00007a  6961              LDR      r1,[r4,#0x14]         ;2410
00007c  6820              LDR      r0,[r4,#0]            ;2410
00007e  f7fffffe          BL       put_fat
000082  4606              MOV      r6,r0                 ;2410
000084  b926              CBNZ     r6,|L27.144|
000086  4629              MOV      r1,r5                 ;2411
000088  6820              LDR      r0,[r4,#0]            ;2411
00008a  f7fffffe          BL       remove_chain
00008e  4606              MOV      r6,r0                 ;2411
                  |L27.144|
000090  b11e              CBZ      r6,|L27.154|
000092  79a0              LDRB     r0,[r4,#6]            ;2415
000094  f0400080          ORR      r0,r0,#0x80           ;2415
000098  71a0              STRB     r0,[r4,#6]            ;2415
                  |L27.154|
00009a  4630              MOV      r0,r6                 ;2417
00009c  e7b9              B        |L27.18|
;;;2419   
                          ENDP


                          AREA ||i.f_unlink||, CODE, READONLY, ALIGN=1

                  f_unlink PROC
;;;2426   
;;;2427   FRESULT f_unlink (
000000  b571              PUSH     {r0,r4-r6,lr}
;;;2428   	const XCHAR *path		/* Pointer to the file or directory path */
;;;2429   )
;;;2430   {
000002  b091              SUB      sp,sp,#0x44
;;;2431   	FRESULT res;
;;;2432   	DIR dj, sdj;
;;;2433   	NAMEBUF(sfn, lfn);
;;;2434   	BYTE *dir;
;;;2435   	DWORD dclst;
;;;2436   
;;;2437   
;;;2438   	res = chk_mounted(&path, &dj.fs, 1);
000004  2201              MOVS     r2,#1
000006  a90a              ADD      r1,sp,#0x28
000008  a811              ADD      r0,sp,#0x44
00000a  f7fffffe          BL       chk_mounted
00000e  4604              MOV      r4,r0
;;;2439   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
000010  b114              CBZ      r4,|L28.24|
000012  4620              MOV      r0,r4
                  |L28.20|
;;;2440   
;;;2441   	INITBUF(dj, sfn, lfn);
;;;2442   	res = follow_path(&dj, path);			/* Follow the file path */
;;;2443   	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
;;;2444   		res = FR_INVALID_NAME;
;;;2445   	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
;;;2446   
;;;2447   	dir = dj.dir;
;;;2448   	if (!dir)								/* Is it the root directory? */
;;;2449   		LEAVE_FF(dj.fs, FR_INVALID_NAME);
;;;2450   	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
;;;2451   		LEAVE_FF(dj.fs, FR_DENIED);
;;;2452   	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
;;;2453   
;;;2454   	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
;;;2455   		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
;;;2456   		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
;;;2457   		sdj.sclust = dclst;
;;;2458   		res = dir_seek(&sdj, 2);
;;;2459   		if (res != FR_OK) LEAVE_FF(dj.fs, res);
;;;2460   		res = dir_read(&sdj);
;;;2461   		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
;;;2462   		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
;;;2463   	}
;;;2464   
;;;2465   	res = dir_remove(&dj);					/* Remove directory entry */
;;;2466   	if (res == FR_OK) {
;;;2467   		if (dclst)
;;;2468   			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
;;;2469   		if (res == FR_OK) res = sync(dj.fs);
;;;2470   	}
;;;2471   
;;;2472   	LEAVE_FF(dj.fs, res);
;;;2473   }
000014  b012              ADD      sp,sp,#0x48
000016  bd70              POP      {r4-r6,pc}
                  |L28.24|
000018  f8cdd040          STR      sp,[sp,#0x40]         ;2441
00001c  a80a              ADD      r0,sp,#0x28           ;2442
00001e  9911              LDR      r1,[sp,#0x44]         ;2442
000020  f7fffffe          BL       follow_path
000024  4604              MOV      r4,r0                 ;2442
000026  bf00              NOP                            ;2443
000028  b10c              CBZ      r4,|L28.46|
00002a  4620              MOV      r0,r4                 ;2445
00002c  e7f2              B        |L28.20|
                  |L28.46|
00002e  9d0f              LDR      r5,[sp,#0x3c]         ;2447
000030  b90d              CBNZ     r5,|L28.54|
000032  2006              MOVS     r0,#6                 ;2449
000034  e7ee              B        |L28.20|
                  |L28.54|
000036  7ae8              LDRB     r0,[r5,#0xb]          ;2450
000038  f0000001          AND      r0,r0,#1              ;2450
00003c  b108              CBZ      r0,|L28.66|
00003e  2007              MOVS     r0,#7                 ;2451
000040  e7e8              B        |L28.20|
                  |L28.66|
000042  7ea9              LDRB     r1,[r5,#0x1a]         ;2452
000044  7ee8              LDRB     r0,[r5,#0x1b]         ;2452
000046  ea412100          ORR      r1,r1,r0,LSL #8       ;2452
00004a  7d2a              LDRB     r2,[r5,#0x14]         ;2452
00004c  7d68              LDRB     r0,[r5,#0x15]         ;2452
00004e  ea422000          ORR      r0,r2,r0,LSL #8       ;2452
000052  ea414600          ORR      r6,r1,r0,LSL #16      ;2452
000056  7ae8              LDRB     r0,[r5,#0xb]          ;2454
000058  f0000010          AND      r0,r0,#0x10           ;2454
00005c  b1d8              CBZ      r0,|L28.150|
00005e  2e02              CMP      r6,#2                 ;2455
000060  d201              BCS      |L28.102|
000062  2002              MOVS     r0,#2                 ;2455
000064  e7d6              B        |L28.20|
                  |L28.102|
000066  221c              MOVS     r2,#0x1c              ;2456
000068  a90a              ADD      r1,sp,#0x28           ;2456
00006a  a803              ADD      r0,sp,#0xc            ;2456
00006c  f7fffffe          BL       mem_cpy
000070  9605              STR      r6,[sp,#0x14]         ;2457
000072  2102              MOVS     r1,#2                 ;2458
000074  a803              ADD      r0,sp,#0xc            ;2458
000076  f7fffffe          BL       dir_seek
00007a  4604              MOV      r4,r0                 ;2458
00007c  b10c              CBZ      r4,|L28.130|
00007e  4620              MOV      r0,r4                 ;2459
000080  e7c8              B        |L28.20|
                  |L28.130|
000082  a803              ADD      r0,sp,#0xc            ;2460
000084  f7fffffe          BL       dir_read
000088  4604              MOV      r4,r0                 ;2460
00008a  b904              CBNZ     r4,|L28.142|
00008c  2407              MOVS     r4,#7                 ;2461
                  |L28.142|
00008e  2c04              CMP      r4,#4                 ;2462
000090  d001              BEQ      |L28.150|
000092  4620              MOV      r0,r4                 ;2462
000094  e7be              B        |L28.20|
                  |L28.150|
000096  a80a              ADD      r0,sp,#0x28           ;2465
000098  f7fffffe          BL       dir_remove
00009c  4604              MOV      r4,r0                 ;2465
00009e  b954              CBNZ     r4,|L28.182|
0000a0  b126              CBZ      r6,|L28.172|
0000a2  4631              MOV      r1,r6                 ;2468
0000a4  980a              LDR      r0,[sp,#0x28]         ;2468
0000a6  f7fffffe          BL       remove_chain
0000aa  4604              MOV      r4,r0                 ;2468
                  |L28.172|
0000ac  b91c              CBNZ     r4,|L28.182|
0000ae  980a              LDR      r0,[sp,#0x28]         ;2469
0000b0  f7fffffe          BL       sync
0000b4  4604              MOV      r4,r0                 ;2469
                  |L28.182|
0000b6  4620              MOV      r0,r4                 ;2472
0000b8  e7ac              B        |L28.20|
;;;2474   
                          ENDP


                          AREA ||i.f_utime||, CODE, READONLY, ALIGN=1

                  f_utime PROC
;;;2601   
;;;2602   FRESULT f_utime (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;2603   	const XCHAR *path,	/* Pointer to the file/directory name */
;;;2604   	const FILINFO *fno	/* Pointer to the timestamp to be set */
;;;2605   )
;;;2606   {
000002  b08a              SUB      sp,sp,#0x28
000004  460d              MOV      r5,r1
;;;2607   	FRESULT res;
;;;2608   	DIR dj;
;;;2609   	NAMEBUF(sfn, lfn);
;;;2610   	BYTE *dir;
;;;2611   
;;;2612   
;;;2613   	res = chk_mounted(&path, &dj.fs, 1);
000006  2201              MOVS     r2,#1
000008  a903              ADD      r1,sp,#0xc
00000a  a80a              ADD      r0,sp,#0x28
00000c  f7fffffe          BL       chk_mounted
000010  4606              MOV      r6,r0
;;;2614   	if (res == FR_OK) {
000012  b9ee              CBNZ     r6,|L29.80|
;;;2615   		INITBUF(dj, sfn, lfn);
000014  f8cdd024          STR      sp,[sp,#0x24]
;;;2616   		res = follow_path(&dj, path);	/* Follow the file path */
000018  a803              ADD      r0,sp,#0xc
00001a  990a              LDR      r1,[sp,#0x28]
00001c  f7fffffe          BL       follow_path
000020  4606              MOV      r6,r0
;;;2617   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
000022  bf00              NOP      
;;;2618   			res = FR_INVALID_NAME;
;;;2619   		if (res == FR_OK) {
000024  b9a6              CBNZ     r6,|L29.80|
;;;2620   			dir = dj.dir;
000026  9c08              LDR      r4,[sp,#0x20]
;;;2621   			if (!dir) {				/* Root directory */
000028  b90c              CBNZ     r4,|L29.46|
;;;2622   				res = FR_INVALID_NAME;
00002a  2606              MOVS     r6,#6
00002c  e010              B        |L29.80|
                  |L29.46|
;;;2623   			} else {				/* File or sub-directory */
;;;2624   				ST_WORD(dir+DIR_WrtTime, fno->ftime);
00002e  79a8              LDRB     r0,[r5,#6]
000030  75a0              STRB     r0,[r4,#0x16]
000032  88e8              LDRH     r0,[r5,#6]
000034  1201              ASRS     r1,r0,#8
000036  75e1              STRB     r1,[r4,#0x17]
;;;2625   				ST_WORD(dir+DIR_WrtDate, fno->fdate);
000038  7928              LDRB     r0,[r5,#4]
00003a  7620              STRB     r0,[r4,#0x18]
00003c  88a8              LDRH     r0,[r5,#4]
00003e  1201              ASRS     r1,r0,#8
000040  7661              STRB     r1,[r4,#0x19]
;;;2626   				dj.fs->wflag = 1;
000042  2001              MOVS     r0,#1
000044  9903              LDR      r1,[sp,#0xc]
000046  7108              STRB     r0,[r1,#4]
;;;2627   				res = sync(dj.fs);
000048  9803              LDR      r0,[sp,#0xc]
00004a  f7fffffe          BL       sync
00004e  4606              MOV      r6,r0
                  |L29.80|
;;;2628   			}
;;;2629   		}
;;;2630   	}
;;;2631   
;;;2632   	LEAVE_FF(dj.fs, res);
000050  4630              MOV      r0,r6
;;;2633   }
000052  b00c              ADD      sp,sp,#0x30
000054  bd70              POP      {r4-r6,pc}
;;;2634   
                          ENDP


                          AREA ||i.f_write||, CODE, READONLY, ALIGN=1

                  f_write PROC
;;;1857   
;;;1858   FRESULT f_write (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1859   	FIL *fp,			/* Pointer to the file object */
;;;1860   	const void *buff,	/* Pointer to the data to be written */
;;;1861   	UINT btw,			/* Number of bytes to write */
;;;1862   	UINT *bw			/* Pointer to number of bytes written */
;;;1863   )
;;;1864   {
000004  b081              SUB      sp,sp,#4
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
;;;1865   	FRESULT res;
;;;1866   	DWORD clst, sect;
;;;1867   	UINT wcnt, cc;
;;;1868   	const BYTE *wbuff = buff;
00000c  f8ddb008          LDR      r11,[sp,#8]
;;;1869   
;;;1870   
;;;1871   	*bw = 0;	/* Initialize bytes written */
000010  2000              MOVS     r0,#0
000012  f8ca0000          STR      r0,[r10,#0]
;;;1872   
;;;1873   	res = validate(fp->fs, fp->id);					/* Check validity of the object */
000016  88a1              LDRH     r1,[r4,#4]
000018  6820              LDR      r0,[r4,#0]
00001a  f7fffffe          BL       validate
00001e  9000              STR      r0,[sp,#0]
;;;1874   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000020  9800              LDR      r0,[sp,#0]
000022  b118              CBZ      r0,|L30.44|
000024  9800              LDR      r0,[sp,#0]
                  |L30.38|
;;;1875   	if (fp->flag & FA__ERROR)						/* Check abort flag */
;;;1876   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;1877   	if (!(fp->flag & FA_WRITE))						/* Check access mode */
;;;1878   		LEAVE_FF(fp->fs, FR_DENIED);
;;;1879   	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
;;;1880   
;;;1881   	for ( ;  btw;									/* Repeat until all data transferred */
;;;1882   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;1883   		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
;;;1884   			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
;;;1885   				if (fp->fptr == 0) {				/* On the top of the file? */
;;;1886   					clst = fp->org_clust;			/* Follow from the origin */
;;;1887   					if (clst == 0)					/* When there is no cluster chain, */
;;;1888   						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;1889   				} else {							/* Middle or end of the file */
;;;1890   					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
;;;1891   				}
;;;1892   				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
;;;1893   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;1894   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;1895   				fp->curr_clust = clst;				/* Update current cluster */
;;;1896   				fp->csect = 0;						/* Reset sector address in the cluster */
;;;1897   			}
;;;1898   #if _FS_TINY
;;;1899   			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
;;;1900   				ABORT(fp->fs, FR_DISK_ERR);
;;;1901   #else
;;;1902   			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
;;;1903   				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
;;;1904   					ABORT(fp->fs, FR_DISK_ERR);
;;;1905   				fp->flag &= ~FA__DIRTY;
;;;1906   			}
;;;1907   #endif
;;;1908   			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
;;;1909   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;1910   			sect += fp->csect;
;;;1911   			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
;;;1912   			if (cc) {								/* Write maximum contiguous sectors directly */
;;;1913   				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;1914   					cc = fp->fs->csize - fp->csect;
;;;1915   				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
;;;1916   					ABORT(fp->fs, FR_DISK_ERR);
;;;1917   #if _FS_TINY
;;;1918   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
;;;1919   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;1920   					fp->fs->wflag = 0;
;;;1921   				}
;;;1922   #else
;;;1923   				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
;;;1924   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;1925   					fp->flag &= ~FA__DIRTY;
;;;1926   				}
;;;1927   #endif
;;;1928   				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
;;;1929   				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
;;;1930   				continue;
;;;1931   			}
;;;1932   #if _FS_TINY
;;;1933   			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
;;;1934   				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
;;;1935   				fp->fs->winsect = sect;
;;;1936   			}
;;;1937   #else
;;;1938   			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
;;;1939   				if (fp->fptr < fp->fsize &&
;;;1940   					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
;;;1941   						ABORT(fp->fs, FR_DISK_ERR);
;;;1942   			}
;;;1943   #endif
;;;1944   			fp->dsect = sect;
;;;1945   			fp->csect++;							/* Next sector address in the cluster */
;;;1946   		}
;;;1947   		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
;;;1948   		if (wcnt > btw) wcnt = btw;
;;;1949   #if _FS_TINY
;;;1950   		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
;;;1951   			ABORT(fp->fs, FR_DISK_ERR);
;;;1952   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;1953   		fp->fs->wflag = 1;
;;;1954   #else
;;;1955   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;1956   		fp->flag |= FA__DIRTY;
;;;1957   #endif
;;;1958   	}
;;;1959   
;;;1960   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;1961   	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
;;;1962   
;;;1963   	LEAVE_FF(fp->fs, FR_OK);
;;;1964   }
000026  b005              ADD      sp,sp,#0x14
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L30.44|
00002c  79a0              LDRB     r0,[r4,#6]            ;1875
00002e  f0000080          AND      r0,r0,#0x80           ;1875
000032  b108              CBZ      r0,|L30.56|
000034  2002              MOVS     r0,#2                 ;1876
000036  e7f6              B        |L30.38|
                  |L30.56|
000038  79a0              LDRB     r0,[r4,#6]            ;1877
00003a  f0000002          AND      r0,r0,#2              ;1877
00003e  b908              CBNZ     r0,|L30.68|
000040  2007              MOVS     r0,#7                 ;1878
000042  e7f0              B        |L30.38|
                  |L30.68|
000044  68e0              LDR      r0,[r4,#0xc]          ;1879
000046  4428              ADD      r0,r0,r5              ;1879
000048  68e1              LDR      r1,[r4,#0xc]          ;1879
00004a  4288              CMP      r0,r1                 ;1879
00004c  d200              BCS      |L30.80|
00004e  2500              MOVS     r5,#0                 ;1879
                  |L30.80|
000050  e0ce              B        |L30.496|
                  |L30.82|
000052  8920              LDRH     r0,[r4,#8]            ;1883
000054  f3c00008          UBFX     r0,r0,#0,#9           ;1883
000058  2800              CMP      r0,#0                 ;1883
00005a  d175              BNE      |L30.328|
00005c  79e0              LDRB     r0,[r4,#7]            ;1884
00005e  6821              LDR      r1,[r4,#0]            ;1884
000060  7889              LDRB     r1,[r1,#2]            ;1884
000062  4288              CMP      r0,r1                 ;1884
000064  db2c              BLT      |L30.192|
000066  68a0              LDR      r0,[r4,#8]            ;1885
000068  b958              CBNZ     r0,|L30.130|
00006a  f8d49010          LDR      r9,[r4,#0x10]         ;1886
00006e  f1b90f00          CMP      r9,#0                 ;1887
000072  d10b              BNE      |L30.140|
000074  2100              MOVS     r1,#0                 ;1888
000076  6820              LDR      r0,[r4,#0]            ;1888
000078  f7fffffe          BL       create_chain
00007c  4681              MOV      r9,r0                 ;1888
00007e  6120              STR      r0,[r4,#0x10]         ;1888
000080  e004              B        |L30.140|
                  |L30.130|
000082  6961              LDR      r1,[r4,#0x14]         ;1890
000084  6820              LDR      r0,[r4,#0]            ;1890
000086  f7fffffe          BL       create_chain
00008a  4681              MOV      r9,r0                 ;1890
                  |L30.140|
00008c  f1b90f00          CMP      r9,#0                 ;1892
000090  d100              BNE      |L30.148|
000092  e0b0              B        |L30.502|
                  |L30.148|
000094  f1b90f01          CMP      r9,#1                 ;1893
000098  d105              BNE      |L30.166|
00009a  79a0              LDRB     r0,[r4,#6]            ;1893
00009c  f0400080          ORR      r0,r0,#0x80           ;1893
0000a0  71a0              STRB     r0,[r4,#6]            ;1893
0000a2  2002              MOVS     r0,#2                 ;1893
0000a4  e7bf              B        |L30.38|
                  |L30.166|
0000a6  f1090001          ADD      r0,r9,#1              ;1894
0000aa  b928              CBNZ     r0,|L30.184|
0000ac  79a0              LDRB     r0,[r4,#6]            ;1894
0000ae  f0400080          ORR      r0,r0,#0x80           ;1894
0000b2  71a0              STRB     r0,[r4,#6]            ;1894
0000b4  2001              MOVS     r0,#1                 ;1894
0000b6  e7b6              B        |L30.38|
                  |L30.184|
0000b8  f8c49014          STR      r9,[r4,#0x14]         ;1895
0000bc  2000              MOVS     r0,#0                 ;1896
0000be  71e0              STRB     r0,[r4,#7]            ;1896
                  |L30.192|
0000c0  79a0              LDRB     r0,[r4,#6]            ;1902
0000c2  f0000040          AND      r0,r0,#0x40           ;1902
0000c6  b190              CBZ      r0,|L30.238|
0000c8  6821              LDR      r1,[r4,#0]            ;1903
0000ca  7848              LDRB     r0,[r1,#1]            ;1903
0000cc  2301              MOVS     r3,#1                 ;1903
0000ce  f1040124          ADD      r1,r4,#0x24           ;1903
0000d2  69a2              LDR      r2,[r4,#0x18]         ;1903
0000d4  f7fffffe          BL       disk_write
0000d8  b128              CBZ      r0,|L30.230|
0000da  79a0              LDRB     r0,[r4,#6]            ;1904
0000dc  f0400080          ORR      r0,r0,#0x80           ;1904
0000e0  71a0              STRB     r0,[r4,#6]            ;1904
0000e2  2001              MOVS     r0,#1                 ;1904
0000e4  e79f              B        |L30.38|
                  |L30.230|
0000e6  79a0              LDRB     r0,[r4,#6]            ;1905
0000e8  f0200040          BIC      r0,r0,#0x40           ;1905
0000ec  71a0              STRB     r0,[r4,#6]            ;1905
                  |L30.238|
0000ee  6961              LDR      r1,[r4,#0x14]         ;1908
0000f0  6820              LDR      r0,[r4,#0]            ;1908
0000f2  f7fffffe          BL       clust2sect
0000f6  4606              MOV      r6,r0                 ;1908
0000f8  b92e              CBNZ     r6,|L30.262|
0000fa  79a0              LDRB     r0,[r4,#6]            ;1909
0000fc  f0400080          ORR      r0,r0,#0x80           ;1909
000100  71a0              STRB     r0,[r4,#6]            ;1909
000102  2002              MOVS     r0,#2                 ;1909
000104  e78f              B        |L30.38|
                  |L30.262|
000106  79e0              LDRB     r0,[r4,#7]            ;1910
000108  4406              ADD      r6,r6,r0              ;1910
00010a  ea4f2855          LSR      r8,r5,#9              ;1911
00010e  f1b80f00          CMP      r8,#0                 ;1912
000112  d032              BEQ      |L30.378|
000114  79e0              LDRB     r0,[r4,#7]            ;1913
000116  4440              ADD      r0,r0,r8              ;1913
000118  6821              LDR      r1,[r4,#0]            ;1913
00011a  7889              LDRB     r1,[r1,#2]            ;1913
00011c  4288              CMP      r0,r1                 ;1913
00011e  d904              BLS      |L30.298|
000120  6820              LDR      r0,[r4,#0]            ;1914
000122  7880              LDRB     r0,[r0,#2]            ;1914
000124  79e1              LDRB     r1,[r4,#7]            ;1914
000126  eba00801          SUB      r8,r0,r1              ;1914
                  |L30.298|
00012a  f00803ff          AND      r3,r8,#0xff           ;1915
00012e  6821              LDR      r1,[r4,#0]            ;1915
000130  7848              LDRB     r0,[r1,#1]            ;1915
000132  4632              MOV      r2,r6                 ;1915
000134  4659              MOV      r1,r11                ;1915
000136  f7fffffe          BL       disk_write
00013a  b130              CBZ      r0,|L30.330|
00013c  79a0              LDRB     r0,[r4,#6]            ;1916
00013e  f0400080          ORR      r0,r0,#0x80           ;1916
000142  71a0              STRB     r0,[r4,#6]            ;1916
000144  2001              MOVS     r0,#1                 ;1916
000146  e76e              B        |L30.38|
                  |L30.328|
000148  e031              B        |L30.430|
                  |L30.330|
00014a  69a0              LDR      r0,[r4,#0x18]         ;1923
00014c  1b80              SUBS     r0,r0,r6              ;1923
00014e  4540              CMP      r0,r8                 ;1923
000150  d20d              BCS      |L30.366|
000152  69a0              LDR      r0,[r4,#0x18]         ;1924
000154  1b80              SUBS     r0,r0,r6              ;1924
000156  eb0b2140          ADD      r1,r11,r0,LSL #9      ;1924
00015a  f44f7200          MOV      r2,#0x200             ;1924
00015e  f1040024          ADD      r0,r4,#0x24           ;1924
000162  f7fffffe          BL       mem_cpy
000166  79a0              LDRB     r0,[r4,#6]            ;1925
000168  f0200040          BIC      r0,r0,#0x40           ;1925
00016c  71a0              STRB     r0,[r4,#6]            ;1925
                  |L30.366|
00016e  79e0              LDRB     r0,[r4,#7]            ;1928
000170  4440              ADD      r0,r0,r8              ;1928
000172  71e0              STRB     r0,[r4,#7]            ;1928
000174  ea4f2748          LSL      r7,r8,#9              ;1929
000178  e030              B        |L30.476|
                  |L30.378|
00017a  69a0              LDR      r0,[r4,#0x18]         ;1938
00017c  42b0              CMP      r0,r6                 ;1938
00017e  d012              BEQ      |L30.422|
000180  e9d40102          LDRD     r0,r1,[r4,#8]         ;1939
000184  4288              CMP      r0,r1                 ;1939
000186  d20e              BCS      |L30.422|
000188  6821              LDR      r1,[r4,#0]            ;1940
00018a  7848              LDRB     r0,[r1,#1]            ;1940
00018c  2301              MOVS     r3,#1                 ;1940
00018e  4632              MOV      r2,r6                 ;1940
000190  f1040124          ADD      r1,r4,#0x24           ;1940
000194  f7fffffe          BL       disk_read
000198  b128              CBZ      r0,|L30.422|
00019a  79a0              LDRB     r0,[r4,#6]            ;1941
00019c  f0400080          ORR      r0,r0,#0x80           ;1941
0001a0  71a0              STRB     r0,[r4,#6]            ;1941
0001a2  2001              MOVS     r0,#1                 ;1941
0001a4  e73f              B        |L30.38|
                  |L30.422|
0001a6  61a6              STR      r6,[r4,#0x18]         ;1944
0001a8  79e0              LDRB     r0,[r4,#7]            ;1945
0001aa  1c40              ADDS     r0,r0,#1              ;1945
0001ac  71e0              STRB     r0,[r4,#7]            ;1945
                  |L30.430|
0001ae  8920              LDRH     r0,[r4,#8]            ;1947
0001b0  f3c00008          UBFX     r0,r0,#0,#9           ;1947
0001b4  f5c07700          RSB      r7,r0,#0x200          ;1947
0001b8  42af              CMP      r7,r5                 ;1948
0001ba  d900              BLS      |L30.446|
0001bc  462f              MOV      r7,r5                 ;1948
                  |L30.446|
0001be  8921              LDRH     r1,[r4,#8]            ;1955
0001c0  f3c10208          UBFX     r2,r1,#0,#9           ;1955
0001c4  f1040124          ADD      r1,r4,#0x24           ;1955
0001c8  1850              ADDS     r0,r2,r1              ;1955
0001ca  463a              MOV      r2,r7                 ;1955
0001cc  4659              MOV      r1,r11                ;1955
0001ce  f7fffffe          BL       mem_cpy
0001d2  79a0              LDRB     r0,[r4,#6]            ;1956
0001d4  f0400040          ORR      r0,r0,#0x40           ;1956
0001d8  71a0              STRB     r0,[r4,#6]            ;1956
0001da  bf00              NOP                            ;1930
                  |L30.476|
0001dc  44bb              ADD      r11,r11,r7            ;1882
0001de  68a0              LDR      r0,[r4,#8]            ;1882
0001e0  4438              ADD      r0,r0,r7              ;1882
0001e2  60a0              STR      r0,[r4,#8]            ;1882
0001e4  f8da0000          LDR      r0,[r10,#0]           ;1882
0001e8  4438              ADD      r0,r0,r7              ;1882
0001ea  f8ca0000          STR      r0,[r10,#0]           ;1882
0001ee  1bed              SUBS     r5,r5,r7              ;1882
                  |L30.496|
0001f0  2d00              CMP      r5,#0                 ;1881
0001f2  f47faf2e          BNE      |L30.82|
                  |L30.502|
0001f6  bf00              NOP                            ;1892
0001f8  e9d40102          LDRD     r0,r1,[r4,#8]         ;1960
0001fc  4288              CMP      r0,r1                 ;1960
0001fe  d901              BLS      |L30.516|
000200  68a0              LDR      r0,[r4,#8]            ;1960
000202  60e0              STR      r0,[r4,#0xc]          ;1960
                  |L30.516|
000204  79a0              LDRB     r0,[r4,#6]            ;1961
000206  f0400020          ORR      r0,r0,#0x20           ;1961
00020a  71a0              STRB     r0,[r4,#6]            ;1961
00020c  2000              MOVS     r0,#0                 ;1963
00020e  e70a              B        |L30.38|
;;;1965   
                          ENDP


                          AREA ||i.follow_path||, CODE, READONLY, ALIGN=1

                  follow_path PROC
;;;1380   static
;;;1381   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;1382   	DIR *dj,			/* Directory object to return last directory and found object */
;;;1383   	const XCHAR *path	/* Full-path string to find a file or directory */
;;;1384   )
;;;1385   {
000004  4604              MOV      r4,r0
;;;1386   	FRESULT res;
;;;1387   	BYTE *dir, last;
;;;1388   
;;;1389   
;;;1390   	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
000006  e002              B        |L31.14|
                  |L31.8|
000008  9801              LDR      r0,[sp,#4]
00000a  1c40              ADDS     r0,r0,#1
00000c  9001              STR      r0,[sp,#4]
                  |L31.14|
00000e  9801              LDR      r0,[sp,#4]
000010  7800              LDRB     r0,[r0,#0]
000012  2820              CMP      r0,#0x20
000014  d0f8              BEQ      |L31.8|
;;;1391   #if _FS_RPATH
;;;1392   	if (*path == '/' || *path == '\\') { /* There is a heading separator */
;;;1393   		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
;;;1394   	} else {							/* No heading saparator */
;;;1395   		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
;;;1396   	}
;;;1397   #else
;;;1398   	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
000016  9801              LDR      r0,[sp,#4]
000018  7800              LDRB     r0,[r0,#0]
00001a  282f              CMP      r0,#0x2f
00001c  d003              BEQ      |L31.38|
00001e  9801              LDR      r0,[sp,#4]
000020  7800              LDRB     r0,[r0,#0]
000022  285c              CMP      r0,#0x5c
000024  d102              BNE      |L31.44|
                  |L31.38|
;;;1399   		path++;
000026  9801              LDR      r0,[sp,#4]
000028  1c40              ADDS     r0,r0,#1
00002a  9001              STR      r0,[sp,#4]
                  |L31.44|
;;;1400   	dj->sclust = 0;						/* Start from the root dir */
00002c  2000              MOVS     r0,#0
00002e  60a0              STR      r0,[r4,#8]
;;;1401   #endif
;;;1402   
;;;1403   	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
000030  9801              LDR      r0,[sp,#4]
000032  7800              LDRB     r0,[r0,#0]
000034  2820              CMP      r0,#0x20
000036  d207              BCS      |L31.72|
;;;1404   		res = dir_seek(dj, 0);
000038  2100              MOVS     r1,#0
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       dir_seek
000040  4606              MOV      r6,r0
;;;1405   		dj->dir = NULL;
000042  2000              MOVS     r0,#0
000044  6160              STR      r0,[r4,#0x14]
000046  e02b              B        |L31.160|
                  |L31.72|
;;;1406   
;;;1407   	} else {							/* Follow path */
;;;1408   		for (;;) {
000048  bf00              NOP      
                  |L31.74|
;;;1409   			res = create_name(dj, &path);	/* Get a segment */
00004a  a901              ADD      r1,sp,#4
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       create_name
000052  4606              MOV      r6,r0
;;;1410   			if (res != FR_OK) break;
000054  b106              CBZ      r6,|L31.88|
000056  e022              B        |L31.158|
                  |L31.88|
;;;1411   			res = dir_find(dj);				/* Find it */
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       dir_find
00005e  4606              MOV      r6,r0
;;;1412   			last = *(dj->fn+NS) & NS_LAST;
000060  69a0              LDR      r0,[r4,#0x18]
000062  7ac0              LDRB     r0,[r0,#0xb]
000064  f0000704          AND      r7,r0,#4
;;;1413   			if (res != FR_OK) {				/* Could not find the object */
000068  b126              CBZ      r6,|L31.116|
;;;1414   				if (res == FR_NO_FILE && !last)
00006a  2e04              CMP      r6,#4
00006c  d101              BNE      |L31.114|
00006e  b907              CBNZ     r7,|L31.114|
;;;1415   					res = FR_NO_PATH;
000070  2605              MOVS     r6,#5
                  |L31.114|
;;;1416   				break;
000072  e014              B        |L31.158|
                  |L31.116|
;;;1417   			}
;;;1418   			if (last) break;				/* Last segment match. Function completed. */
000074  b107              CBZ      r7,|L31.120|
000076  e012              B        |L31.158|
                  |L31.120|
;;;1419   			dir = dj->dir;					/* There is next segment. Follow the sub directory */
000078  6965              LDR      r5,[r4,#0x14]
;;;1420   			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
00007a  7ae8              LDRB     r0,[r5,#0xb]
00007c  f0000010          AND      r0,r0,#0x10
000080  b908              CBNZ     r0,|L31.134|
;;;1421   				res = FR_NO_PATH; break;
000082  2605              MOVS     r6,#5
000084  e00b              B        |L31.158|
                  |L31.134|
;;;1422   			}
;;;1423   			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
000086  7ea9              LDRB     r1,[r5,#0x1a]
000088  7ee8              LDRB     r0,[r5,#0x1b]
00008a  ea412100          ORR      r1,r1,r0,LSL #8
00008e  7d2a              LDRB     r2,[r5,#0x14]
000090  7d68              LDRB     r0,[r5,#0x15]
000092  ea422000          ORR      r0,r2,r0,LSL #8
000096  ea414000          ORR      r0,r1,r0,LSL #16
00009a  60a0              STR      r0,[r4,#8]
00009c  e7d5              B        |L31.74|
                  |L31.158|
00009e  bf00              NOP                            ;1410
                  |L31.160|
;;;1424   		}
;;;1425   	}
;;;1426   
;;;1427   	return res;
0000a0  4630              MOV      r0,r6
;;;1428   }
0000a2  e8bd81fc          POP      {r2-r8,pc}
;;;1429   
                          ENDP


                          AREA ||i.get_fat||, CODE, READONLY, ALIGN=1

                  get_fat PROC
;;;322    
;;;323    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;324    	FATFS *fs,	/* File system object */
;;;325    	DWORD clst	/* Cluster# to get the link information */
;;;326    )
;;;327    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;328    	UINT wc, bc;
;;;329    	DWORD fsect;
;;;330    
;;;331    
;;;332    	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
000008  2c02              CMP      r4,#2
00000a  d302              BCC      |L32.18|
00000c  69e8              LDR      r0,[r5,#0x1c]
00000e  42a0              CMP      r0,r4
000010  d802              BHI      |L32.24|
                  |L32.18|
;;;333    		return 1;
000012  2001              MOVS     r0,#1
                  |L32.20|
;;;334    
;;;335    	fsect = fs->fatbase;
;;;336    	switch (fs->fs_type) {
;;;337    	case FS_FAT12 :
;;;338    		bc = clst; bc += bc / 2;
;;;339    		if (move_window(fs, fsect + (bc / SS(fs)))) break;
;;;340    		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
;;;341    		if (move_window(fs, fsect + (bc / SS(fs)))) break;
;;;342    		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
;;;343    		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
;;;344    
;;;345    	case FS_FAT16 :
;;;346    		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
;;;347    		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
;;;348    
;;;349    	case FS_FAT32 :
;;;350    		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
;;;351    		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
;;;352    	}
;;;353    
;;;354    	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
;;;355    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L32.24|
000018  6a2f              LDR      r7,[r5,#0x20]         ;335
00001a  7828              LDRB     r0,[r5,#0]            ;336
00001c  2801              CMP      r0,#1                 ;336
00001e  d004              BEQ      |L32.42|
000020  2802              CMP      r0,#2                 ;336
000022  d02a              BEQ      |L32.122|
000024  2803              CMP      r0,#3                 ;336
000026  d170              BNE      |L32.266|
000028  e040              B        |L32.172|
                  |L32.42|
00002a  4626              MOV      r6,r4                 ;338
00002c  eb060656          ADD      r6,r6,r6,LSR #1       ;338
000030  eb072156          ADD      r1,r7,r6,LSR #9       ;339
000034  4628              MOV      r0,r5                 ;339
000036  f7fffffe          BL       move_window
00003a  b100              CBZ      r0,|L32.62|
00003c  e065              B        |L32.266|
                  |L32.62|
00003e  f3c60108          UBFX     r1,r6,#0,#9           ;340
000042  f1050030          ADD      r0,r5,#0x30           ;340
000046  f8108001          LDRB     r8,[r0,r1]            ;340
00004a  1c76              ADDS     r6,r6,#1              ;340
00004c  eb072156          ADD      r1,r7,r6,LSR #9       ;341
000050  4628              MOV      r0,r5                 ;341
000052  f7fffffe          BL       move_window
000056  b100              CBZ      r0,|L32.90|
000058  e057              B        |L32.266|
                  |L32.90|
00005a  f3c60108          UBFX     r1,r6,#0,#9           ;342
00005e  f1050030          ADD      r0,r5,#0x30           ;342
000062  5c40              LDRB     r0,[r0,r1]            ;342
000064  ea482800          ORR      r8,r8,r0,LSL #8       ;342
000068  f0040001          AND      r0,r4,#1              ;343
00006c  b110              CBZ      r0,|L32.116|
00006e  ea4f1018          LSR      r0,r8,#4              ;343
000072  e7cf              B        |L32.20|
                  |L32.116|
000074  f3c8000b          UBFX     r0,r8,#0,#12          ;343
000078  e7cc              B        |L32.20|
                  |L32.122|
00007a  eb072114          ADD      r1,r7,r4,LSR #8       ;346
00007e  4628              MOV      r0,r5                 ;346
000080  f7fffffe          BL       move_window
000084  b100              CBZ      r0,|L32.136|
000086  e040              B        |L32.266|
                  |L32.136|
000088  f24010ff          MOV      r0,#0x1ff             ;347
00008c  ea000144          AND      r1,r0,r4,LSL #1       ;347
000090  f1050030          ADD      r0,r5,#0x30           ;347
000094  5c41              LDRB     r1,[r0,r1]            ;347
000096  f24010ff          MOV      r0,#0x1ff             ;347
00009a  ea000244          AND      r2,r0,r4,LSL #1       ;347
00009e  f1050030          ADD      r0,r5,#0x30           ;347
0000a2  4410              ADD      r0,r0,r2              ;347
0000a4  7840              LDRB     r0,[r0,#1]            ;347
0000a6  ea412000          ORR      r0,r1,r0,LSL #8       ;347
0000aa  e7b3              B        |L32.20|
                  |L32.172|
0000ac  eb0711d4          ADD      r1,r7,r4,LSR #7       ;350
0000b0  4628              MOV      r0,r5                 ;350
0000b2  f7fffffe          BL       move_window
0000b6  b100              CBZ      r0,|L32.186|
0000b8  e027              B        |L32.266|
                  |L32.186|
0000ba  f24010ff          MOV      r0,#0x1ff             ;351
0000be  ea000184          AND      r1,r0,r4,LSL #2       ;351
0000c2  f1050030          ADD      r0,r5,#0x30           ;351
0000c6  4408              ADD      r0,r0,r1              ;351
0000c8  78c0              LDRB     r0,[r0,#3]            ;351
0000ca  0601              LSLS     r1,r0,#24             ;351
0000cc  f24010ff          MOV      r0,#0x1ff             ;351
0000d0  ea000284          AND      r2,r0,r4,LSL #2       ;351
0000d4  f1050030          ADD      r0,r5,#0x30           ;351
0000d8  4410              ADD      r0,r0,r2              ;351
0000da  7880              LDRB     r0,[r0,#2]            ;351
0000dc  ea414100          ORR      r1,r1,r0,LSL #16      ;351
0000e0  f24010ff          MOV      r0,#0x1ff             ;351
0000e4  ea000284          AND      r2,r0,r4,LSL #2       ;351
0000e8  f1050030          ADD      r0,r5,#0x30           ;351
0000ec  4410              ADD      r0,r0,r2              ;351
0000ee  7840              LDRB     r0,[r0,#1]            ;351
0000f0  ea412000          ORR      r0,r1,r0,LSL #8       ;351
0000f4  f24011ff          MOV      r1,#0x1ff             ;351
0000f8  ea010284          AND      r2,r1,r4,LSL #2       ;351
0000fc  f1050130          ADD      r1,r5,#0x30           ;351
000100  5c89              LDRB     r1,[r1,r2]            ;351
000102  4308              ORRS     r0,r0,r1              ;351
000104  f0204070          BIC      r0,r0,#0xf0000000     ;351
000108  e784              B        |L32.20|
                  |L32.266|
00010a  bf00              NOP                            ;339
00010c  f04f30ff          MOV      r0,#0xffffffff        ;354
000110  e780              B        |L32.20|
;;;356    
                          ENDP


                          AREA ||i.get_fileinfo||, CODE, READONLY, ALIGN=1

                  get_fileinfo PROC
;;;1310   static
;;;1311   void get_fileinfo (		/* No return code */
000000  b5f0              PUSH     {r4-r7,lr}
;;;1312   	DIR *dj,			/* Pointer to the directory object */
;;;1313   	FILINFO *fno	 	/* Pointer to the file information to be filled */
;;;1314   )
;;;1315   {
000002  4605              MOV      r5,r0
000004  460b              MOV      r3,r1
;;;1316   	int i;
;;;1317   	BYTE c, nt, *dir;
;;;1318   	char *p;
;;;1319   
;;;1320   
;;;1321   	p = fno->fname;
000006  f1030209          ADD      r2,r3,#9
;;;1322   	if (dj->sect) {
00000a  692f              LDR      r7,[r5,#0x10]
00000c  2f00              CMP      r7,#0
00000e  d040              BEQ      |L33.146|
;;;1323   		dir = dj->dir;
000010  6968              LDR      r0,[r5,#0x14]
;;;1324   		nt = dir[DIR_NTres];		/* NT flag */
000012  7b06              LDRB     r6,[r0,#0xc]
;;;1325   		for (i = 0; i < 8; i++) {	/* Copy name body */
000014  2100              MOVS     r1,#0
000016  e00a              B        |L33.46|
                  |L33.24|
;;;1326   			c = dir[i];
000018  5c44              LDRB     r4,[r0,r1]
;;;1327   			if (c == ' ') break;
00001a  2c20              CMP      r4,#0x20
00001c  d100              BNE      |L33.32|
00001e  e008              B        |L33.50|
                  |L33.32|
;;;1328   			if (c == 0x05) c = 0xE5;
000020  2c05              CMP      r4,#5
000022  d100              BNE      |L33.38|
000024  24e5              MOVS     r4,#0xe5
                  |L33.38|
;;;1329   			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
000026  bf00              NOP      
;;;1330   			*p++ = c;
000028  f8024b01          STRB     r4,[r2],#1
00002c  1c49              ADDS     r1,r1,#1              ;1325
                  |L33.46|
00002e  2908              CMP      r1,#8                 ;1325
000030  dbf2              BLT      |L33.24|
                  |L33.50|
000032  bf00              NOP                            ;1327
;;;1331   		}
;;;1332   		if (dir[8] != ' ') {		/* Copy name extension */
000034  7a07              LDRB     r7,[r0,#8]
000036  2f20              CMP      r7,#0x20
000038  d00f              BEQ      |L33.90|
;;;1333   			*p++ = '.';
00003a  272e              MOVS     r7,#0x2e
00003c  f8027b01          STRB     r7,[r2],#1
;;;1334   			for (i = 8; i < 11; i++) {
000040  2108              MOVS     r1,#8
000042  e007              B        |L33.84|
                  |L33.68|
;;;1335   				c = dir[i];
000044  5c44              LDRB     r4,[r0,r1]
;;;1336   				if (c == ' ') break;
000046  2c20              CMP      r4,#0x20
000048  d100              BNE      |L33.76|
00004a  e005              B        |L33.88|
                  |L33.76|
;;;1337   				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
00004c  bf00              NOP      
;;;1338   				*p++ = c;
00004e  f8024b01          STRB     r4,[r2],#1
000052  1c49              ADDS     r1,r1,#1              ;1334
                  |L33.84|
000054  290b              CMP      r1,#0xb               ;1334
000056  dbf5              BLT      |L33.68|
                  |L33.88|
000058  bf00              NOP                            ;1336
                  |L33.90|
;;;1339   			}
;;;1340   		}
;;;1341   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
00005a  7ac7              LDRB     r7,[r0,#0xb]
00005c  721f              STRB     r7,[r3,#8]
;;;1342   		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
00005e  7fc7              LDRB     r7,[r0,#0x1f]
000060  ea4f6c07          LSL      r12,r7,#24
000064  7f87              LDRB     r7,[r0,#0x1e]
000066  ea4c4c07          ORR      r12,r12,r7,LSL #16
00006a  7f47              LDRB     r7,[r0,#0x1d]
00006c  ea4c2707          ORR      r7,r12,r7,LSL #8
000070  f890c01c          LDRB     r12,[r0,#0x1c]
000074  ea47070c          ORR      r7,r7,r12
000078  601f              STR      r7,[r3,#0]
;;;1343   		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
00007a  f890c018          LDRB     r12,[r0,#0x18]
00007e  7e47              LDRB     r7,[r0,#0x19]
000080  ea4c2707          ORR      r7,r12,r7,LSL #8
000084  809f              STRH     r7,[r3,#4]
;;;1344   		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
000086  f890c016          LDRB     r12,[r0,#0x16]
00008a  7dc7              LDRB     r7,[r0,#0x17]
00008c  ea4c2707          ORR      r7,r12,r7,LSL #8
000090  80df              STRH     r7,[r3,#6]
                  |L33.146|
;;;1345   	}
;;;1346   	*p = 0;
000092  2700              MOVS     r7,#0
000094  7017              STRB     r7,[r2,#0]
;;;1347   
;;;1348   #if _USE_LFN
;;;1349   	if (fno->lfname) {
;;;1350   		XCHAR *tp = fno->lfname;
;;;1351   		WCHAR w, *lfn;
;;;1352   
;;;1353   		i = 0;
;;;1354   		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
;;;1355   			lfn = dj->lfn;
;;;1356   			while ((w = *lfn++) != 0) {			/* Get an LFN char */
;;;1357   #if !_LFN_UNICODE
;;;1358   				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
;;;1359   				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
;;;1360   				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
;;;1361   					tp[i++] = (XCHAR)(w >> 8);
;;;1362   #endif
;;;1363   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overrun, no LFN */
;;;1364   				tp[i++] = (XCHAR)w;
;;;1365   			}
;;;1366   		}
;;;1367   		tp[i] = 0;	/* Terminator */
;;;1368   	}
;;;1369   #endif
;;;1370   }
000096  bdf0              POP      {r4-r7,pc}
;;;1371   #endif /* _FS_MINIMIZE <= 1 */
                          ENDP


                          AREA ||i.mem_cmp||, CODE, READONLY, ALIGN=1

                  mem_cmp PROC
;;;190    static
;;;191    int mem_cmp (const void* dst, const void* src, int cnt) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;192    	const char *d = (const char *)dst, *s = (const char *)src;
000004  461c              MOV      r4,r3
000006  460d              MOV      r5,r1
;;;193    	int r = 0;
000008  2000              MOVS     r0,#0
;;;194    	while (cnt-- && (r = *d++ - *s++) == 0) ;
00000a  bf00              NOP      
                  |L34.12|
00000c  1e16              SUBS     r6,r2,#0
00000e  f1a20201          SUB      r2,r2,#1
000012  d007              BEQ      |L34.36|
000014  f8147b01          LDRB     r7,[r4],#1
000018  f815cb01          LDRB     r12,[r5],#1
00001c  eba7060c          SUB      r6,r7,r12
000020  1e30              SUBS     r0,r6,#0
000022  d0f3              BEQ      |L34.12|
                  |L34.36|
;;;195    	return r;
;;;196    }
000024  bdf0              POP      {r4-r7,pc}
;;;197    
                          ENDP


                          AREA ||i.mem_cpy||, CODE, READONLY, ALIGN=1

                  mem_cpy PROC
;;;175    static
;;;176    void mem_cpy (void* dst, const void* src, int cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;177    	char *d = (char*)dst;
000002  4603              MOV      r3,r0
;;;178    	const char *s = (const char *)src;
000004  460c              MOV      r4,r1
;;;179    	while (cnt--) *d++ = *s++;
000006  e003              B        |L35.16|
                  |L35.8|
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L35.16|
000010  1e15              SUBS     r5,r2,#0
000012  f1a20201          SUB      r2,r2,#1
000016  d1f7              BNE      |L35.8|
;;;180    }
000018  bd70              POP      {r4-r6,pc}
;;;181    
                          ENDP


                          AREA ||i.mem_set||, CODE, READONLY, ALIGN=1

                  mem_set PROC
;;;183    static
;;;184    void mem_set (void* dst, int val, int cnt) {
000000  b530              PUSH     {r4,r5,lr}
;;;185    	char *d = (char*)dst;
000002  4603              MOV      r3,r0
;;;186    	while (cnt--) *d++ = (char)val;
000004  e001              B        |L36.10|
                  |L36.6|
000006  f8031b01          STRB     r1,[r3],#1
                  |L36.10|
00000a  1e14              SUBS     r4,r2,#0
00000c  f1a20201          SUB      r2,r2,#1
000010  d1f9              BNE      |L36.6|
;;;187    }
000012  bd30              POP      {r4,r5,pc}
;;;188    
                          ENDP


                          AREA ||i.move_window||, CODE, READONLY, ALIGN=1

                  move_window PROC
;;;242    static
;;;243    FRESULT move_window (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;244    	FATFS *fs,		/* File system object */
;;;245    	DWORD sector	/* Sector number to make apperance in the fs->win[] */
;;;246    )					/* Move to zero only writes back dirty window */
;;;247    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;248    	DWORD wsect;
;;;249    
;;;250    
;;;251    	wsect = fs->winsect;
000008  6ae6              LDR      r6,[r4,#0x2c]
;;;252    	if (wsect != sector) {	/* Changed current window */
00000a  42ae              CMP      r6,r5
00000c  d02f              BEQ      |L37.110|
;;;253    #if !_FS_READONLY
;;;254    		if (fs->wflag) {	/* Write back dirty window if needed */
00000e  7920              LDRB     r0,[r4,#4]
000010  b308              CBZ      r0,|L37.86|
;;;255    			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
000012  7860              LDRB     r0,[r4,#1]
000014  2301              MOVS     r3,#1
000016  4632              MOV      r2,r6
000018  f1040130          ADD      r1,r4,#0x30
00001c  f7fffffe          BL       disk_write
000020  b110              CBZ      r0,|L37.40|
;;;256    				return FR_DISK_ERR;
000022  2001              MOVS     r0,#1
                  |L37.36|
;;;257    			fs->wflag = 0;
;;;258    			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
;;;259    				BYTE nf;
;;;260    				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
;;;261    					wsect += fs->sects_fat;
;;;262    					disk_write(fs->drive, fs->win, wsect, 1);
;;;263    				}
;;;264    			}
;;;265    		}
;;;266    #endif
;;;267    		if (sector) {
;;;268    			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
;;;269    				return FR_DISK_ERR;
;;;270    			fs->winsect = sector;
;;;271    		}
;;;272    	}
;;;273    
;;;274    	return FR_OK;
;;;275    }
000024  e8bd81f0          POP      {r4-r8,pc}
                  |L37.40|
000028  2000              MOVS     r0,#0                 ;257
00002a  7120              STRB     r0,[r4,#4]            ;257
00002c  69a1              LDR      r1,[r4,#0x18]         ;258
00002e  6a20              LDR      r0,[r4,#0x20]         ;258
000030  4408              ADD      r0,r0,r1              ;258
000032  42b0              CMP      r0,r6                 ;258
000034  d90f              BLS      |L37.86|
000036  78e7              LDRB     r7,[r4,#3]            ;260
000038  e00a              B        |L37.80|
                  |L37.58|
00003a  69a0              LDR      r0,[r4,#0x18]         ;261
00003c  4406              ADD      r6,r6,r0              ;261
00003e  7860              LDRB     r0,[r4,#1]            ;262
000040  2301              MOVS     r3,#1                 ;262
000042  4632              MOV      r2,r6                 ;262
000044  f1040130          ADD      r1,r4,#0x30           ;262
000048  f7fffffe          BL       disk_write
00004c  1e78              SUBS     r0,r7,#1              ;260
00004e  b2c7              UXTB     r7,r0                 ;260
                  |L37.80|
000050  2f01              CMP      r7,#1                 ;260
000052  dcf2              BGT      |L37.58|
000054  bf00              NOP                            ;264
                  |L37.86|
000056  b155              CBZ      r5,|L37.110|
000058  7860              LDRB     r0,[r4,#1]            ;268
00005a  2301              MOVS     r3,#1                 ;268
00005c  462a              MOV      r2,r5                 ;268
00005e  f1040130          ADD      r1,r4,#0x30           ;268
000062  f7fffffe          BL       disk_read
000066  b108              CBZ      r0,|L37.108|
000068  2001              MOVS     r0,#1                 ;269
00006a  e7db              B        |L37.36|
                  |L37.108|
00006c  62e5              STR      r5,[r4,#0x2c]         ;270
                  |L37.110|
00006e  2000              MOVS     r0,#0                 ;274
000070  e7d8              B        |L37.36|
;;;276    
                          ENDP


                          AREA ||i.put_fat||, CODE, READONLY, ALIGN=1

                  put_fat PROC
;;;364    
;;;365    FRESULT put_fat (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;366    	FATFS *fs,	/* File system object */
;;;367    	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
;;;368    	DWORD val	/* New value to mark the cluster */
;;;369    )
;;;370    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;371    	UINT bc;
;;;372    	BYTE *p;
;;;373    	DWORD fsect;
;;;374    	FRESULT res;
;;;375    
;;;376    
;;;377    	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
00000a  2c02              CMP      r4,#2
00000c  d302              BCC      |L38.20|
00000e  69e8              LDR      r0,[r5,#0x1c]
000010  42a0              CMP      r0,r4
000012  d801              BHI      |L38.24|
                  |L38.20|
;;;378    		res = FR_INT_ERR;
000014  2702              MOVS     r7,#2
000016  e093              B        |L38.320|
                  |L38.24|
;;;379    
;;;380    	} else {
;;;381    		fsect = fs->fatbase;
000018  f8d5a020          LDR      r10,[r5,#0x20]
;;;382    		switch (fs->fs_type) {
00001c  7828              LDRB     r0,[r5,#0]
00001e  2801              CMP      r0,#1
000020  d004              BEQ      |L38.44|
000022  2802              CMP      r0,#2
000024  d041              BEQ      |L38.170|
000026  2803              CMP      r0,#3
000028  d17d              BNE      |L38.294|
00002a  e057              B        |L38.220|
                  |L38.44|
;;;383    		case FS_FAT12 :
;;;384    			bc = clst; bc += bc / 2;
00002c  46a0              MOV      r8,r4
00002e  eb080858          ADD      r8,r8,r8,LSR #1
;;;385    			res = move_window(fs, fsect + (bc / SS(fs)));
000032  eb0a2158          ADD      r1,r10,r8,LSR #9
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       move_window
00003c  4607              MOV      r7,r0
;;;386    			if (res != FR_OK) break;
00003e  b107              CBZ      r7,|L38.66|
000040  e07b              B        |L38.314|
                  |L38.66|
;;;387    			p = &fs->win[bc & (SS(fs) - 1)];
000042  f3c80108          UBFX     r1,r8,#0,#9
000046  f1050030          ADD      r0,r5,#0x30
00004a  eb010900          ADD      r9,r1,r0
;;;388    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
00004e  f0040001          AND      r0,r4,#1
000052  b128              CBZ      r0,|L38.96|
000054  b2f1              UXTB     r1,r6
000056  f8990000          LDRB     r0,[r9,#0]
00005a  f361101f          BFI      r0,r1,#4,#28
00005e  e000              B        |L38.98|
                  |L38.96|
000060  4630              MOV      r0,r6
                  |L38.98|
000062  f8890000          STRB     r0,[r9,#0]
;;;389    			bc++;
000066  f1080801          ADD      r8,r8,#1
;;;390    			fs->wflag = 1;
00006a  2001              MOVS     r0,#1
00006c  7128              STRB     r0,[r5,#4]
;;;391    			res = move_window(fs, fsect + (bc / SS(fs)));
00006e  eb0a2158          ADD      r1,r10,r8,LSR #9
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       move_window
000078  4607              MOV      r7,r0
;;;392    			if (res != FR_OK) break;
00007a  b107              CBZ      r7,|L38.126|
00007c  e05d              B        |L38.314|
                  |L38.126|
;;;393    			p = &fs->win[bc & (SS(fs) - 1)];
00007e  f3c80108          UBFX     r1,r8,#0,#9
000082  f1050030          ADD      r0,r5,#0x30
000086  eb010900          ADD      r9,r1,r0
;;;394    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
00008a  f0040001          AND      r0,r4,#1
00008e  b110              CBZ      r0,|L38.150|
000090  f3c61007          UBFX     r0,r6,#4,#8
000094  e006              B        |L38.164|
                  |L38.150|
000096  f8990000          LDRB     r0,[r9,#0]
00009a  f00000f0          AND      r0,r0,#0xf0
00009e  f3c62103          UBFX     r1,r6,#8,#4
0000a2  4308              ORRS     r0,r0,r1
                  |L38.164|
0000a4  f8890000          STRB     r0,[r9,#0]
;;;395    			break;
0000a8  e047              B        |L38.314|
                  |L38.170|
;;;396    
;;;397    		case FS_FAT16 :
;;;398    			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
0000aa  eb0a2114          ADD      r1,r10,r4,LSR #8
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       move_window
0000b4  4607              MOV      r7,r0
;;;399    			if (res != FR_OK) break;
0000b6  b107              CBZ      r7,|L38.186|
0000b8  e03f              B        |L38.314|
                  |L38.186|
;;;400    			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
0000ba  f24010ff          MOV      r0,#0x1ff
0000be  ea000244          AND      r2,r0,r4,LSL #1
0000c2  f1050030          ADD      r0,r5,#0x30
0000c6  5486              STRB     r6,[r0,r2]
0000c8  0a31              LSRS     r1,r6,#8
0000ca  f24010ff          MOV      r0,#0x1ff
0000ce  ea000244          AND      r2,r0,r4,LSL #1
0000d2  f1050030          ADD      r0,r5,#0x30
0000d6  4410              ADD      r0,r0,r2
0000d8  7041              STRB     r1,[r0,#1]
;;;401    			break;
0000da  e02e              B        |L38.314|
                  |L38.220|
;;;402    
;;;403    		case FS_FAT32 :
;;;404    			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
0000dc  eb0a11d4          ADD      r1,r10,r4,LSR #7
0000e0  4628              MOV      r0,r5
0000e2  f7fffffe          BL       move_window
0000e6  4607              MOV      r7,r0
;;;405    			if (res != FR_OK) break;
0000e8  b107              CBZ      r7,|L38.236|
0000ea  e026              B        |L38.314|
                  |L38.236|
;;;406    			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
0000ec  f24010ff          MOV      r0,#0x1ff
0000f0  ea000284          AND      r2,r0,r4,LSL #2
0000f4  f1050030          ADD      r0,r5,#0x30
0000f8  5486              STRB     r6,[r0,r2]
0000fa  0a31              LSRS     r1,r6,#8
0000fc  f24010ff          MOV      r0,#0x1ff
000100  ea000284          AND      r2,r0,r4,LSL #2
000104  f1050030          ADD      r0,r5,#0x30
000108  4410              ADD      r0,r0,r2
00010a  7041              STRB     r1,[r0,#1]
00010c  0c31              LSRS     r1,r6,#16
00010e  f24010ff          MOV      r0,#0x1ff
000112  ea000284          AND      r2,r0,r4,LSL #2
000116  f1050030          ADD      r0,r5,#0x30
00011a  4410              ADD      r0,r0,r2
00011c  7081              STRB     r1,[r0,#2]
00011e  0e31              LSRS     r1,r6,#24
000120  f24010ff          MOV      r0,#0x1ff
000124  e000              B        |L38.296|
                  |L38.294|
000126  e006              B        |L38.310|
                  |L38.296|
000128  ea000284          AND      r2,r0,r4,LSL #2
00012c  f1050030          ADD      r0,r5,#0x30
000130  4410              ADD      r0,r0,r2
000132  70c1              STRB     r1,[r0,#3]
;;;407    			break;
000134  e001              B        |L38.314|
                  |L38.310|
;;;408    
;;;409    		default :
;;;410    			res = FR_INT_ERR;
000136  2702              MOVS     r7,#2
000138  bf00              NOP                            ;382
                  |L38.314|
00013a  bf00              NOP                            ;386
;;;411    		}
;;;412    		fs->wflag = 1;
00013c  2001              MOVS     r0,#1
00013e  7128              STRB     r0,[r5,#4]
                  |L38.320|
;;;413    	}
;;;414    
;;;415    	return res;
000140  4638              MOV      r0,r7
;;;416    }
000142  e8bd87f0          POP      {r4-r10,pc}
;;;417    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.remove_chain||, CODE, READONLY, ALIGN=1

                  remove_chain PROC
;;;426    static
;;;427    FRESULT remove_chain (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;428    	FATFS *fs,			/* File system object */
;;;429    	DWORD clst			/* Cluster# to remove a chain from */
;;;430    )
;;;431    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;432    	FRESULT res;
;;;433    	DWORD nxt;
;;;434    
;;;435    
;;;436    	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
000008  2e02              CMP      r6,#2
00000a  d302              BCC      |L39.18|
00000c  69e0              LDR      r0,[r4,#0x1c]
00000e  42b0              CMP      r0,r6
000010  d801              BHI      |L39.22|
                  |L39.18|
;;;437    		res = FR_INT_ERR;
000012  2702              MOVS     r7,#2
000014  e025              B        |L39.98|
                  |L39.22|
;;;438    
;;;439    	} else {
;;;440    		res = FR_OK;
000016  2700              MOVS     r7,#0
;;;441    		while (clst < fs->max_clust) {			/* Not a last link? */
000018  e01f              B        |L39.90|
                  |L39.26|
;;;442    			nxt = get_fat(fs, clst);			/* Get cluster status */
00001a  4631              MOV      r1,r6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       get_fat
000022  4605              MOV      r5,r0
;;;443    			if (nxt == 0) break;				/* Empty cluster? */
000024  b905              CBNZ     r5,|L39.40|
000026  e01b              B        |L39.96|
                  |L39.40|
;;;444    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000028  2d01              CMP      r5,#1
00002a  d101              BNE      |L39.48|
00002c  2702              MOVS     r7,#2
00002e  e017              B        |L39.96|
                  |L39.48|
;;;445    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000030  1c68              ADDS     r0,r5,#1
000032  b908              CBNZ     r0,|L39.56|
000034  2701              MOVS     r7,#1
000036  e013              B        |L39.96|
                  |L39.56|
;;;446    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000038  2200              MOVS     r2,#0
00003a  4631              MOV      r1,r6
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       put_fat
000042  4607              MOV      r7,r0
;;;447    			if (res != FR_OK) break;
000044  b107              CBZ      r7,|L39.72|
000046  e00b              B        |L39.96|
                  |L39.72|
;;;448    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
000048  6920              LDR      r0,[r4,#0x10]
00004a  1c40              ADDS     r0,r0,#1
00004c  b120              CBZ      r0,|L39.88|
;;;449    				fs->free_clust++;
00004e  6920              LDR      r0,[r4,#0x10]
000050  1c40              ADDS     r0,r0,#1
000052  6120              STR      r0,[r4,#0x10]
;;;450    				fs->fsi_flag = 1;
000054  2001              MOVS     r0,#1
000056  7160              STRB     r0,[r4,#5]
                  |L39.88|
;;;451    			}
;;;452    			clst = nxt;	/* Next cluster */
000058  462e              MOV      r6,r5
                  |L39.90|
00005a  69e0              LDR      r0,[r4,#0x1c]         ;441
00005c  42b0              CMP      r0,r6                 ;441
00005e  d8dc              BHI      |L39.26|
                  |L39.96|
000060  bf00              NOP                            ;443
                  |L39.98|
;;;453    		}
;;;454    	}
;;;455    
;;;456    	return res;
000062  4638              MOV      r0,r7
;;;457    }
000064  e8bd81f0          POP      {r4-r8,pc}
;;;458    #endif
                          ENDP


                          AREA ||i.sync||, CODE, READONLY, ALIGN=1

                  sync PROC
;;;284    static
;;;285    FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
000000  b570              PUSH     {r4-r6,lr}
;;;286    	FATFS *fs	/* File system object */
;;;287    )
;;;288    {
000002  4604              MOV      r4,r0
;;;289    	FRESULT res;
;;;290    
;;;291    
;;;292    	res = move_window(fs, 0);
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       move_window
00000c  4605              MOV      r5,r0
;;;293    	if (res == FR_OK) {
00000e  2d00              CMP      r5,#0
000010  d159              BNE      |L40.198|
;;;294    		/* Update FSInfo sector if needed */
;;;295    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
000012  7820              LDRB     r0,[r4,#0]
000014  2803              CMP      r0,#3
000016  d14f              BNE      |L40.184|
000018  7960              LDRB     r0,[r4,#5]
00001a  2800              CMP      r0,#0
00001c  d04c              BEQ      |L40.184|
;;;296    			fs->winsect = 0;
00001e  2000              MOVS     r0,#0
000020  62e0              STR      r0,[r4,#0x2c]
;;;297    			mem_set(fs->win, 0, 512);
000022  f44f7200          MOV      r2,#0x200
000026  2100              MOVS     r1,#0
000028  f1040030          ADD      r0,r4,#0x30
00002c  f7fffffe          BL       mem_set
;;;298    			ST_WORD(fs->win+BS_55AA, 0xAA55);
000030  2155              MOVS     r1,#0x55
000032  f884122e          STRB     r1,[r4,#0x22e]
000036  21aa              MOVS     r1,#0xaa
000038  f884122f          STRB     r1,[r4,#0x22f]
;;;299    			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
00003c  2052              MOVS     r0,#0x52
00003e  f8840030          STRB     r0,[r4,#0x30]
000042  2152              MOVS     r1,#0x52
000044  2031              MOVS     r0,#0x31
000046  5501              STRB     r1,[r0,r4]
000048  2161              MOVS     r1,#0x61
00004a  2032              MOVS     r0,#0x32
00004c  5501              STRB     r1,[r0,r4]
00004e  2141              MOVS     r1,#0x41
000050  2033              MOVS     r0,#0x33
000052  5501              STRB     r1,[r0,r4]
;;;300    			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
000054  2172              MOVS     r1,#0x72
000056  f8841214          STRB     r1,[r4,#0x214]
00005a  f8841215          STRB     r1,[r4,#0x215]
00005e  2141              MOVS     r1,#0x41
000060  f8841216          STRB     r1,[r4,#0x216]
000064  2161              MOVS     r1,#0x61
000066  f8841217          STRB     r1,[r4,#0x217]
;;;301    			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
00006a  7c21              LDRB     r1,[r4,#0x10]
00006c  f8841218          STRB     r1,[r4,#0x218]
000070  8a20              LDRH     r0,[r4,#0x10]
000072  0a01              LSRS     r1,r0,#8
000074  f8841219          STRB     r1,[r4,#0x219]
000078  6920              LDR      r0,[r4,#0x10]
00007a  0c01              LSRS     r1,r0,#16
00007c  f884121a          STRB     r1,[r4,#0x21a]
000080  6920              LDR      r0,[r4,#0x10]
000082  0e01              LSRS     r1,r0,#24
000084  f884121b          STRB     r1,[r4,#0x21b]
;;;302    			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
000088  7b21              LDRB     r1,[r4,#0xc]
00008a  f884121c          STRB     r1,[r4,#0x21c]
00008e  89a0              LDRH     r0,[r4,#0xc]
000090  0a01              LSRS     r1,r0,#8
000092  f884121d          STRB     r1,[r4,#0x21d]
000096  68e0              LDR      r0,[r4,#0xc]
000098  0c01              LSRS     r1,r0,#16
00009a  f884121e          STRB     r1,[r4,#0x21e]
00009e  68e0              LDR      r0,[r4,#0xc]
0000a0  0e01              LSRS     r1,r0,#24
0000a2  f884121f          STRB     r1,[r4,#0x21f]
;;;303    			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
0000a6  7860              LDRB     r0,[r4,#1]
0000a8  2301              MOVS     r3,#1
0000aa  f1040130          ADD      r1,r4,#0x30
0000ae  6962              LDR      r2,[r4,#0x14]
0000b0  f7fffffe          BL       disk_write
;;;304    			fs->fsi_flag = 0;
0000b4  2000              MOVS     r0,#0
0000b6  7160              STRB     r0,[r4,#5]
                  |L40.184|
;;;305    		}
;;;306    		/* Make sure that no pending write process in the physical drive */
;;;307    		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
0000b8  7860              LDRB     r0,[r4,#1]
0000ba  2200              MOVS     r2,#0
0000bc  4611              MOV      r1,r2
0000be  f7fffffe          BL       disk_ioctl
0000c2  b100              CBZ      r0,|L40.198|
;;;308    			res = FR_DISK_ERR;
0000c4  2501              MOVS     r5,#1
                  |L40.198|
;;;309    	}
;;;310    
;;;311    	return res;
0000c6  4628              MOV      r0,r5
;;;312    }
0000c8  bd70              POP      {r4-r6,pc}
;;;313    #endif
                          ENDP


                          AREA ||i.validate||, CODE, READONLY, ALIGN=1

                  validate PROC
;;;1596   static
;;;1597   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000000  b570              PUSH     {r4-r6,lr}
;;;1598   	FATFS *fs,		/* Pointer to the file system object */
;;;1599   	WORD id			/* Member id of the target object to be checked */
;;;1600   )
;;;1601   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1602   	if (!fs || !fs->fs_type || fs->id != id)
000006  b124              CBZ      r4,|L41.18|
000008  7820              LDRB     r0,[r4,#0]
00000a  b110              CBZ      r0,|L41.18|
00000c  88e0              LDRH     r0,[r4,#6]
00000e  42a8              CMP      r0,r5
000010  d001              BEQ      |L41.22|
                  |L41.18|
;;;1603   		return FR_INVALID_OBJECT;
000012  2009              MOVS     r0,#9
                  |L41.20|
;;;1604   
;;;1605   	ENTER_FF(fs);		/* Lock file system */
;;;1606   
;;;1607   	if (disk_status(fs->drive) & STA_NOINIT)
;;;1608   		return FR_NOT_READY;
;;;1609   
;;;1610   	return FR_OK;
;;;1611   }
000014  bd70              POP      {r4-r6,pc}
                  |L41.22|
000016  7860              LDRB     r0,[r4,#1]            ;1607
000018  f7fffffe          BL       disk_status
00001c  f0000001          AND      r0,r0,#1              ;1607
000020  b108              CBZ      r0,|L41.38|
000022  2003              MOVS     r0,#3                 ;1608
000024  e7f6              B        |L41.20|
                  |L41.38|
000026  2000              MOVS     r0,#0                 ;1610
000028  e7f4              B        |L41.20|
;;;1612   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  sstbl
                          DCD      0x001f4000
                          DCD      0x000fa000
                          DCD      0x0007d000
                          DCD      0x0003e800
                          DCD      0x0001f400
                          DCD      0x0000fa00
                          DCD      0x00007d00
                          DCD      0x00003e80
                          DCD      0x00001f40
                          DCD      0x00000fa0
                          DCD      0x00000000
                  cstbl
00002c  80004000          DCW      0x8000,0x4000
000030  20001000          DCW      0x2000,0x1000
000034  08004000          DCW      0x0800,0x4000
000038  20001000          DCW      0x2000,0x1000
00003c  08000400          DCW      0x0800,0x0400
000040  0200              DCW      0x0200

                          AREA ||.data||, DATA, ALIGN=2

                  FatFs
                          DCD      0x00000000
                  Fsid
000004  0000              DCB      0x00,0x00
