L 1 "UCOSII\CORE\os_core.c"
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                             CORE FUNCTIONS
N*
N*                              (c) Copyright 1992-2012, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : OS_CORE.C
N* By      : Jean J. Labrosse
N* Version : V2.92.07
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micrium to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#define  MICRIUM_SOURCE
N
N#ifndef  OS_MASTER_FILE
N#define  OS_GLOBALS
N#include <ucos_ii.h>
L 1 ".\UCOSII\CORE\ucos_ii.h" 1
N/*
N*********************************************************************************************************
N*                                              uC/OS-II
N*                                        The Real-Time Kernel
N*
N*                            (c) Copyright 1992-2012, Micrium, Weston, FL
N*                                           All Rights Reserved
N*
N* File    : uCOS_II.H
N* By      : Jean J. Labrosse
N* Version : V2.92.07
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micrium to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N
N#ifndef   OS_uCOS_II_H
N#define   OS_uCOS_II_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*
N*********************************************************************************************************
N*                                       uC/OS-II VERSION NUMBER
N*********************************************************************************************************
N*/
N
N#define  OS_VERSION                 29207u              /* Version of uC/OS-II (Vx.yy mult. by 10000)  */
N
N/*
N*********************************************************************************************************
N*                                        INCLUDE HEADER FILES
N*********************************************************************************************************
N*/
N
N//#include <app_cfg.h>
N#include <os_cfg.h>
L 1 ".\UCOSII\CONFIG\os_cfg.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/OS-II
N*                                          The Real-Time Kernel
N*                                  uC/OS-II Configuration File for V2.8x
N*
N*                               (c) Copyright 2005-2009, Micrium, Weston, FL
N*                                          All Rights Reserved
N*
N*
N* File    : OS_CFG.H
N* By      : Jean J. Labrosse
N* Version : V2.88
N*
N* LICENSING TERMS:
N* ---------------
N*   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
N* If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
N* its use in your product. We provide ALL the source code for your convenience and to help you experience
N* uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
N* licensing fee.
N*********************************************************************************************************
N*/
N#ifndef OS_CFG_H
N#define OS_CFG_H
N
N
N                                       /* ---------------------- MISCELLANEOUS ----------------------- */
N#define OS_APP_HOOKS_EN           0    /* Application-defined hooks are called from the uC/OS-II hooks */
N#define OS_ARG_CHK_EN             0    /* Enable (1) or Disable (0) argument checking                  */
N#define OS_CPU_HOOKS_EN           1    /* uC/OS-II hooks are found in the processor port files         */
N
N#define OS_DEBUG_EN               0    /* Enable(1) debug variables                                    */
N
N#define OS_EVENT_MULTI_EN         0    /* Include code for OSEventPendMulti()                          */
N#define OS_EVENT_NAME_EN          0    /* Enable names for Sem, Mutex, Mbox and Q                      */
N
N#define OS_LOWEST_PRIO           63    /* Defines the lowest priority that can be assigned ...         */
N                                       /* ... MUST NEVER be higher than 254!                           */
N
N#define OS_MAX_EVENTS            10    /* Max. number of event control blocks in your application      */
N#define OS_MAX_FLAGS              5    /* Max. number of Event Flag Groups    in your application      */
N#define OS_MAX_MEM_PART           0    /* Max. number of memory partitions                             */
N#define OS_MAX_QS                 4    /* Max. number of queue control blocks in your application      */
N#define OS_MAX_TASKS              5    /* Max. number of tasks in your application, MUST be >= 2       */
N
N#define OS_SCHED_LOCK_EN          1    /* Include code for OSSchedLock() and OSSchedUnlock()           */
N
N#define OS_TICK_STEP_EN           1    /* Enable tick stepping feature for uC/OS-View                  */
N#define OS_TICKS_PER_SEC        200    /* Set the number of ticks in one second                        */
N//#define OS_TICKS_PER_SEC        1000
N
N                                       /* --------------------- TASK STACK SIZE ---------------------- */
N#define OS_TASK_TMR_STK_SIZE    128    /* Timer      task stack size (# of OS_STK wide entries)        */
N#define OS_TASK_STAT_STK_SIZE   128    /* Statistics task stack size (# of OS_STK wide entries)        */
N#define OS_TASK_IDLE_STK_SIZE   128    /* Idle       task stack size (# of OS_STK wide entries)        */
N
N
N                                       /* --------------------- TASK MANAGEMENT ---------------------- */
N#define OS_TASK_CHANGE_PRIO_EN    1    /*     Include code for OSTaskChangePrio()                      */
N#define OS_TASK_CREATE_EN         1    /*     Include code for OSTaskCreate()                          */
N#define OS_TASK_CREATE_EXT_EN     1    /*     Include code for OSTaskCreateExt()                       */
N#define OS_TASK_DEL_EN            1    /*     Include code for OSTaskDel()                             */
N#define OS_TASK_NAME_EN           1    /*     Enable task names                                        */
N#define OS_TASK_PROFILE_EN        1    /*     Include variables in OS_TCB for profiling                */
N#define OS_TASK_QUERY_EN          1    /*     Include code for OSTaskQuery()                           */
N#define OS_TASK_STAT_EN           1    /*     Enable (1) or Disable(0) the statistics task             */
N#define OS_TASK_STAT_STK_CHK_EN   1    /*     Check task stacks from statistic task                    */
N#define OS_TASK_SUSPEND_EN        1    /*     Include code for OSTaskSuspend() and OSTaskResume()      */
N#define OS_TASK_SW_HOOK_EN        1    /*     Include code for OSTaskSwHook()                          */
N#define OS_TASK_REG_TBL_SIZE      1    /*     Size of task variables array (#of INT32U entries)        */
N
N
N                                       /* ----------------------- EVENT FLAGS ------------------------ */
N#define OS_FLAG_EN                1    /* Enable (1) or Disable (0) code generation for EVENT FLAGS    */
N#define OS_FLAG_ACCEPT_EN         1    /*     Include code for OSFlagAccept()                          */
N#define OS_FLAG_DEL_EN            1    /*     Include code for OSFlagDel()                             */
N#define OS_FLAG_NAME_EN           1    /*     Enable names for event flag group                        */
N#define OS_FLAG_QUERY_EN          1    /*     Include code for OSFlagQuery()                           */
N#define OS_FLAG_WAIT_CLR_EN       1    /* Include code for Wait on Clear EVENT FLAGS                   */
N#define OS_FLAGS_NBITS           16    /* Size in #bits of OS_FLAGS data type (8, 16 or 32)            */
N
N
N                                       /* -------------------- MESSAGE MAILBOXES --------------------- */
N#define OS_MBOX_EN                1    /* Enable (1) or Disable (0) code generation for MAILBOXES      */
N#define OS_MBOX_ACCEPT_EN         1    /*     Include code for OSMboxAccept()                          */
N#define OS_MBOX_DEL_EN            1    /*     Include code for OSMboxDel()                             */
N#define OS_MBOX_PEND_ABORT_EN     1    /*     Include code for OSMboxPendAbort()                       */
N#define OS_MBOX_POST_EN           1    /*     Include code for OSMboxPost()                            */
N#define OS_MBOX_POST_OPT_EN       1    /*     Include code for OSMboxPostOpt()                         */
N#define OS_MBOX_QUERY_EN          1    /*     Include code for OSMboxQuery()                           */
N
N
N                                       /* --------------------- MEMORY MANAGEMENT -------------------- */
N#define OS_MEM_EN                 1    /* Enable (1) or Disable (0) code generation for MEMORY MANAGER */
N#define OS_MEM_NAME_EN            1    /*     Enable memory partition names                            */
N#define OS_MEM_QUERY_EN           1    /*     Include code for OSMemQuery()                            */
N
N
N                                       /* ---------------- MUTUAL EXCLUSION SEMAPHORES --------------- */
N#define OS_MUTEX_EN               1    /* Enable (1) or Disable (0) code generation for MUTEX          */
N#define OS_MUTEX_ACCEPT_EN        1    /*     Include code for OSMutexAccept()                         */
N#define OS_MUTEX_DEL_EN           1    /*     Include code for OSMutexDel()                            */
N#define OS_MUTEX_QUERY_EN         1    /*     Include code for OSMutexQuery()                          */
N
N
N                                       /* ---------------------- MESSAGE QUEUES ---------------------- */
N#define OS_Q_EN                   1    /* Enable (1) or Disable (0) code generation for QUEUES         */
N#define OS_Q_ACCEPT_EN            1    /*     Include code for OSQAccept()                             */
N#define OS_Q_DEL_EN               1    /*     Include code for OSQDel()                                */
N#define OS_Q_FLUSH_EN             1    /*     Include code for OSQFlush()                              */
N#define OS_Q_PEND_ABORT_EN        1    /*     Include code for OSQPendAbort()                          */
N#define OS_Q_POST_EN              1    /*     Include code for OSQPost()                               */
N#define OS_Q_POST_FRONT_EN        1    /*     Include code for OSQPostFront()                          */
N#define OS_Q_POST_OPT_EN          1    /*     Include code for OSQPostOpt()                            */
N#define OS_Q_QUERY_EN             1    /*     Include code for OSQQuery()                              */
N
N
N                                       /* ------------------------ SEMAPHORES ------------------------ */
N#define OS_SEM_EN                 1    /* Enable (1) or Disable (0) code generation for SEMAPHORES     */
N#define OS_SEM_ACCEPT_EN          1    /*    Include code for OSSemAccept()                            */
N#define OS_SEM_DEL_EN             1    /*    Include code for OSSemDel()                               */
N#define OS_SEM_PEND_ABORT_EN      1    /*    Include code for OSSemPendAbort()                         */
N#define OS_SEM_QUERY_EN           1    /*    Include code for OSSemQuery()                             */
N#define OS_SEM_SET_EN             1    /*    Include code for OSSemSet()                               */
N
N
N                                       /* --------------------- TIME MANAGEMENT ---------------------- */
N#define OS_TIME_DLY_HMSM_EN       1    /*     Include code for OSTimeDlyHMSM()                         */
N#define OS_TIME_DLY_RESUME_EN     1    /*     Include code for OSTimeDlyResume()                       */
N#define OS_TIME_GET_SET_EN        1    /*     Include code for OSTimeGet() and OSTimeSet()             */
N#define OS_TIME_TICK_HOOK_EN      1    /*     Include code for OSTimeTickHook()                        */
N
N
N                                       /* --------------------- TIMER MANAGEMENT --------------------- */
N#define OS_TMR_EN                 0    /* Enable (1) or Disable (0) code generation for TIMERS         */
N#define OS_TMR_CFG_MAX           16    /*     Maximum number of timers                                 */
N#define OS_TMR_CFG_NAME_EN        1    /*     Determine timer names                                    */
N#define OS_TMR_CFG_WHEEL_SIZE     8    /*     Size of timer wheel (#Spokes)                            */
N#define OS_TMR_CFG_TICKS_PER_SEC 10    /*     Rate at which timer management task runs (Hz)            */
N
N#endif
L 46 ".\UCOSII\CORE\ucos_ii.h" 2
N#include <os_cpu.h>
L 1 ".\UCOSII\PORTS\os_cpu.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/OS-II
N*                                         The Real-Time Kernel
N*
N*
N*                                (c) Copyright 2006, Micrium, Weston, FL
N*                                          All Rights Reserved
N*
N*                                           ARM Cortex-M3 Port
N*
N* File      : OS_CPU.H
N* Version   : V2.89
N* By        : Jean J. Labrosse
N*             Brian Nagel
N*
N* For       : ARMv7M Cortex-M3
N* Mode      : Thumb2
N* Toolchain : IAR EWARM
N*********************************************************************************************************
N*/
N
N#ifndef  OS_CPU_H
N#define  OS_CPU_H
N
N
N#ifdef   OS_CPU_GLOBALS
S#define  OS_CPU_EXT
N#else
N#define  OS_CPU_EXT  extern
N#endif
N
N#ifndef  OS_CPU_EXCEPT_STK_SIZE
N#define  OS_CPU_EXCEPT_STK_SIZE    128u          /* Default exception stack size is 128 OS_STK entries */
N#endif
N
N/*
N*********************************************************************************************************
N*                                              DATA TYPES
N*                                         (Compiler Specific)
N*********************************************************************************************************
N*/
N
Ntypedef unsigned char  BOOLEAN;
Ntypedef unsigned char  INT8U;                    /* Unsigned  8 bit quantity                           */
Ntypedef signed   char  INT8S;                    /* Signed    8 bit quantity                           */
Ntypedef unsigned short INT16U;                   /* Unsigned 16 bit quantity                           */
Ntypedef signed   short INT16S;                   /* Signed   16 bit quantity                           */
Ntypedef unsigned int   INT32U;                   /* Unsigned 32 bit quantity                           */
Ntypedef signed   int   INT32S;                   /* Signed   32 bit quantity                           */
Ntypedef float          FP32;                     /* Single precision floating point                    */
Ntypedef double         FP64;                     /* Double precision floating point                    */
N
Ntypedef unsigned int   OS_STK;                   /* Each stack entry is 32-bit wide                    */
Ntypedef unsigned int   OS_CPU_SR;                /* Define size of CPU status register (PSR = 32 bits) */
N
N/*
N*********************************************************************************************************
N*                                              Cortex-M3
N*                                      Critical Section Management
N*
N* Method #1:  Disable/Enable interrupts using simple instructions.  After critical section, interrupts
N*             will be enabled even if they were disabled before entering the critical section.
N*             NOT IMPLEMENTED
N*
N* Method #2:  Disable/Enable interrupts by preserving the state of interrupts.  In other words, if
N*             interrupts were disabled before entering the critical section, they will be disabled when
N*             leaving the critical section.
N*             NOT IMPLEMENTED
N*
N* Method #3:  Disable/Enable interrupts by preserving the state of interrupts.  Generally speaking you
N*             would store the state of the interrupt disable flag in the local variable 'cpu_sr' and then
N*             disable interrupts.  'cpu_sr' is allocated in all of uC/OS-II's functions that need to
N*             disable interrupts.  You would restore the interrupt disable state by copying back 'cpu_sr'
N*             into the CPU's status register.
N*********************************************************************************************************
N*/
N
N//½øÈëÁÙ½çÇø·½·¨
N#define  OS_CRITICAL_METHOD   3u
N
N#if OS_CRITICAL_METHOD == 3u
X#if 3u == 3u
N#define  OS_ENTER_CRITICAL()  {cpu_sr = OS_CPU_SR_Save();}
N#define  OS_EXIT_CRITICAL()   {OS_CPU_SR_Restore(cpu_sr);}
N#endif
N
N/*
N*********************************************************************************************************
N*                                        Cortex-M3 Miscellaneous
N*********************************************************************************************************
N*/
N
N//¶¨Òå¶ÑÕ»µÄÉú³¤·½Ïò
N//ÔÚCM3ÖÐ£¬¶ÑÕ»ÊÇÓÉ¸ßµØÖ·ÏòµÍµØÖ·Éú³¤µÄ£¬ËùÒÔÕâÀïÉèÖÃÎª1
N#define  OS_STK_GROWTH        1u                  /* Stack grows from HIGH to LOW memory on ARM        */
N
N#define  OS_TASK_SW()         OSCtxSw()  //ÈÎÎñÇÐ»»ºê¶¨Òå
N
N/*
N*********************************************************************************************************
N*                                            GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
NOS_CPU_EXT  OS_STK   OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
Xextern  OS_STK   OS_CPU_ExceptStk[128u];
NOS_CPU_EXT  OS_STK  *OS_CPU_ExceptStkBase;
Xextern  OS_STK  *OS_CPU_ExceptStkBase;
N
N/*
N*********************************************************************************************************
N*                                              PROTOTYPES
N*********************************************************************************************************
N*/
N
N#if OS_CRITICAL_METHOD == 3u                      /* See OS_CPU_A.ASM                                  */
X#if 3u == 3u                       
NOS_CPU_SR  OS_CPU_SR_Save(void);
Nvoid       OS_CPU_SR_Restore(OS_CPU_SR cpu_sr);
N#endif
N
Nvoid       OSCtxSw(void);
Nvoid       OSIntCtxSw(void);
Nvoid       OSStartHighRdy(void);
N
N
N//void       OSPendSV(void);
Nvoid       PendSV_Handler(void);
N
N//void       OS_CPU_PendSVHandler(void);
N
N                                                  /* See OS_CPU_C.C                                    */
N
N//void       OS_CPU_SysTickHandler(void);
N//void       OS_CPU_SysTickInit(INT32U  cnts);
N#endif
L 47 ".\UCOSII\CORE\ucos_ii.h" 2
N
N/*
N*********************************************************************************************************
N*                                            MISCELLANEOUS
N*********************************************************************************************************
N*/
N
N#ifdef   OS_GLOBALS
N#define  OS_EXT
N#else
S#define  OS_EXT  extern
N#endif
N
N#ifndef  OS_FALSE
N#define  OS_FALSE                       0u
N#endif
N
N#ifndef  OS_TRUE
N#define  OS_TRUE                        1u
N#endif
N
N#define  OS_ASCII_NUL            (INT8U)0
N
N#define  OS_PRIO_SELF                0xFFu              /* Indicate SELF priority                      */
N#define  OS_PRIO_MUTEX_CEIL_DIS      0xFFu              /* Disable mutex priority ceiling promotion    */
N
N#if OS_TASK_STAT_EN > 0u
X#if 1 > 0u
N#define  OS_N_SYS_TASKS                 2u              /* Number of system tasks                      */
N#else
S#define  OS_N_SYS_TASKS                 1u
N#endif
N
N#define  OS_TASK_STAT_PRIO  (OS_LOWEST_PRIO - 1u)       /* Statistic task priority                     */
N#define  OS_TASK_IDLE_PRIO  (OS_LOWEST_PRIO)            /* IDLE      task priority                     */
N
N#if OS_LOWEST_PRIO <= 63u
X#if 63 <= 63u
N#define  OS_EVENT_TBL_SIZE ((OS_LOWEST_PRIO) / 8u + 1u) /* Size of event table                         */
N#define  OS_RDY_TBL_SIZE   ((OS_LOWEST_PRIO) / 8u + 1u) /* Size of ready table                         */
N#else
S#define  OS_EVENT_TBL_SIZE ((OS_LOWEST_PRIO) / 16u + 1u)/* Size of event table                         */
S#define  OS_RDY_TBL_SIZE   ((OS_LOWEST_PRIO) / 16u + 1u)/* Size of ready table                         */
N#endif
N
N#define  OS_TASK_IDLE_ID            65535u              /* ID numbers for Idle, Stat and Timer tasks   */
N#define  OS_TASK_STAT_ID            65534u
N#define  OS_TASK_TMR_ID             65533u
N
N#define  OS_EVENT_EN           (((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u) || (OS_SEM_EN > 0u) || (OS_MUTEX_EN > 0u))
N
N#define  OS_TCB_RESERVED        ((OS_TCB *)1)
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                             TASK STATUS (Bit definition for OSTCBStat)
N*********************************************************************************************************
N*/
N#define  OS_STAT_RDY                 0x00u  /* Ready to run                                            */
N#define  OS_STAT_SEM                 0x01u  /* Pending on semaphore                                    */
N#define  OS_STAT_MBOX                0x02u  /* Pending on mailbox                                      */
N#define  OS_STAT_Q                   0x04u  /* Pending on queue                                        */
N#define  OS_STAT_SUSPEND             0x08u  /* Task is suspended                                       */
N#define  OS_STAT_MUTEX               0x10u  /* Pending on mutual exclusion semaphore                   */
N#define  OS_STAT_FLAG                0x20u  /* Pending on event flag group                             */
N#define  OS_STAT_MULTI               0x80u  /* Pending on multiple events                              */
N
N#define  OS_STAT_PEND_ANY         (OS_STAT_SEM | OS_STAT_MBOX | OS_STAT_Q | OS_STAT_MUTEX | OS_STAT_FLAG)
N
N/*
N*********************************************************************************************************
N*                          TASK PEND STATUS (Status codes for OSTCBStatPend)
N*********************************************************************************************************
N*/
N#define  OS_STAT_PEND_OK                0u  /* Pending status OK, not pending, or pending complete     */
N#define  OS_STAT_PEND_TO                1u  /* Pending timed out                                       */
N#define  OS_STAT_PEND_ABORT             2u  /* Pending aborted                                         */
N
N/*
N*********************************************************************************************************
N*                                           OS_EVENT types
N*********************************************************************************************************
N*/
N#define  OS_EVENT_TYPE_UNUSED           0u
N#define  OS_EVENT_TYPE_MBOX             1u
N#define  OS_EVENT_TYPE_Q                2u
N#define  OS_EVENT_TYPE_SEM              3u
N#define  OS_EVENT_TYPE_MUTEX            4u
N#define  OS_EVENT_TYPE_FLAG             5u
N
N#define  OS_TMR_TYPE                  100u  /* Used to identify Timers ...                             */
N                                            /* ... (Must be different value than OS_EVENT_TYPE_xxx)    */
N
N/*
N*********************************************************************************************************
N*                                             EVENT FLAGS
N*********************************************************************************************************
N*/
N#define  OS_FLAG_WAIT_CLR_ALL           0u  /* Wait for ALL    the bits specified to be CLR (i.e. 0)   */
N#define  OS_FLAG_WAIT_CLR_AND           0u
N
N#define  OS_FLAG_WAIT_CLR_ANY           1u  /* Wait for ANY of the bits specified to be CLR (i.e. 0)   */
N#define  OS_FLAG_WAIT_CLR_OR            1u
N
N#define  OS_FLAG_WAIT_SET_ALL           2u  /* Wait for ALL    the bits specified to be SET (i.e. 1)   */
N#define  OS_FLAG_WAIT_SET_AND           2u
N
N#define  OS_FLAG_WAIT_SET_ANY           3u  /* Wait for ANY of the bits specified to be SET (i.e. 1)   */
N#define  OS_FLAG_WAIT_SET_OR            3u
N
N
N#define  OS_FLAG_CONSUME             0x80u  /* Consume the flags if condition(s) satisfied             */
N
N
N#define  OS_FLAG_CLR                    0u
N#define  OS_FLAG_SET                    1u
N
N/*
N*********************************************************************************************************
N*                                     Values for OSTickStepState
N*
N* Note(s): This feature is used by uC/OS-View.
N*********************************************************************************************************
N*/
N
N#if OS_TICK_STEP_EN > 0u
X#if 1 > 0u
N#define  OS_TICK_STEP_DIS               0u  /* Stepping is disabled, tick runs as normal               */
N#define  OS_TICK_STEP_WAIT              1u  /* Waiting for uC/OS-View to set OSTickStepState to _ONCE  */
N#define  OS_TICK_STEP_ONCE              2u  /* Process tick once and wait for next cmd from uC/OS-View */
N#endif
N
N/*
N*********************************************************************************************************
N*      Possible values for 'opt' argument of OSSemDel(), OSMboxDel(), OSQDel() and OSMutexDel()
N*********************************************************************************************************
N*/
N#define  OS_DEL_NO_PEND                 0u
N#define  OS_DEL_ALWAYS                  1u
N
N/*
N*********************************************************************************************************
N*                                        OS???Pend() OPTIONS
N*
N* These #defines are used to establish the options for OS???PendAbort().
N*********************************************************************************************************
N*/
N#define  OS_PEND_OPT_NONE               0u  /* NO option selected                                      */
N#define  OS_PEND_OPT_BROADCAST          1u  /* Broadcast action to ALL tasks waiting                   */
N
N/*
N*********************************************************************************************************
N*                                     OS???PostOpt() OPTIONS
N*
N* These #defines are used to establish the options for OSMboxPostOpt() and OSQPostOpt().
N*********************************************************************************************************
N*/
N#define  OS_POST_OPT_NONE            0x00u  /* NO option selected                                      */
N#define  OS_POST_OPT_BROADCAST       0x01u  /* Broadcast message to ALL tasks waiting                  */
N#define  OS_POST_OPT_FRONT           0x02u  /* Post to highest priority task waiting                   */
N#define  OS_POST_OPT_NO_SCHED        0x04u  /* Do not call the scheduler if this option is selected    */
N
N/*
N*********************************************************************************************************
N*                                TASK OPTIONS (see OSTaskCreateExt())
N*********************************************************************************************************
N*/
N#define  OS_TASK_OPT_NONE          0x0000u  /* NO option selected                                      */
N#define  OS_TASK_OPT_STK_CHK       0x0001u  /* Enable stack checking for the task                      */
N#define  OS_TASK_OPT_STK_CLR       0x0002u  /* Clear the stack when the task is create                 */
N#define  OS_TASK_OPT_SAVE_FP       0x0004u  /* Save the contents of any floating-point registers       */
N
N/*
N*********************************************************************************************************
N*                          TIMER OPTIONS (see OSTmrStart() and OSTmrStop())
N*********************************************************************************************************
N*/
N#define  OS_TMR_OPT_NONE                0u  /* No option selected                                      */
N
N#define  OS_TMR_OPT_ONE_SHOT            1u  /* Timer will not automatically restart when it expires    */
N#define  OS_TMR_OPT_PERIODIC            2u  /* Timer will     automatically restart when it expires    */
N
N#define  OS_TMR_OPT_CALLBACK            3u  /* OSTmrStop() option to call 'callback' w/ timer arg.     */
N#define  OS_TMR_OPT_CALLBACK_ARG        4u  /* OSTmrStop() option to call 'callback' w/ new   arg.     */
N
N/*
N*********************************************************************************************************
N*                                            TIMER STATES
N*********************************************************************************************************
N*/
N#define  OS_TMR_STATE_UNUSED            0u
N#define  OS_TMR_STATE_STOPPED           1u
N#define  OS_TMR_STATE_COMPLETED         2u
N#define  OS_TMR_STATE_RUNNING           3u
N
N/*
N*********************************************************************************************************
N*                                             ERROR CODES
N*********************************************************************************************************
N*/
N#define OS_ERR_NONE                     0u
N
N#define OS_ERR_EVENT_TYPE               1u
N#define OS_ERR_PEND_ISR                 2u
N#define OS_ERR_POST_NULL_PTR            3u
N#define OS_ERR_PEVENT_NULL              4u
N#define OS_ERR_POST_ISR                 5u
N#define OS_ERR_QUERY_ISR                6u
N#define OS_ERR_INVALID_OPT              7u
N#define OS_ERR_ID_INVALID               8u
N#define OS_ERR_PDATA_NULL               9u
N
N#define OS_ERR_TIMEOUT                 10u
N#define OS_ERR_EVENT_NAME_TOO_LONG     11u
N#define OS_ERR_PNAME_NULL              12u
N#define OS_ERR_PEND_LOCKED             13u
N#define OS_ERR_PEND_ABORT              14u
N#define OS_ERR_DEL_ISR                 15u
N#define OS_ERR_CREATE_ISR              16u
N#define OS_ERR_NAME_GET_ISR            17u
N#define OS_ERR_NAME_SET_ISR            18u
N#define OS_ERR_ILLEGAL_CREATE_RUN_TIME 19u
N
N#define OS_ERR_MBOX_FULL               20u
N
N#define OS_ERR_Q_FULL                  30u
N#define OS_ERR_Q_EMPTY                 31u
N
N#define OS_ERR_PRIO_EXIST              40u
N#define OS_ERR_PRIO                    41u
N#define OS_ERR_PRIO_INVALID            42u
N
N#define OS_ERR_SCHED_LOCKED            50u
N#define OS_ERR_SEM_OVF                 51u
N
N#define OS_ERR_TASK_CREATE_ISR         60u
N#define OS_ERR_TASK_DEL                61u
N#define OS_ERR_TASK_DEL_IDLE           62u
N#define OS_ERR_TASK_DEL_REQ            63u
N#define OS_ERR_TASK_DEL_ISR            64u
N#define OS_ERR_TASK_NAME_TOO_LONG      65u
N#define OS_ERR_TASK_NO_MORE_TCB        66u
N#define OS_ERR_TASK_NOT_EXIST          67u
N#define OS_ERR_TASK_NOT_SUSPENDED      68u
N#define OS_ERR_TASK_OPT                69u
N#define OS_ERR_TASK_RESUME_PRIO        70u
N#define OS_ERR_TASK_SUSPEND_IDLE       71u
N#define OS_ERR_TASK_SUSPEND_PRIO       72u
N#define OS_ERR_TASK_WAITING            73u
N
N#define OS_ERR_TIME_NOT_DLY            80u
N#define OS_ERR_TIME_INVALID_MINUTES    81u
N#define OS_ERR_TIME_INVALID_SECONDS    82u
N#define OS_ERR_TIME_INVALID_MS         83u
N#define OS_ERR_TIME_ZERO_DLY           84u
N#define OS_ERR_TIME_DLY_ISR            85u
N
N#define OS_ERR_MEM_INVALID_PART        90u
N#define OS_ERR_MEM_INVALID_BLKS        91u
N#define OS_ERR_MEM_INVALID_SIZE        92u
N#define OS_ERR_MEM_NO_FREE_BLKS        93u
N#define OS_ERR_MEM_FULL                94u
N#define OS_ERR_MEM_INVALID_PBLK        95u
N#define OS_ERR_MEM_INVALID_PMEM        96u
N#define OS_ERR_MEM_INVALID_PDATA       97u
N#define OS_ERR_MEM_INVALID_ADDR        98u
N#define OS_ERR_MEM_NAME_TOO_LONG       99u
N
N#define OS_ERR_NOT_MUTEX_OWNER        100u
N
N#define OS_ERR_FLAG_INVALID_PGRP      110u
N#define OS_ERR_FLAG_WAIT_TYPE         111u
N#define OS_ERR_FLAG_NOT_RDY           112u
N#define OS_ERR_FLAG_INVALID_OPT       113u
N#define OS_ERR_FLAG_GRP_DEPLETED      114u
N#define OS_ERR_FLAG_NAME_TOO_LONG     115u
N
N#define OS_ERR_PCP_LOWER              120u
N
N#define OS_ERR_TMR_INVALID_DLY        130u
N#define OS_ERR_TMR_INVALID_PERIOD     131u
N#define OS_ERR_TMR_INVALID_OPT        132u
N#define OS_ERR_TMR_INVALID_NAME       133u
N#define OS_ERR_TMR_NON_AVAIL          134u
N#define OS_ERR_TMR_INACTIVE           135u
N#define OS_ERR_TMR_INVALID_DEST       136u
N#define OS_ERR_TMR_INVALID_TYPE       137u
N#define OS_ERR_TMR_INVALID            138u
N#define OS_ERR_TMR_ISR                139u
N#define OS_ERR_TMR_NAME_TOO_LONG      140u
N#define OS_ERR_TMR_INVALID_STATE      141u
N#define OS_ERR_TMR_STOPPED            142u
N#define OS_ERR_TMR_NO_CALLBACK        143u
N
N#define OS_ERR_NO_MORE_ID_AVAIL       150u
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         EVENT CONTROL BLOCK
N*********************************************************************************************************
N*/
N
N#if OS_LOWEST_PRIO <= 63u
X#if 63 <= 63u
Ntypedef  INT8U    OS_PRIO;
N#else
Stypedef  INT16U   OS_PRIO;
N#endif
N
N#if (OS_EVENT_EN) && (OS_MAX_EVENTS > 0u)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u))) && (10 > 0u)
Ntypedef struct os_event {
N    INT8U    OSEventType;                    /* Type of event control block (see OS_EVENT_TYPE_xxxx)    */
N    void    *OSEventPtr;                     /* Pointer to message or queue structure                   */
N    INT16U   OSEventCnt;                     /* Semaphore Count (not used if other EVENT type)          */
N    OS_PRIO  OSEventGrp;                     /* Group corresponding to tasks waiting for event to occur */
N    OS_PRIO  OSEventTbl[OS_EVENT_TBL_SIZE];  /* List of tasks waiting for event to occur                */
X    OS_PRIO  OSEventTbl[((63) / 8u + 1u)];   
N
N#if OS_EVENT_NAME_EN > 0u
X#if 0 > 0u
S    INT8U   *OSEventName;
N#endif
N} OS_EVENT;
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                      EVENT FLAGS CONTROL BLOCK
N*********************************************************************************************************
N*/
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1 > 0u) && (5 > 0u)
N
N#if OS_FLAGS_NBITS == 8u                    /* Determine the size of OS_FLAGS (8, 16 or 32 bits)       */
X#if 16 == 8u                     
Stypedef  INT8U    OS_FLAGS;
N#endif
N
N#if OS_FLAGS_NBITS == 16u
X#if 16 == 16u
Ntypedef  INT16U   OS_FLAGS;
N#endif
N
N#if OS_FLAGS_NBITS == 32u
X#if 16 == 32u
Stypedef  INT32U   OS_FLAGS;
N#endif
N
N
Ntypedef struct os_flag_grp {                /* Event Flag Group                                        */
N    INT8U         OSFlagType;               /* Should be set to OS_EVENT_TYPE_FLAG                     */
N    void         *OSFlagWaitList;           /* Pointer to first NODE of task waiting on event flag     */
N    OS_FLAGS      OSFlagFlags;              /* 8, 16 or 32 bit flags                                   */
N#if OS_FLAG_NAME_EN > 0u
X#if 1 > 0u
N    INT8U        *OSFlagName;
N#endif
N} OS_FLAG_GRP;
N
N
N
Ntypedef struct os_flag_node {               /* Event Flag Wait List Node                               */
N    void         *OSFlagNodeNext;           /* Pointer to next     NODE in wait list                   */
N    void         *OSFlagNodePrev;           /* Pointer to previous NODE in wait list                   */
N    void         *OSFlagNodeTCB;            /* Pointer to TCB of waiting task                          */
N    void         *OSFlagNodeFlagGrp;        /* Pointer to Event Flag Group                             */
N    OS_FLAGS      OSFlagNodeFlags;          /* Event flag to wait on                                   */
N    INT8U         OSFlagNodeWaitType;       /* Type of wait:                                           */
N                                            /*      OS_FLAG_WAIT_AND                                   */
N                                            /*      OS_FLAG_WAIT_ALL                                   */
N                                            /*      OS_FLAG_WAIT_OR                                    */
N                                            /*      OS_FLAG_WAIT_ANY                                   */
N} OS_FLAG_NODE;
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        MESSAGE MAILBOX DATA
N*********************************************************************************************************
N*/
N
N#if OS_MBOX_EN > 0u
X#if 1 > 0u
Ntypedef struct os_mbox_data {
N    void   *OSMsg;                         /* Pointer to message in mailbox                            */
N    OS_PRIO OSEventTbl[OS_EVENT_TBL_SIZE]; /* List of tasks waiting for event to occur                 */
X    OS_PRIO OSEventTbl[((63) / 8u + 1u)];  
N    OS_PRIO OSEventGrp;                    /* Group corresponding to tasks waiting for event to occur  */
N} OS_MBOX_DATA;
N#endif
N
N/*
N*********************************************************************************************************
N*                                  MEMORY PARTITION DATA STRUCTURES
N*********************************************************************************************************
N*/
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1 > 0u) && (0 > 0u)
Stypedef struct os_mem {                   /* MEMORY CONTROL BLOCK                                      */
S    void   *OSMemAddr;                    /* Pointer to beginning of memory partition                  */
S    void   *OSMemFreeList;                /* Pointer to list of free memory blocks                     */
S    INT32U  OSMemBlkSize;                 /* Size (in bytes) of each block of memory                   */
S    INT32U  OSMemNBlks;                   /* Total number of blocks in this partition                  */
S    INT32U  OSMemNFree;                   /* Number of memory blocks remaining in this partition       */
S#if OS_MEM_NAME_EN > 0u
S    INT8U  *OSMemName;                    /* Memory partition name                                     */
S#endif
S} OS_MEM;
S
S
Stypedef struct os_mem_data {
S    void   *OSAddr;                    /* Pointer to the beginning address of the memory partition     */
S    void   *OSFreeList;                /* Pointer to the beginning of the free list of memory blocks   */
S    INT32U  OSBlkSize;                 /* Size (in bytes) of each memory block                         */
S    INT32U  OSNBlks;                   /* Total number of blocks in the partition                      */
S    INT32U  OSNFree;                   /* Number of memory blocks free                                 */
S    INT32U  OSNUsed;                   /* Number of memory blocks used                                 */
S} OS_MEM_DATA;
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   MUTUAL EXCLUSION SEMAPHORE DATA
N*********************************************************************************************************
N*/
N
N#if OS_MUTEX_EN > 0u
X#if 1 > 0u
Ntypedef struct os_mutex_data {
N    OS_PRIO OSEventTbl[OS_EVENT_TBL_SIZE];  /* List of tasks waiting for event to occur                */
X    OS_PRIO OSEventTbl[((63) / 8u + 1u)];   
N    OS_PRIO OSEventGrp;                     /* Group corresponding to tasks waiting for event to occur */
N    BOOLEAN OSValue;                        /* Mutex value (OS_FALSE = used, OS_TRUE = available)      */
N    INT8U   OSOwnerPrio;                    /* Mutex owner's task priority or 0xFF if no owner         */
N    INT8U   OSMutexPCP;                     /* Priority Ceiling Priority or 0xFF if PCP disabled       */
N} OS_MUTEX_DATA;
N#endif
N
N/*
N*********************************************************************************************************
N*                                         MESSAGE QUEUE DATA
N*********************************************************************************************************
N*/
N
N#if OS_Q_EN > 0u
X#if 1 > 0u
Ntypedef struct os_q {                   /* QUEUE CONTROL BLOCK                                         */
N    struct os_q   *OSQPtr;              /* Link to next queue control block in list of free blocks     */
N    void         **OSQStart;            /* Pointer to start of queue data                              */
N    void         **OSQEnd;              /* Pointer to end   of queue data                              */
N    void         **OSQIn;               /* Pointer to where next message will be inserted  in   the Q  */
N    void         **OSQOut;              /* Pointer to where next message will be extracted from the Q  */
N    INT16U         OSQSize;             /* Size of queue (maximum number of entries)                   */
N    INT16U         OSQEntries;          /* Current number of entries in the queue                      */
N} OS_Q;
N
N
Ntypedef struct os_q_data {
N    void          *OSMsg;               /* Pointer to next message to be extracted from queue          */
N    INT16U         OSNMsgs;             /* Number of messages in message queue                         */
N    INT16U         OSQSize;             /* Size of message queue                                       */
N    OS_PRIO        OSEventTbl[OS_EVENT_TBL_SIZE];  /* List of tasks waiting for event to occur         */
X    OS_PRIO        OSEventTbl[((63) / 8u + 1u)];   
N    OS_PRIO        OSEventGrp;          /* Group corresponding to tasks waiting for event to occur     */
N} OS_Q_DATA;
N#endif
N
N/*
N*********************************************************************************************************
N*                                           SEMAPHORE DATA
N*********************************************************************************************************
N*/
N
N#if OS_SEM_EN > 0u
X#if 1 > 0u
Ntypedef struct os_sem_data {
N    INT16U  OSCnt;                          /* Semaphore count                                         */
N    OS_PRIO OSEventTbl[OS_EVENT_TBL_SIZE];  /* List of tasks waiting for event to occur                */
X    OS_PRIO OSEventTbl[((63) / 8u + 1u)];   
N    OS_PRIO OSEventGrp;                     /* Group corresponding to tasks waiting for event to occur */
N} OS_SEM_DATA;
N#endif
N
N/*
N*********************************************************************************************************
N*                                           TASK STACK DATA
N*********************************************************************************************************
N*/
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1 > 0u
Ntypedef struct os_stk_data {
N    INT32U  OSFree;                    /* Number of free entries on the stack                          */
N    INT32U  OSUsed;                    /* Number of entries used on the stack                          */
N} OS_STK_DATA;
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         TASK CONTROL BLOCK
N*********************************************************************************************************
N*/
N
Ntypedef struct os_tcb {
N    OS_STK          *OSTCBStkPtr;           /* Pointer to current top of stack                         */
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1 > 0u
N    void            *OSTCBExtPtr;           /* Pointer to user definable data for TCB extension        */
N    OS_STK          *OSTCBStkBottom;        /* Pointer to bottom of stack                              */
N    INT32U           OSTCBStkSize;          /* Size of task stack (in number of stack elements)        */
N    INT16U           OSTCBOpt;              /* Task options as passed by OSTaskCreateExt()             */
N    INT16U           OSTCBId;               /* Task ID (0..65535)                                      */
N#endif
N
N    struct os_tcb   *OSTCBNext;             /* Pointer to next     TCB in the TCB list                 */
N    struct os_tcb   *OSTCBPrev;             /* Pointer to previous TCB in the TCB list                 */
N
N#if (OS_EVENT_EN)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u)))
N    OS_EVENT        *OSTCBEventPtr;         /* Pointer to          event control block                 */
N#endif
N
N#if (OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u))) && (0 > 0u)
S    OS_EVENT       **OSTCBEventMultiPtr;    /* Pointer to multiple event control blocks                */
N#endif
N
N#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
X#if ((1 > 0u) && (4 > 0u)) || (1 > 0u)
N    void            *OSTCBMsg;              /* Message received from OSMboxPost() or OSQPost()         */
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1 > 0u) && (5 > 0u)
N#if OS_TASK_DEL_EN > 0u
X#if 1 > 0u
N    OS_FLAG_NODE    *OSTCBFlagNode;         /* Pointer to event flag node                              */
N#endif
N    OS_FLAGS         OSTCBFlagsRdy;         /* Event flags that made task ready to run                 */
N#endif
N
N    INT32U           OSTCBDly;              /* Nbr ticks to delay task or, timeout waiting for event   */
N    INT8U            OSTCBStat;             /* Task      status                                        */
N    INT8U            OSTCBStatPend;         /* Task PEND status                                        */
N    INT8U            OSTCBPrio;             /* Task priority (0 == highest)                            */
N
N    INT8U            OSTCBX;                /* Bit position in group  corresponding to task priority   */
N    INT8U            OSTCBY;                /* Index into ready table corresponding to task priority   */
N    OS_PRIO          OSTCBBitX;             /* Bit mask to access bit position in ready table          */
N    OS_PRIO          OSTCBBitY;             /* Bit mask to access bit position in ready group          */
N
N#if OS_TASK_DEL_EN > 0u
X#if 1 > 0u
N    INT8U            OSTCBDelReq;           /* Indicates whether a task needs to delete itself         */
N#endif
N
N#if OS_TASK_PROFILE_EN > 0u
X#if 1 > 0u
N    INT32U           OSTCBCtxSwCtr;         /* Number of time the task was switched in                 */
N    INT32U           OSTCBCyclesTot;        /* Total number of clock cycles the task has been running  */
N    INT32U           OSTCBCyclesStart;      /* Snapshot of cycle counter at start of task resumption   */
N    OS_STK          *OSTCBStkBase;          /* Pointer to the beginning of the task stack              */
N    INT32U           OSTCBStkUsed;          /* Number of bytes used from the stack                     */
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1 > 0u
N    INT8U           *OSTCBTaskName;
N#endif
N
N#if OS_TASK_REG_TBL_SIZE > 0u
X#if 1 > 0u
N    INT32U           OSTCBRegTbl[OS_TASK_REG_TBL_SIZE];
X    INT32U           OSTCBRegTbl[1];
N#endif
N} OS_TCB;
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          TIMER DATA TYPES
N*********************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 0 > 0u
Stypedef  void (*OS_TMR_CALLBACK)(void *ptmr, void *parg);
S
S
S
Stypedef  struct  os_tmr {
S    INT8U            OSTmrType;                       /* Should be set to OS_TMR_TYPE                                  */
S    OS_TMR_CALLBACK  OSTmrCallback;                   /* Function to call when timer expires                           */
S    void            *OSTmrCallbackArg;                /* Argument to pass to function when timer expires               */
S    void            *OSTmrNext;                       /* Double link list pointers                                     */
S    void            *OSTmrPrev;
S    INT32U           OSTmrMatch;                      /* Timer expires when OSTmrTime == OSTmrMatch                    */
S    INT32U           OSTmrDly;                        /* Delay time before periodic update starts                      */
S    INT32U           OSTmrPeriod;                     /* Period to repeat timer                                        */
S#if OS_TMR_CFG_NAME_EN > 0u
S    INT8U           *OSTmrName;                       /* Name to give the timer                                        */
S#endif
S    INT8U            OSTmrOpt;                        /* Options (see OS_TMR_OPT_xxx)                                  */
S    INT8U            OSTmrState;                      /* Indicates the state of the timer:                             */
S                                                      /*     OS_TMR_STATE_UNUSED                                       */
S                                                      /*     OS_TMR_STATE_RUNNING                                      */
S                                                      /*     OS_TMR_STATE_STOPPED                                      */
S} OS_TMR;
S
S
S
Stypedef  struct  os_tmr_wheel {
S    OS_TMR          *OSTmrFirst;                      /* Pointer to first timer in linked list                         */
S    INT16U           OSTmrEntries;
S} OS_TMR_WHEEL;
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
NOS_EXT  INT32U            OSCtxSwCtr;               /* Counter of number of context switches           */
X  INT32U            OSCtxSwCtr;                
N
N#if (OS_EVENT_EN) && (OS_MAX_EVENTS > 0u)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u))) && (10 > 0u)
NOS_EXT  OS_EVENT         *OSEventFreeList;          /* Pointer to list of free EVENT control blocks    */
X  OS_EVENT         *OSEventFreeList;           
NOS_EXT  OS_EVENT          OSEventTbl[OS_MAX_EVENTS];/* Table of EVENT control blocks                   */
X  OS_EVENT          OSEventTbl[10]; 
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1 > 0u) && (5 > 0u)
NOS_EXT  OS_FLAG_GRP       OSFlagTbl[OS_MAX_FLAGS];  /* Table containing event flag groups              */
X  OS_FLAG_GRP       OSFlagTbl[5];   
NOS_EXT  OS_FLAG_GRP      *OSFlagFreeList;           /* Pointer to free list of event flag groups       */
X  OS_FLAG_GRP      *OSFlagFreeList;            
N#endif
N
N#if OS_TASK_STAT_EN > 0u
X#if 1 > 0u
NOS_EXT  INT8U             OSCPUUsage;               /* Percentage of CPU used                          */
X  INT8U             OSCPUUsage;                
NOS_EXT  INT32U            OSIdleCtrMax;             /* Max. value that idle ctr can take in 1 sec.     */
X  INT32U            OSIdleCtrMax;              
NOS_EXT  INT32U            OSIdleCtrRun;             /* Val. reached by idle ctr at run time in 1 sec.  */
X  INT32U            OSIdleCtrRun;              
NOS_EXT  BOOLEAN           OSStatRdy;                /* Flag indicating that the statistic task is rdy  */
X  BOOLEAN           OSStatRdy;                 
NOS_EXT  OS_STK            OSTaskStatStk[OS_TASK_STAT_STK_SIZE];      /* Statistics task stack          */
X  OS_STK            OSTaskStatStk[128];       
N#endif
N
NOS_EXT  INT8U             OSIntNesting;             /* Interrupt nesting level                         */
X  INT8U             OSIntNesting;              
N
NOS_EXT  INT8U             OSLockNesting;            /* Multitasking lock nesting level                 */
X  INT8U             OSLockNesting;             
N
NOS_EXT  INT8U             OSPrioCur;                /* Priority of current task                        */
X  INT8U             OSPrioCur;                 
NOS_EXT  INT8U             OSPrioHighRdy;            /* Priority of highest priority task               */
X  INT8U             OSPrioHighRdy;             
N
NOS_EXT  OS_PRIO           OSRdyGrp;                        /* Ready list group                         */
X  OS_PRIO           OSRdyGrp;                         
NOS_EXT  OS_PRIO           OSRdyTbl[OS_RDY_TBL_SIZE];       /* Table of tasks which are ready to run    */
X  OS_PRIO           OSRdyTbl[((63) / 8u + 1u)];        
N
NOS_EXT  BOOLEAN           OSRunning;                       /* Flag indicating that kernel is running   */
X  BOOLEAN           OSRunning;                        
N
NOS_EXT  INT8U             OSTaskCtr;                       /* Number of tasks created                  */
X  INT8U             OSTaskCtr;                        
N
NOS_EXT  volatile  INT32U  OSIdleCtr;                                 /* Idle counter                   */
X  volatile  INT32U  OSIdleCtr;                                  
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
SOS_EXT  BOOLEAN           OSSafetyCriticalStartFlag;
N#endif
N
NOS_EXT  OS_STK            OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE];      /* Idle task stack                */
X  OS_STK            OSTaskIdleStk[128];       
N
N
NOS_EXT  OS_TCB           *OSTCBCur;                        /* Pointer to currently running TCB         */
X  OS_TCB           *OSTCBCur;                         
NOS_EXT  OS_TCB           *OSTCBFreeList;                   /* Pointer to list of free TCBs             */
X  OS_TCB           *OSTCBFreeList;                    
NOS_EXT  OS_TCB           *OSTCBHighRdy;                    /* Pointer to highest priority TCB R-to-R   */
X  OS_TCB           *OSTCBHighRdy;                     
NOS_EXT  OS_TCB           *OSTCBList;                       /* Pointer to doubly linked list of TCBs    */
X  OS_TCB           *OSTCBList;                        
NOS_EXT  OS_TCB           *OSTCBPrioTbl[OS_LOWEST_PRIO + 1u];    /* Table of pointers to created TCBs   */
X  OS_TCB           *OSTCBPrioTbl[63 + 1u];     
NOS_EXT  OS_TCB            OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS];   /* Table of TCBs                  */
X  OS_TCB            OSTCBTbl[5 + 2u];    
N
N#if OS_TICK_STEP_EN > 0u
X#if 1 > 0u
NOS_EXT  INT8U             OSTickStepState;          /* Indicates the state of the tick step feature    */
X  INT8U             OSTickStepState;           
N#endif
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1 > 0u) && (0 > 0u)
SOS_EXT  OS_MEM           *OSMemFreeList;            /* Pointer to free list of memory partitions       */
SOS_EXT  OS_MEM            OSMemTbl[OS_MAX_MEM_PART];/* Storage for memory partition manager            */
N#endif
N
N#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
X#if (1 > 0u) && (4 > 0u)
NOS_EXT  OS_Q             *OSQFreeList;              /* Pointer to list of free QUEUE control blocks    */
X  OS_Q             *OSQFreeList;               
NOS_EXT  OS_Q              OSQTbl[OS_MAX_QS];        /* Table of QUEUE control blocks                   */
X  OS_Q              OSQTbl[4];         
N#endif
N
N#if OS_TASK_REG_TBL_SIZE > 0u
X#if 1 > 0u
NOS_EXT  INT8U             OSTaskRegNextAvailID;     /* Next available Task register ID                 */
X  INT8U             OSTaskRegNextAvailID;      
N#endif
N
N#if OS_TIME_GET_SET_EN > 0u
X#if 1 > 0u
NOS_EXT  volatile  INT32U  OSTime;                   /* Current value of system time (in ticks)         */
X  volatile  INT32U  OSTime;                    
N#endif
N
N#if OS_TMR_EN > 0u
X#if 0 > 0u
SOS_EXT  INT16U            OSTmrFree;                /* Number of free entries in the timer pool        */
SOS_EXT  INT16U            OSTmrUsed;                /* Number of timers used                           */
SOS_EXT  INT32U            OSTmrTime;                /* Current timer time                              */
S
SOS_EXT  OS_EVENT         *OSTmrSem;                 /* Sem. used to gain exclusive access to timers    */
SOS_EXT  OS_EVENT         *OSTmrSemSignal;           /* Sem. used to signal the update of timers        */
S
SOS_EXT  OS_TMR            OSTmrTbl[OS_TMR_CFG_MAX]; /* Table containing pool of timers                 */
SOS_EXT  OS_TMR           *OSTmrFreeList;            /* Pointer to free list of timers                  */
SOS_EXT  OS_STK            OSTmrTaskStk[OS_TASK_TMR_STK_SIZE];
S
SOS_EXT  OS_TMR_WHEEL      OSTmrWheelTbl[OS_TMR_CFG_WHEEL_SIZE];
N#endif
N
Nextern  INT8U   const     OSUnMapTbl[256];          /* Priority->Index    lookup table                 */
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          FUNCTION PROTOTYPES
N*                                     (Target Independent Functions)
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                            MISCELLANEOUS
N*********************************************************************************************************
N*/
N
N#if (OS_EVENT_EN)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u)))
N
N#if (OS_EVENT_NAME_EN > 0u)
X#if (0 > 0u)
SINT8U         OSEventNameGet          (OS_EVENT        *pevent,
S                                       INT8U          **pname,
S                                       INT8U           *perr);
S
Svoid          OSEventNameSet          (OS_EVENT        *pevent,
S                                       INT8U           *pname,
S                                       INT8U           *perr);
N#endif
N
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (0 > 0u)
SINT16U        OSEventPendMulti        (OS_EVENT       **pevents_pend,
S                                       OS_EVENT       **pevents_rdy,
S                                       void           **pmsgs_rdy,
S                                       INT32U           timeout,
S                                       INT8U           *perr);
N#endif
N
N#endif
N
N/*
N*********************************************************************************************************
N*                                       EVENT FLAGS MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1 > 0u) && (5 > 0u)
N
N#if OS_FLAG_ACCEPT_EN > 0u
X#if 1 > 0u
NOS_FLAGS      OSFlagAccept            (OS_FLAG_GRP     *pgrp,
N                                       OS_FLAGS         flags,
N                                       INT8U            wait_type,
N                                       INT8U           *perr);
N#endif
N
NOS_FLAG_GRP  *OSFlagCreate            (OS_FLAGS         flags,
N                                       INT8U           *perr);
N
N#if OS_FLAG_DEL_EN > 0u
X#if 1 > 0u
NOS_FLAG_GRP  *OSFlagDel               (OS_FLAG_GRP     *pgrp,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_FLAG_NAME_EN > 0u)
X#if (1 > 0u) && (1 > 0u)
NINT8U         OSFlagNameGet           (OS_FLAG_GRP     *pgrp,
N                                       INT8U          **pname,
N                                       INT8U           *perr);
N
Nvoid          OSFlagNameSet           (OS_FLAG_GRP     *pgrp,
N                                       INT8U           *pname,
N                                       INT8U           *perr);
N#endif
N
NOS_FLAGS      OSFlagPend              (OS_FLAG_GRP     *pgrp,
N                                       OS_FLAGS         flags,
N                                       INT8U            wait_type,
N                                       INT32U           timeout,
N                                       INT8U           *perr);
N
NOS_FLAGS      OSFlagPendGetFlagsRdy   (void);
NOS_FLAGS      OSFlagPost              (OS_FLAG_GRP     *pgrp,
N                                       OS_FLAGS         flags,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N
N#if OS_FLAG_QUERY_EN > 0u
X#if 1 > 0u
NOS_FLAGS      OSFlagQuery             (OS_FLAG_GRP     *pgrp,
N                                       INT8U           *perr);
N#endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                     MESSAGE MAILBOX MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if OS_MBOX_EN > 0u
X#if 1 > 0u
N
N#if OS_MBOX_ACCEPT_EN > 0u
X#if 1 > 0u
Nvoid         *OSMboxAccept            (OS_EVENT        *pevent);
N#endif
N
NOS_EVENT     *OSMboxCreate            (void            *pmsg);
N
N#if OS_MBOX_DEL_EN > 0u
X#if 1 > 0u
NOS_EVENT     *OSMboxDel               (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
Nvoid         *OSMboxPend              (OS_EVENT        *pevent,
N                                       INT32U           timeout,
N                                       INT8U           *perr);
N
N#if OS_MBOX_PEND_ABORT_EN > 0u
X#if 1 > 0u
NINT8U         OSMboxPendAbort         (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
N#if OS_MBOX_POST_EN > 0u
X#if 1 > 0u
NINT8U         OSMboxPost              (OS_EVENT        *pevent,
N                                       void            *pmsg);
N#endif
N
N#if OS_MBOX_POST_OPT_EN > 0u
X#if 1 > 0u
NINT8U         OSMboxPostOpt           (OS_EVENT        *pevent,
N                                       void            *pmsg,
N                                       INT8U            opt);
N#endif
N
N#if OS_MBOX_QUERY_EN > 0u
X#if 1 > 0u
NINT8U         OSMboxQuery             (OS_EVENT        *pevent,
N                                       OS_MBOX_DATA    *p_mbox_data);
N#endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                          MEMORY MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1 > 0u) && (0 > 0u)
S
SOS_MEM       *OSMemCreate             (void            *addr,
S                                       INT32U           nblks,
S                                       INT32U           blksize,
S                                       INT8U           *perr);
S
Svoid         *OSMemGet                (OS_MEM          *pmem,
S                                       INT8U           *perr);
S#if OS_MEM_NAME_EN > 0u
SINT8U         OSMemNameGet            (OS_MEM          *pmem,
S                                       INT8U          **pname,
S                                       INT8U           *perr);
S
Svoid          OSMemNameSet            (OS_MEM          *pmem,
S                                       INT8U           *pname,
S                                       INT8U           *perr);
S#endif
SINT8U         OSMemPut                (OS_MEM          *pmem,
S                                       void            *pblk);
S
S#if OS_MEM_QUERY_EN > 0u
SINT8U         OSMemQuery              (OS_MEM          *pmem,
S                                       OS_MEM_DATA     *p_mem_data);
S#endif
S
N#endif
N
N/*
N*********************************************************************************************************
N*                                MUTUAL EXCLUSION SEMAPHORE MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if OS_MUTEX_EN > 0u
X#if 1 > 0u
N
N#if OS_MUTEX_ACCEPT_EN > 0u
X#if 1 > 0u
NBOOLEAN       OSMutexAccept           (OS_EVENT        *pevent,
N                                       INT8U           *perr);
N#endif
N
NOS_EVENT     *OSMutexCreate           (INT8U            prio,
N                                       INT8U           *perr);
N
N#if OS_MUTEX_DEL_EN > 0u
X#if 1 > 0u
NOS_EVENT     *OSMutexDel              (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
Nvoid          OSMutexPend             (OS_EVENT        *pevent,
N                                       INT32U           timeout,
N                                       INT8U           *perr);
N
NINT8U         OSMutexPost             (OS_EVENT        *pevent);
N
N#if OS_MUTEX_QUERY_EN > 0u
X#if 1 > 0u
NINT8U         OSMutexQuery            (OS_EVENT        *pevent,
N                                       OS_MUTEX_DATA   *p_mutex_data);
N#endif
N
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      MESSAGE QUEUE MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
X#if (1 > 0u) && (4 > 0u)
N
N#if OS_Q_ACCEPT_EN > 0u
X#if 1 > 0u
Nvoid         *OSQAccept               (OS_EVENT        *pevent,
N                                       INT8U           *perr);
N#endif
N
NOS_EVENT     *OSQCreate               (void           **start,
N                                       INT16U           size);
N
N#if OS_Q_DEL_EN > 0u
X#if 1 > 0u
NOS_EVENT     *OSQDel                  (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
N#if OS_Q_FLUSH_EN > 0u
X#if 1 > 0u
NINT8U         OSQFlush                (OS_EVENT        *pevent);
N#endif
N
Nvoid         *OSQPend                 (OS_EVENT        *pevent,
N                                       INT32U           timeout,
N                                       INT8U           *perr);
N
N#if OS_Q_PEND_ABORT_EN > 0u
X#if 1 > 0u
NINT8U         OSQPendAbort            (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
N#if OS_Q_POST_EN > 0u
X#if 1 > 0u
NINT8U         OSQPost                 (OS_EVENT        *pevent,
N                                       void            *pmsg);
N#endif
N
N#if OS_Q_POST_FRONT_EN > 0u
X#if 1 > 0u
NINT8U         OSQPostFront            (OS_EVENT        *pevent,
N                                       void            *pmsg);
N#endif
N
N#if OS_Q_POST_OPT_EN > 0u
X#if 1 > 0u
NINT8U         OSQPostOpt              (OS_EVENT        *pevent,
N                                       void            *pmsg,
N                                       INT8U            opt);
N#endif
N
N#if OS_Q_QUERY_EN > 0u
X#if 1 > 0u
NINT8U         OSQQuery                (OS_EVENT        *pevent,
N                                       OS_Q_DATA       *p_q_data);
N#endif
N
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        SEMAPHORE MANAGEMENT
N*********************************************************************************************************
N*/
N#if OS_SEM_EN > 0u
X#if 1 > 0u
N
N#if OS_SEM_ACCEPT_EN > 0u
X#if 1 > 0u
NINT16U        OSSemAccept             (OS_EVENT        *pevent);
N#endif
N
NOS_EVENT     *OSSemCreate             (INT16U           cnt);
N
N#if OS_SEM_DEL_EN > 0u
X#if 1 > 0u
NOS_EVENT     *OSSemDel                (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
Nvoid          OSSemPend               (OS_EVENT        *pevent,
N                                       INT32U           timeout,
N                                       INT8U           *perr);
N
N#if OS_SEM_PEND_ABORT_EN > 0u
X#if 1 > 0u
NINT8U         OSSemPendAbort          (OS_EVENT        *pevent,
N                                       INT8U            opt,
N                                       INT8U           *perr);
N#endif
N
NINT8U         OSSemPost               (OS_EVENT        *pevent);
N
N#if OS_SEM_QUERY_EN > 0u
X#if 1 > 0u
NINT8U         OSSemQuery              (OS_EVENT        *pevent,
N                                       OS_SEM_DATA     *p_sem_data);
N#endif
N
N#if OS_SEM_SET_EN > 0u
X#if 1 > 0u
Nvoid          OSSemSet                (OS_EVENT        *pevent,
N                                       INT16U           cnt,
N                                       INT8U           *perr);
N#endif
N
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           TASK MANAGEMENT
N*********************************************************************************************************
N*/
N#if OS_TASK_CHANGE_PRIO_EN > 0u
X#if 1 > 0u
NINT8U         OSTaskChangePrio        (INT8U            oldprio,
N                                       INT8U            newprio);
N#endif
N
N#if OS_TASK_CREATE_EN > 0u
X#if 1 > 0u
NINT8U         OSTaskCreate            (void           (*task)(void *p_arg),
N                                       void            *p_arg,
N                                       OS_STK          *ptos,
N                                       INT8U            prio);
N#endif
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1 > 0u
NINT8U         OSTaskCreateExt         (void           (*task)(void *p_arg),
N                                       void            *p_arg,
N                                       OS_STK          *ptos,
N                                       INT8U            prio,
N                                       INT16U           id,
N                                       OS_STK          *pbos,
N                                       INT32U           stk_size,
N                                       void            *pext,
N                                       INT16U           opt);
N#endif
N
N#if OS_TASK_DEL_EN > 0u
X#if 1 > 0u
NINT8U         OSTaskDel               (INT8U            prio);
NINT8U         OSTaskDelReq            (INT8U            prio);
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1 > 0u
NINT8U         OSTaskNameGet           (INT8U            prio,
N                                       INT8U          **pname,
N                                       INT8U           *perr);
N
Nvoid          OSTaskNameSet           (INT8U            prio,
N                                       INT8U           *pname,
N                                       INT8U           *perr);
N#endif
N
N#if OS_TASK_SUSPEND_EN > 0u
X#if 1 > 0u
NINT8U         OSTaskResume            (INT8U            prio);
NINT8U         OSTaskSuspend           (INT8U            prio);
N#endif
N
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1 > 0u) && (1 > 0u)
NINT8U         OSTaskStkChk            (INT8U            prio,
N                                       OS_STK_DATA     *p_stk_data);
N#endif
N
N#if OS_TASK_QUERY_EN > 0u
X#if 1 > 0u
NINT8U         OSTaskQuery             (INT8U            prio,
N                                       OS_TCB          *p_task_data);
N#endif
N
N
N
N#if OS_TASK_REG_TBL_SIZE > 0u
X#if 1 > 0u
NINT32U        OSTaskRegGet            (INT8U            prio,
N                                       INT8U            id,
N                                       INT8U           *perr);
N
NINT8U         OSTaskRegGetID          (INT8U           *perr);
N
Nvoid          OSTaskRegSet            (INT8U            prio,
N                                       INT8U            id,
N                                       INT32U           value,
N                                       INT8U           *perr);
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           TIME MANAGEMENT
N*********************************************************************************************************
N*/
N
Nvoid          OSTimeDly               (INT32U           ticks);
N
N#if OS_TIME_DLY_HMSM_EN > 0u
X#if 1 > 0u
NINT8U         OSTimeDlyHMSM           (INT8U            hours,
N                                       INT8U            minutes,
N                                       INT8U            seconds,
N                                       INT16U           ms);
N#endif
N
N#if OS_TIME_DLY_RESUME_EN > 0u
X#if 1 > 0u
NINT8U         OSTimeDlyResume         (INT8U            prio);
N#endif
N
N#if OS_TIME_GET_SET_EN > 0u
X#if 1 > 0u
NINT32U        OSTimeGet               (void);
Nvoid          OSTimeSet               (INT32U           ticks);
N#endif
N
Nvoid          OSTimeTick              (void);
N
N/*
N*********************************************************************************************************
N*                                          TIMER MANAGEMENT
N*********************************************************************************************************
N*/
N
N#if OS_TMR_EN > 0u
X#if 0 > 0u
SOS_TMR      *OSTmrCreate              (INT32U           dly,
S                                       INT32U           period,
S                                       INT8U            opt,
S                                       OS_TMR_CALLBACK  callback,
S                                       void            *callback_arg,
S                                       INT8U           *pname,
S                                       INT8U           *perr);
S
SBOOLEAN      OSTmrDel                 (OS_TMR          *ptmr,
S                                       INT8U           *perr);
S
S#if OS_TMR_CFG_NAME_EN > 0u
SINT8U        OSTmrNameGet             (OS_TMR          *ptmr,
S                                       INT8U          **pdest,
S                                       INT8U           *perr);
S#endif
SINT32U       OSTmrRemainGet           (OS_TMR          *ptmr,
S                                       INT8U           *perr);
S
SINT8U        OSTmrStateGet            (OS_TMR          *ptmr,
S                                       INT8U           *perr);
S
SBOOLEAN      OSTmrStart               (OS_TMR          *ptmr,
S                                       INT8U           *perr);
S
SBOOLEAN      OSTmrStop                (OS_TMR          *ptmr,
S                                       INT8U            opt,
S                                       void            *callback_arg,
S                                       INT8U           *perr);
S
SINT8U        OSTmrSignal              (void);
N#endif
N
N/*
N*********************************************************************************************************
N*                                            MISCELLANEOUS
N*********************************************************************************************************
N*/
N
Nvoid          OSInit                  (void);
N
Nvoid          OSIntEnter              (void);
Nvoid          OSIntExit               (void);
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
Svoid          OSSafetyCriticalStart   (void);
N#endif
N
N#if OS_SCHED_LOCK_EN > 0u
X#if 1 > 0u
Nvoid          OSSchedLock             (void);
Nvoid          OSSchedUnlock           (void);
N#endif
N
Nvoid          OSStart                 (void);
N
Nvoid          OSStatInit              (void);
N
NINT16U        OSVersion               (void);
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      INTERNAL FUNCTION PROTOTYPES
N*                            (Your application MUST NOT call these functions)
N*********************************************************************************************************
N*/
N
N#if OS_TASK_DEL_EN > 0u
X#if 1 > 0u
Nvoid          OS_Dummy                (void);
N#endif
N
N#if (OS_EVENT_EN)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u)))
NINT8U         OS_EventTaskRdy         (OS_EVENT        *pevent,
N                                       void            *pmsg,
N                                       INT8U            msk,
N                                       INT8U            pend_stat);
N
Nvoid          OS_EventTaskWait        (OS_EVENT        *pevent);
N
Nvoid          OS_EventTaskRemove      (OS_TCB          *ptcb,
N                                       OS_EVENT        *pevent);
N
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (0 > 0u)
Svoid          OS_EventTaskWaitMulti   (OS_EVENT       **pevents_wait);
S
Svoid          OS_EventTaskRemoveMulti (OS_TCB          *ptcb,
S                                       OS_EVENT       **pevents_multi);
N#endif
N
Nvoid          OS_EventWaitListInit    (OS_EVENT        *pevent);
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1 > 0u) && (5 > 0u)
Nvoid          OS_FlagInit             (void);
Nvoid          OS_FlagUnlink           (OS_FLAG_NODE    *pnode);
N#endif
N
Nvoid          OS_MemClr               (INT8U           *pdest,
N                                       INT16U           size);
N
Nvoid          OS_MemCopy              (INT8U           *pdest,
N                                       INT8U           *psrc,
N                                       INT16U           size);
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1 > 0u) && (0 > 0u)
Svoid          OS_MemInit              (void);
N#endif
N
N#if OS_Q_EN > 0u
X#if 1 > 0u
Nvoid          OS_QInit                (void);
N#endif
N
Nvoid          OS_Sched                (void);
N
N#if (OS_EVENT_NAME_EN > 0u) || (OS_FLAG_NAME_EN > 0u) || (OS_MEM_NAME_EN > 0u) || (OS_TASK_NAME_EN > 0u)
X#if (0 > 0u) || (1 > 0u) || (1 > 0u) || (1 > 0u)
NINT8U         OS_StrLen               (INT8U           *psrc);
N#endif
N
Nvoid          OS_TaskIdle             (void            *p_arg);
N
Nvoid          OS_TaskReturn           (void);
N
N#if OS_TASK_STAT_EN > 0u
X#if 1 > 0u
Nvoid          OS_TaskStat             (void            *p_arg);
N#endif
N
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1 > 0u) && (1 > 0u)
Nvoid          OS_TaskStkClr           (OS_STK          *pbos,
N                                       INT32U           size,
N                                       INT16U           opt);
N#endif
N
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1 > 0u) && (1 > 0u)
Nvoid          OS_TaskStatStkChk       (void);
N#endif
N
NINT8U         OS_TCBInit              (INT8U            prio,
N                                       OS_STK          *ptos,
N                                       OS_STK          *pbos,
N                                       INT16U           id,
N                                       INT32U           stk_size,
N                                       void            *pext,
N                                       INT16U           opt);
N
N#if OS_TMR_EN > 0u
X#if 0 > 0u
Svoid          OSTmr_Init              (void);
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          FUNCTION PROTOTYPES
N*                                      (Target Specific Functions)
N*********************************************************************************************************
N*/
N
N#if OS_DEBUG_EN > 0u
X#if 0 > 0u
Svoid          OSDebugInit             (void);
N#endif
N
Nvoid          OSInitHookBegin         (void);
Nvoid          OSInitHookEnd           (void);
N
Nvoid          OSTaskCreateHook        (OS_TCB          *ptcb);
Nvoid          OSTaskDelHook           (OS_TCB          *ptcb);
N
Nvoid          OSTaskIdleHook          (void);
N
Nvoid          OSTaskReturnHook        (OS_TCB          *ptcb);
N
Nvoid          OSTaskStatHook          (void);
NOS_STK       *OSTaskStkInit           (void           (*task)(void *p_arg),
N                                       void            *p_arg,
N                                       OS_STK          *ptos,
N                                       INT16U           opt);
N
N#if OS_TASK_SW_HOOK_EN > 0u
X#if 1 > 0u
Nvoid          OSTaskSwHook            (void);
N#endif
N
Nvoid          OSTCBInitHook           (OS_TCB          *ptcb);
N
N#if OS_TIME_TICK_HOOK_EN > 0u
X#if 1 > 0u
Nvoid          OSTimeTickHook          (void);
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          FUNCTION PROTOTYPES
N*                                   (Application Specific Functions)
N*********************************************************************************************************
N*/
N
N#if OS_APP_HOOKS_EN > 0u
X#if 0 > 0u
Svoid          App_TaskCreateHook      (OS_TCB          *ptcb);
Svoid          App_TaskDelHook         (OS_TCB          *ptcb);
Svoid          App_TaskIdleHook        (void);
S
Svoid          App_TaskReturnHook      (OS_TCB          *ptcb);
S
Svoid          App_TaskStatHook        (void);
S
S#if OS_TASK_SW_HOOK_EN > 0u
Svoid          App_TaskSwHook          (void);
S#endif
S
Svoid          App_TCBInitHook         (OS_TCB          *ptcb);
S
S#if OS_TIME_TICK_HOOK_EN > 0u
Svoid          App_TimeTickHook        (void);
S#endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                          FUNCTION PROTOTYPES
N*
N* IMPORTANT: These prototypes MUST be placed in OS_CPU.H
N*********************************************************************************************************
N*/
N
N#if 0
Svoid          OSStartHighRdy          (void);
Svoid          OSIntCtxSw              (void);
Svoid          OSCtxSw                 (void);
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   LOOK FOR MISSING #define CONSTANTS
N*
N* This section is used to generate ERROR messages at compile time if certain #define constants are
N* MISSING in OS_CFG.H.  This allows you to quickly determine the source of the error.
N*
N* You SHOULD NOT change this section UNLESS you would like to add more comments as to the source of the
N* compile time error.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                             EVENT FLAGS
N*********************************************************************************************************
N*/
N
N#ifndef OS_FLAG_EN
S#error  "OS_CFG.H, Missing OS_FLAG_EN: Enable (1) or Disable (0) code generation for Event Flags"
N#else
N    #ifndef OS_MAX_FLAGS
S    #error  "OS_CFG.H, Missing OS_MAX_FLAGS: Max. number of Event Flag Groups in your application"
N    #else
N        #if     OS_MAX_FLAGS > 65500u
X        #if     5 > 65500u
S        #error  "OS_CFG.H, OS_MAX_FLAGS must be <= 65500"
N        #endif
N    #endif
N
N    #ifndef OS_FLAGS_NBITS
S    #error  "OS_CFG.H, Missing OS_FLAGS_NBITS: Determine #bits used for event flags, MUST be either 8, 16 or 32"
N    #endif
N
N    #ifndef OS_FLAG_WAIT_CLR_EN
S    #error  "OS_CFG.H, Missing OS_FLAG_WAIT_CLR_EN: Include code for Wait on Clear EVENT FLAGS"
N    #endif
N
N    #ifndef OS_FLAG_ACCEPT_EN
S    #error  "OS_CFG.H, Missing OS_FLAG_ACCEPT_EN: Include code for OSFlagAccept()"
N    #endif
N
N    #ifndef OS_FLAG_DEL_EN
S    #error  "OS_CFG.H, Missing OS_FLAG_DEL_EN: Include code for OSFlagDel()"
N    #endif
N
N    #ifndef OS_FLAG_NAME_EN
S    #error  "OS_CFG.H, Missing OS_FLAG_NAME_EN: Enable flag group names"
N    #endif
N
N    #ifndef OS_FLAG_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_FLAG_QUERY_EN: Include code for OSFlagQuery()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                          MESSAGE MAILBOXES
N*********************************************************************************************************
N*/
N
N#ifndef OS_MBOX_EN
S#error  "OS_CFG.H, Missing OS_MBOX_EN: Enable (1) or Disable (0) code generation for MAILBOXES"
N#else
N    #ifndef OS_MBOX_ACCEPT_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_ACCEPT_EN: Include code for OSMboxAccept()"
N    #endif
N
N    #ifndef OS_MBOX_DEL_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_DEL_EN: Include code for OSMboxDel()"
N    #endif
N
N    #ifndef OS_MBOX_PEND_ABORT_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_PEND_ABORT_EN: Include code for OSMboxPendAbort()"
N    #endif
N
N    #ifndef OS_MBOX_POST_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_POST_EN: Include code for OSMboxPost()"
N    #endif
N
N    #ifndef OS_MBOX_POST_OPT_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_POST_OPT_EN: Include code for OSMboxPostOpt()"
N    #endif
N
N    #ifndef OS_MBOX_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_MBOX_QUERY_EN: Include code for OSMboxQuery()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                          MEMORY MANAGEMENT
N*********************************************************************************************************
N*/
N
N#ifndef OS_MEM_EN
S#error  "OS_CFG.H, Missing OS_MEM_EN: Enable (1) or Disable (0) code generation for MEMORY MANAGER"
N#else
N    #ifndef OS_MAX_MEM_PART
S    #error  "OS_CFG.H, Missing OS_MAX_MEM_PART: Max. number of memory partitions"
N    #else
N        #if     OS_MAX_MEM_PART > 65500u
X        #if     0 > 65500u
S        #error  "OS_CFG.H, OS_MAX_MEM_PART must be <= 65500"
N        #endif
N    #endif
N
N    #ifndef OS_MEM_NAME_EN
S    #error  "OS_CFG.H, Missing OS_MEM_NAME_EN: Enable memory partition names"
N    #endif
N
N    #ifndef OS_MEM_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_MEM_QUERY_EN: Include code for OSMemQuery()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                     MUTUAL EXCLUSION SEMAPHORES
N*********************************************************************************************************
N*/
N
N#ifndef OS_MUTEX_EN
S#error  "OS_CFG.H, Missing OS_MUTEX_EN: Enable (1) or Disable (0) code generation for MUTEX"
N#else
N    #ifndef OS_MUTEX_ACCEPT_EN
S    #error  "OS_CFG.H, Missing OS_MUTEX_ACCEPT_EN: Include code for OSMutexAccept()"
N    #endif
N
N    #ifndef OS_MUTEX_DEL_EN
S    #error  "OS_CFG.H, Missing OS_MUTEX_DEL_EN: Include code for OSMutexDel()"
N    #endif
N
N    #ifndef OS_MUTEX_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_MUTEX_QUERY_EN: Include code for OSMutexQuery()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                           MESSAGE QUEUES
N*********************************************************************************************************
N*/
N
N#ifndef OS_Q_EN
S#error  "OS_CFG.H, Missing OS_Q_EN: Enable (1) or Disable (0) code generation for QUEUES"
N#else
N    #ifndef OS_MAX_QS
S    #error  "OS_CFG.H, Missing OS_MAX_QS: Max. number of queue control blocks"
N    #else
N        #if     OS_MAX_QS > 65500u
X        #if     4 > 65500u
S        #error  "OS_CFG.H, OS_MAX_QS must be <= 65500"
N        #endif
N    #endif
N
N    #ifndef OS_Q_ACCEPT_EN
S    #error  "OS_CFG.H, Missing OS_Q_ACCEPT_EN: Include code for OSQAccept()"
N    #endif
N
N    #ifndef OS_Q_DEL_EN
S    #error  "OS_CFG.H, Missing OS_Q_DEL_EN: Include code for OSQDel()"
N    #endif
N
N    #ifndef OS_Q_FLUSH_EN
S    #error  "OS_CFG.H, Missing OS_Q_FLUSH_EN: Include code for OSQFlush()"
N    #endif
N
N    #ifndef OS_Q_PEND_ABORT_EN
S    #error  "OS_CFG.H, Missing OS_Q_PEND_ABORT_EN: Include code for OSQPendAbort()"
N    #endif
N
N    #ifndef OS_Q_POST_EN
S    #error  "OS_CFG.H, Missing OS_Q_POST_EN: Include code for OSQPost()"
N    #endif
N
N    #ifndef OS_Q_POST_FRONT_EN
S    #error  "OS_CFG.H, Missing OS_Q_POST_FRONT_EN: Include code for OSQPostFront()"
N    #endif
N
N    #ifndef OS_Q_POST_OPT_EN
S    #error  "OS_CFG.H, Missing OS_Q_POST_OPT_EN: Include code for OSQPostOpt()"
N    #endif
N
N    #ifndef OS_Q_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_Q_QUERY_EN: Include code for OSQQuery()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                             SEMAPHORES
N*********************************************************************************************************
N*/
N
N#ifndef OS_SEM_EN
S#error  "OS_CFG.H, Missing OS_SEM_EN: Enable (1) or Disable (0) code generation for SEMAPHORES"
N#else
N    #ifndef OS_SEM_ACCEPT_EN
S    #error  "OS_CFG.H, Missing OS_SEM_ACCEPT_EN: Include code for OSSemAccept()"
N    #endif
N
N    #ifndef OS_SEM_DEL_EN
S    #error  "OS_CFG.H, Missing OS_SEM_DEL_EN: Include code for OSSemDel()"
N    #endif
N
N    #ifndef OS_SEM_PEND_ABORT_EN
S    #error  "OS_CFG.H, Missing OS_SEM_PEND_ABORT_EN: Include code for OSSemPendAbort()"
N    #endif
N
N    #ifndef OS_SEM_QUERY_EN
S    #error  "OS_CFG.H, Missing OS_SEM_QUERY_EN: Include code for OSSemQuery()"
N    #endif
N
N    #ifndef OS_SEM_SET_EN
S    #error  "OS_CFG.H, Missing OS_SEM_SET_EN: Include code for OSSemSet()"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                           TASK MANAGEMENT
N*********************************************************************************************************
N*/
N
N#ifndef OS_MAX_TASKS
S#error  "OS_CFG.H, Missing OS_MAX_TASKS: Max. number of tasks in your application"
N#else
N    #if     OS_MAX_TASKS < 2u
X    #if     5 < 2u
S    #error  "OS_CFG.H,         OS_MAX_TASKS must be >= 2"
N    #endif
N
N    #if     OS_MAX_TASKS >  ((OS_LOWEST_PRIO - OS_N_SYS_TASKS) + 1u)
X    #if     5 >  ((63 - 2u) + 1u)
S    #error  "OS_CFG.H,         OS_MAX_TASKS must be <= OS_LOWEST_PRIO - OS_N_SYS_TASKS + 1"
N    #endif
N
N#endif
N
N#if     OS_LOWEST_PRIO >  254u
X#if     63 >  254u
S#error  "OS_CFG.H,         OS_LOWEST_PRIO must be <= 254 in V2.8x and higher"
N#endif
N
N#ifndef OS_TASK_IDLE_STK_SIZE
S#error  "OS_CFG.H, Missing OS_TASK_IDLE_STK_SIZE: Idle task stack size"
N#endif
N
N#ifndef OS_TASK_STAT_EN
S#error  "OS_CFG.H, Missing OS_TASK_STAT_EN: Enable (1) or Disable(0) the statistics task"
N#endif
N
N#ifndef OS_TASK_STAT_STK_SIZE
S#error  "OS_CFG.H, Missing OS_TASK_STAT_STK_SIZE: Statistics task stack size"
N#endif
N
N#ifndef OS_TASK_STAT_STK_CHK_EN
S#error  "OS_CFG.H, Missing OS_TASK_STAT_STK_CHK_EN: Check task stacks from statistics task"
N#endif
N
N#ifndef OS_TASK_CHANGE_PRIO_EN
S#error  "OS_CFG.H, Missing OS_TASK_CHANGE_PRIO_EN: Include code for OSTaskChangePrio()"
N#endif
N
N#ifndef OS_TASK_CREATE_EN
S#error  "OS_CFG.H, Missing OS_TASK_CREATE_EN: Include code for OSTaskCreate()"
N#endif
N
N#ifndef OS_TASK_CREATE_EXT_EN
S#error  "OS_CFG.H, Missing OS_TASK_CREATE_EXT_EN: Include code for OSTaskCreateExt()"
N#else
N    #if (OS_TASK_CREATE_EXT_EN == 0u) && (OS_TASK_CREATE_EN == 0u)
X    #if (1 == 0u) && (1 == 0u)
S    #error  "OS_CFG.H,         OS_TASK_CREATE_EXT_EN or OS_TASK_CREATE_EN must be Enable (1)"
N    #endif
N#endif
N
N#ifndef OS_TASK_DEL_EN
S#error  "OS_CFG.H, Missing OS_TASK_DEL_EN: Include code for OSTaskDel()"
N#endif
N
N#ifndef OS_TASK_NAME_EN
S#error  "OS_CFG.H, Missing OS_TASK_NAME_EN: Enable task names"
N#endif
N
N#ifndef OS_TASK_SUSPEND_EN
S#error  "OS_CFG.H, Missing OS_TASK_SUSPEND_EN: Include code for OSTaskSuspend() and OSTaskResume()"
N#endif
N
N#ifndef OS_TASK_QUERY_EN
S#error  "OS_CFG.H, Missing OS_TASK_QUERY_EN: Include code for OSTaskQuery()"
N#endif
N
N#ifndef OS_TASK_REG_TBL_SIZE
S#error  "OS_CFG.H, Missing OS_TASK_REG_TBL_SIZE: Include code for task specific registers"
N#else
N    #if     OS_TASK_REG_TBL_SIZE > 255u
X    #if     1 > 255u
S    #error  "OS_CFG.H,         OS_TASK_REG_TBL_SIZE must be <= 255"
N    #endif
N#endif
N
N/*
N*********************************************************************************************************
N*                                           TIME MANAGEMENT
N*********************************************************************************************************
N*/
N
N#ifndef OS_TICKS_PER_SEC
S#error  "OS_CFG.H, Missing OS_TICKS_PER_SEC: Sets the number of ticks in one second"
N#endif
N
N#ifndef OS_TIME_DLY_HMSM_EN
S#error  "OS_CFG.H, Missing OS_TIME_DLY_HMSM_EN: Include code for OSTimeDlyHMSM()"
N#endif
N
N#ifndef OS_TIME_DLY_RESUME_EN
S#error  "OS_CFG.H, Missing OS_TIME_DLY_RESUME_EN: Include code for OSTimeDlyResume()"
N#endif
N
N#ifndef OS_TIME_GET_SET_EN
S#error  "OS_CFG.H, Missing OS_TIME_GET_SET_EN: Include code for OSTimeGet() and OSTimeSet()"
N#endif
N
N/*
N*********************************************************************************************************
N*                                          TIMER MANAGEMENT
N*********************************************************************************************************
N*/
N
N#ifndef OS_TMR_EN
S#error  "OS_CFG.H, Missing OS_TMR_EN: When (1) enables code generation for Timer Management"
S#elif   OS_TMR_EN > 0u
X#elif   0 > 0u
S    #if     OS_SEM_EN == 0u
S    #error  "OS_CFG.H, Semaphore management is required (set OS_SEM_EN to 1) when enabling Timer Management."
S    #error  "          Timer management require TWO semaphores."
S    #endif
S
S    #ifndef OS_TMR_CFG_MAX
S    #error  "OS_CFG.H, Missing OS_TMR_CFG_MAX: Determines the total number of timers in an application (2 .. 65500)"
S    #else
S        #if OS_TMR_CFG_MAX < 2u
S        #error  "OS_CFG.H, OS_TMR_CFG_MAX should be between 2 and 65500"
S        #endif
S
S        #if OS_TMR_CFG_MAX > 65500u
S        #error  "OS_CFG.H, OS_TMR_CFG_MAX should be between 2 and 65500"
S        #endif
S    #endif
S
S    #ifndef OS_TMR_CFG_WHEEL_SIZE
S    #error  "OS_CFG.H, Missing OS_TMR_CFG_WHEEL_SIZE: Sets the size of the timer wheel (1 .. 1023)"
S    #else
S        #if OS_TMR_CFG_WHEEL_SIZE < 2u
S        #error  "OS_CFG.H, OS_TMR_CFG_WHEEL_SIZE should be between 2 and 1024"
S        #endif
S
S        #if OS_TMR_CFG_WHEEL_SIZE > 1024u
S        #error  "OS_CFG.H, OS_TMR_CFG_WHEEL_SIZE should be between 2 and 1024"
S        #endif
S    #endif
S
S    #ifndef OS_TMR_CFG_NAME_EN
S    #error  "OS_CFG.H, Missing OS_TMR_CFG_NAME_EN: Enable Timer names"
S    #endif
S
S    #ifndef OS_TMR_CFG_TICKS_PER_SEC
S    #error  "OS_CFG.H, Missing OS_TMR_CFG_TICKS_PER_SEC: Determines the rate at which the timer management task will run (Hz)"
S    #endif
S
S    #ifndef OS_TASK_TMR_STK_SIZE
S    #error  "OS_CFG.H, Missing OS_TASK_TMR_STK_SIZE: Determines the size of the Timer Task's stack"
S    #endif
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                            MISCELLANEOUS
N*********************************************************************************************************
N*/
N
N#ifndef OS_ARG_CHK_EN
S#error  "OS_CFG.H, Missing OS_ARG_CHK_EN: Enable (1) or Disable (0) argument checking"
N#endif
N
N
N#ifndef OS_CPU_HOOKS_EN
S#error  "OS_CFG.H, Missing OS_CPU_HOOKS_EN: uC/OS-II hooks are found in the processor port files when 1"
N#endif
N
N
N#ifndef OS_APP_HOOKS_EN
S#error  "OS_CFG.H, Missing OS_APP_HOOKS_EN: Application-defined hooks are called from the uC/OS-II hooks"
N#endif
N
N
N#ifndef OS_DEBUG_EN
S#error  "OS_CFG.H, Missing OS_DEBUG_EN: Allows you to include variables for debugging or not"
N#endif
N
N
N#ifndef OS_LOWEST_PRIO
S#error  "OS_CFG.H, Missing OS_LOWEST_PRIO: Defines the lowest priority that can be assigned"
N#endif
N
N
N#ifndef OS_MAX_EVENTS
S#error  "OS_CFG.H, Missing OS_MAX_EVENTS: Max. number of event control blocks in your application"
N#else
N    #if     OS_MAX_EVENTS > 65500u
X    #if     10 > 65500u
S    #error  "OS_CFG.H, OS_MAX_EVENTS must be <= 65500"
N    #endif
N#endif
N
N
N#ifndef OS_SCHED_LOCK_EN
S#error  "OS_CFG.H, Missing OS_SCHED_LOCK_EN: Include code for OSSchedLock() and OSSchedUnlock()"
N#endif
N
N
N#ifndef OS_EVENT_MULTI_EN
S#error  "OS_CFG.H, Missing OS_EVENT_MULTI_EN: Include code for OSEventPendMulti()"
N#endif
N
N
N#ifndef OS_TASK_PROFILE_EN
S#error  "OS_CFG.H, Missing OS_TASK_PROFILE_EN: Include data structure for run-time task profiling"
N#endif
N
N
N#ifndef OS_TASK_SW_HOOK_EN
S#error  "OS_CFG.H, Missing OS_TASK_SW_HOOK_EN: Allows you to include the code for OSTaskSwHook() or not"
N#endif
N
N
N#ifndef OS_TICK_STEP_EN
S#error  "OS_CFG.H, Missing OS_TICK_STEP_EN: Allows to 'step' one tick at a time with uC/OS-View"
N#endif
N
N
N#ifndef OS_TIME_TICK_HOOK_EN
S#error  "OS_CFG.H, Missing OS_TIME_TICK_HOOK_EN: Allows you to include the code for OSTimeTickHook() or not"
N#endif
N
N/*
N*********************************************************************************************************
N*                                         SAFETY CRITICAL USE
N*********************************************************************************************************
N*/
N
N#ifdef SAFETY_CRITICAL_RELEASE
S
S#if    OS_ARG_CHK_EN < 1u
S#error "OS_CFG.H, OS_ARG_CHK_EN must be enabled for safety-critical release code"
S#endif
S
S#if    OS_APP_HOOKS_EN > 0u
S#error "OS_CFG.H, OS_APP_HOOKS_EN must be disabled for safety-critical release code"
S#endif
S
S#if    OS_DEBUG_EN > 0u
S#error "OS_CFG.H, OS_DEBUG_EN must be disabled for safety-critical release code"
S#endif
S
S#ifdef CANTATA
S#error "OS_CFG.H, CANTATA must be disabled for safety-critical release code"
S#endif
S
S#ifdef OS_SCHED_LOCK_EN
S#error "OS_CFG.H, OS_SCHED_LOCK_EN must be disabled for safety-critical release code"
S#endif
S
S#ifdef VSC_VALIDATION_MODE
S#error "OS_CFG.H, VSC_VALIDATION_MODE must be disabled for safety-critical release code"
S#endif
S
S#if    OS_TASK_STAT_EN > 0u
S#error "OS_CFG.H, OS_TASK_STAT_EN must be disabled for safety-critical release code"
S#endif
S
S#if    OS_TICK_STEP_EN > 0u
S#error "OS_CFG.H, OS_TICK_STEP_EN must be disabled for safety-critical release code"
S#endif
S
S#if    OS_FLAG_EN > 0u
S    #if    OS_FLAG_DEL_EN > 0
S    #error "OS_CFG.H, OS_FLAG_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_MBOX_EN > 0u
S    #if    OS_MBOX_DEL_EN > 0u
S    #error "OS_CFG.H, OS_MBOX_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_MUTEX_EN > 0u
S    #if    OS_MUTEX_DEL_EN > 0u
S    #error "OS_CFG.H, OS_MUTEX_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_Q_EN > 0u
S    #if    OS_Q_DEL_EN > 0u
S    #error "OS_CFG.H, OS_Q_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_SEM_EN > 0u
S    #if    OS_SEM_DEL_EN > 0u
S    #error "OS_CFG.H, OS_SEM_DEL_EN must be disabled for safety-critical release code"
S    #endif
S#endif
S
S#if    OS_TASK_DEL_EN > 0u
S#error "OS_CFG.H, OS_TASK_DEL_EN must be disabled for safety-critical release code"
S#endif
S
S#if    OS_CRITICAL_METHOD != 3u
S#error "OS_CPU.H, OS_CRITICAL_METHOD must be type 3 for safety-critical release code"
S#endif
S
N#endif  /* ------------------------ SAFETY_CRITICAL_RELEASE ------------------------ */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 29 "UCOSII\CORE\os_core.c" 2
N#endif
N
N/*
N*********************************************************************************************************
N*                                      PRIORITY RESOLUTION TABLE
N*
N* Note: Index into table is bit pattern to resolve highest priority
N*       Indexed value corresponds to highest priority bit position (i.e. 0..7)
N*********************************************************************************************************
N*/
N
NINT8U  const  OSUnMapTbl[256] = {
N    0u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x00 to 0x0F                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x10 to 0x1F                   */
N    5u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x20 to 0x2F                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x30 to 0x3F                   */
N    6u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x40 to 0x4F                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x50 to 0x5F                   */
N    5u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x60 to 0x6F                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x70 to 0x7F                   */
N    7u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x80 to 0x8F                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0x90 to 0x9F                   */
N    5u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0xA0 to 0xAF                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0xB0 to 0xBF                   */
N    6u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0xC0 to 0xCF                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0xD0 to 0xDF                   */
N    5u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, /* 0xE0 to 0xEF                   */
N    4u, 0u, 1u, 0u, 2u, 0u, 1u, 0u, 3u, 0u, 1u, 0u, 2u, 0u, 1u, 0u  /* 0xF0 to 0xFF                   */
N};
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitEventList(void);
N
Nstatic  void  OS_InitMisc(void);
N
Nstatic  void  OS_InitRdyList(void);
N
Nstatic  void  OS_InitTaskIdle(void);
N
N#if OS_TASK_STAT_EN > 0u
X#if 1 > 0u
Nstatic  void  OS_InitTaskStat(void);
N#endif
N
Nstatic  void  OS_InitTCBList(void);
N
Nstatic  void  OS_SchedNew(void);
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                        GET THE NAME OF A SEMAPHORE, MUTEX, MAILBOX or QUEUE
N*
N* Description: This function is used to obtain the name assigned to a semaphore, mutex, mailbox or queue.
N*
N* Arguments  : pevent    is a pointer to the event group.  'pevent' can point either to a semaphore,
N*                        a mutex, a mailbox or a queue.  Where this function is concerned, the actual
N*                        type is irrelevant.
N*
N*              pname     is a pointer to a pointer to an ASCII string that will receive the name of the semaphore,
N*                        mutex, mailbox or queue.
N*
N*              perr      is a pointer to an error code that can contain one of the following values:
N*
N*                        OS_ERR_NONE                if the name was copied to 'pname'
N*                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to the proper event
N*                                                   control block type.
N*                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
N*                        OS_ERR_PEVENT_NULL         if you passed a NULL pointer for 'pevent'
N*                        OS_ERR_NAME_GET_ISR        if you are trying to call this function from an ISR
N*
N* Returns    : The length of the string or 0 if the 'pevent' is a NULL pointer.
N*********************************************************************************************************
N*/
N
N#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u))) && (0 > 0u)
SINT8U  OSEventNameGet (OS_EVENT   *pevent,
S                       INT8U     **pname,
S                       INT8U      *perr)
S{
S    INT8U      len;
S#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
S#endif
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
S    if (pname == (INT8U **)0) {                   /* Is 'pname' a NULL pointer?                         */
S        *perr = OS_ERR_PNAME_NULL;
S        return (0u);
S    }
S#endif
S    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
S        *perr  = OS_ERR_NAME_GET_ISR;
S        return (0u);
S    }
S    switch (pevent->OSEventType) {
S        case OS_EVENT_TYPE_SEM:
S        case OS_EVENT_TYPE_MUTEX:
S        case OS_EVENT_TYPE_MBOX:
S        case OS_EVENT_TYPE_Q:
S             break;
S
S        default:
S             *perr = OS_ERR_EVENT_TYPE;
S             return (0u);
S    }
S    OS_ENTER_CRITICAL();
S    *pname = pevent->OSEventName;
S    len    = OS_StrLen(*pname);
S    OS_EXIT_CRITICAL();
S    *perr  = OS_ERR_NONE;
S    return (len);
S}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                        ASSIGN A NAME TO A SEMAPHORE, MUTEX, MAILBOX or QUEUE
N*
N* Description: This function assigns a name to a semaphore, mutex, mailbox or queue.
N*
N* Arguments  : pevent    is a pointer to the event group.  'pevent' can point either to a semaphore,
N*                        a mutex, a mailbox or a queue.  Where this function is concerned, it doesn't
N*                        matter the actual type.
N*
N*              pname     is a pointer to an ASCII string that will be used as the name of the semaphore,
N*                        mutex, mailbox or queue.
N*
N*              perr      is a pointer to an error code that can contain one of the following values:
N*
N*                        OS_ERR_NONE                if the requested task is resumed
N*                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to the proper event
N*                                                   control block type.
N*                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
N*                        OS_ERR_PEVENT_NULL         if you passed a NULL pointer for 'pevent'
N*                        OS_ERR_NAME_SET_ISR        if you called this function from an ISR
N*
N* Returns    : None
N*********************************************************************************************************
N*/
N
N#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u))) && (0 > 0u)
Svoid  OSEventNameSet (OS_EVENT  *pevent,
S                      INT8U     *pname,
S                      INT8U     *perr)
S{
S#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
S    OS_CPU_SR  cpu_sr = 0u;
S#endif
S
S
S
S#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return;
S    }
S#endif
S
S#if OS_ARG_CHK_EN > 0u
S    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
S        *perr = OS_ERR_PEVENT_NULL;
S        return;
S    }
S    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
S        *perr = OS_ERR_PNAME_NULL;
S        return;
S    }
S#endif
S    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
S        *perr = OS_ERR_NAME_SET_ISR;
S        return;
S    }
S    switch (pevent->OSEventType) {
S        case OS_EVENT_TYPE_SEM:
S        case OS_EVENT_TYPE_MUTEX:
S        case OS_EVENT_TYPE_MBOX:
S        case OS_EVENT_TYPE_Q:
S             break;
S
S        default:
S             *perr = OS_ERR_EVENT_TYPE;
S             return;
S    }
S    OS_ENTER_CRITICAL();
S    pevent->OSEventName = pname;
S    OS_EXIT_CRITICAL();
S    *perr = OS_ERR_NONE;
S}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       PEND ON MULTIPLE EVENTS
N*
N* Description: This function waits for multiple events.  If multiple events are ready at the start of the
N*              pend call, then all available events are returned as ready.  If the task must pend on the
N*              multiple events, then only the first posted or aborted event is returned as ready.
N*
N* Arguments  : pevents_pend  is a pointer to a NULL-terminated array of event control blocks to wait for.
N*
N*              pevents_rdy   is a pointer to an array to return which event control blocks are available
N*                            or ready.  The size of the array MUST be greater than or equal to the size
N*                            of the 'pevents_pend' array, including terminating NULL.
N*
N*              pmsgs_rdy     is a pointer to an array to return messages from any available message-type
N*                            events.  The size of the array MUST be greater than or equal to the size of
N*                            the 'pevents_pend' array, excluding the terminating NULL.  Since NULL
N*                            messages are valid messages, this array cannot be NULL-terminated.  Instead,
N*                            every available message-type event returns its messages in the 'pmsgs_rdy'
N*                            array at the same index as the event is returned in the 'pevents_rdy' array.
N*                            All other 'pmsgs_rdy' array indices are filled with NULL messages.
N*
N*              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
N*                            wait for the resources up to the amount of time specified by this argument.
N*                            If you specify 0, however, your task will wait forever for the specified
N*                            events or, until the resources becomes available (or the events occur).
N*
N*              perr          is a pointer to where an error message will be deposited.  Possible error
N*                            messages are:
N*
N*                            OS_ERR_NONE         The call was successful and your task owns the resources
N*                                                or, the events you are waiting for occurred; check the
N*                                                'pevents_rdy' array for which events are available.
N*                            OS_ERR_PEND_ABORT   The wait on the events was aborted; check the
N*                                                'pevents_rdy' array for which events were aborted.
N*                            OS_ERR_TIMEOUT      The events were not received within the specified
N*                                                'timeout'.
N*                            OS_ERR_PEVENT_NULL  If 'pevents_pend', 'pevents_rdy', or 'pmsgs_rdy' is a
N*                                                NULL pointer.
N*                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to an array of semaphores,
N*                                                mailboxes, and/or queues.
N*                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
N*                                                would lead to a suspension.
N*                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked.
N*
N* Returns    : >  0          the number of events returned as ready or aborted.
N*              == 0          if no events are returned as ready because of timeout or upon error.
N*
N* Notes      : 1) a. Validate 'pevents_pend' array as valid OS_EVENTs :
N*
N*                        semaphores, mailboxes, queues
N*
N*                 b. Return ALL available events and messages, if any
N*
N*                 c. Add    current task priority as pending to   each events's wait list
N*                      Performed in OS_EventTaskWaitMulti()
N*
N*                 d. Wait on any of multiple events
N*
N*                 e. Remove current task priority as pending from each events's wait list
N*                      Performed in OS_EventTaskRdy(), if events posted or aborted
N*
N*                 f. Return any event posted or aborted, if any
N*                      else
N*                    Return timeout
N*
N*              2) 'pevents_rdy' initialized to NULL PRIOR to all other validation or function handling in
N*                 case of any error(s).
N*********************************************************************************************************
N*/
N/*$PAGE*/
N#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
X#if (((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u))) && (0 > 0u))
SINT16U  OSEventPendMulti (OS_EVENT  **pevents_pend,
S                          OS_EVENT  **pevents_rdy,
S                          void      **pmsgs_rdy,
S                          INT32U      timeout,
S                          INT8U      *perr)
S{
S    OS_EVENT  **pevents;
S    OS_EVENT   *pevent;
S#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
S    OS_Q       *pq;
S#endif
S    BOOLEAN     events_rdy;
S    INT16U      events_rdy_nbr;
S    INT8U       events_stat;
S#if (OS_CRITICAL_METHOD == 3u)                          /* Allocate storage for CPU status register    */
S    OS_CPU_SR   cpu_sr = 0u;
S#endif
S
S
S
S#ifdef OS_SAFETY_CRITICAL
S    if (perr == (INT8U *)0) {
S        OS_SAFETY_CRITICAL_EXCEPTION();
S        return (0u);
S    }
S#endif
S
S#if (OS_ARG_CHK_EN > 0u)
S    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
S       *perr =  OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
S    if (*pevents_pend  == (OS_EVENT *)0) {              /* Validate 'pevents_pend'                     */
S       *perr =  OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
S    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
S       *perr =  OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
S    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
S       *perr =  OS_ERR_PEVENT_NULL;
S        return (0u);
S    }
S#endif
S
S   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
S
S    pevents     =  pevents_pend;
S    pevent      = *pevents;
S    while  (pevent != (OS_EVENT *)0) {
S        switch (pevent->OSEventType) {                  /* Validate event block types                  */
S#if (OS_SEM_EN  > 0u)
S            case OS_EVENT_TYPE_SEM:
S                 break;
S#endif
S#if (OS_MBOX_EN > 0u)
S            case OS_EVENT_TYPE_MBOX:
S                 break;
S#endif
S#if ((OS_Q_EN   > 0u) && (OS_MAX_QS > 0u))
S            case OS_EVENT_TYPE_Q:
S                 break;
S#endif
S
S            case OS_EVENT_TYPE_MUTEX:
S            case OS_EVENT_TYPE_FLAG:
S            default:
S                *perr = OS_ERR_EVENT_TYPE;
S                 return (0u);
S        }
S        pevents++;
S        pevent = *pevents;
S    }
S
S    if (OSIntNesting  > 0u) {                           /* See if called from ISR ...                  */
S       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
S        return (0u);
S    }
S    if (OSLockNesting > 0u) {                           /* See if called with scheduler locked ...     */
S       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
S        return (0u);
S    }
S
S/*$PAGE*/
S    events_rdy     =  OS_FALSE;
S    events_rdy_nbr =  0u;
S    events_stat    =  OS_STAT_RDY;
S    pevents        =  pevents_pend;
S    pevent         = *pevents;
S    OS_ENTER_CRITICAL();
S    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
S        switch (pevent->OSEventType) {
S#if (OS_SEM_EN > 0u)
S            case OS_EVENT_TYPE_SEM:
S                 if (pevent->OSEventCnt > 0u) {         /* If semaphore count > 0, resource available; */
S                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
S                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
S                      events_rdy   =  OS_TRUE;
S                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
S                      events_rdy_nbr++;
S
S                 } else {
S                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
S                 }
S                 break;
S#endif
S
S#if (OS_MBOX_EN > 0u)
S            case OS_EVENT_TYPE_MBOX:
S                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
S                                                        /* ... return available message,           ... */
S                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
S                     pevent->OSEventPtr  = (void *)0;
S                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
S                      events_rdy         =  OS_TRUE;
S                      events_rdy_nbr++;
S
S                 } else {
S                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
S                 }
S                 break;
S#endif
S
S#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
S            case OS_EVENT_TYPE_Q:
S                 pq = (OS_Q *)pevent->OSEventPtr;
S                 if (pq->OSQEntries > 0u) {             /* If queue NOT empty;                     ... */
S                                                        /* ... return available message,           ... */
S                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
S                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
S                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
S                     }
S                     pq->OSQEntries--;                  /* Update number of queue entries              */
S                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
S                      events_rdy   = OS_TRUE;
S                      events_rdy_nbr++;
S
S                 } else {
S                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
S                 }
S                 break;
S#endif
S
S            case OS_EVENT_TYPE_MUTEX:
S            case OS_EVENT_TYPE_FLAG:
S            default:
S                 OS_EXIT_CRITICAL();
S                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
S                *perr        =  OS_ERR_EVENT_TYPE;
S                 return (events_rdy_nbr);
S        }
S        pevents++;
S        pevent = *pevents;
S    }
S
S    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
S       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
S        OS_EXIT_CRITICAL();
S       *perr        =  OS_ERR_NONE;
S        return (events_rdy_nbr);
S    }
S/*$PAGE*/
S                                                        /* Otherwise, must wait until any event occurs */
S    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
S                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
S    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
S    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
S    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
S
S    OS_EXIT_CRITICAL();
S    OS_Sched();                                         /* Find next highest priority task ready       */
S    OS_ENTER_CRITICAL();
S
S    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
S        case OS_STAT_PEND_OK:
S        case OS_STAT_PEND_ABORT:
S             pevent = OSTCBCur->OSTCBEventPtr;
S             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
S                *pevents_rdy++   =  pevent;             /* ... return available event ...              */
S                *pevents_rdy     = (OS_EVENT *)0;       /* ... & NULL terminate return event array     */
S                  events_rdy_nbr =  1;
S
S             } else {                                   /* Else NO event available, handle as timeout  */
S                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
S                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
S             }
S             break;
S
S        case OS_STAT_PEND_TO:                           /* If events timed out, ...                    */
S        default:                                        /* ... remove task from events' wait lists     */
S             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
S             break;
S    }
S
S    switch (OSTCBCur->OSTCBStatPend) {
S        case OS_STAT_PEND_OK:
S             switch (pevent->OSEventType) {             /* Return event's message                      */
S#if (OS_SEM_EN > 0u)
S                 case OS_EVENT_TYPE_SEM:
S                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
S                      break;
S#endif
S
S#if ((OS_MBOX_EN > 0u) ||                 \
S    ((OS_Q_EN    > 0u) && (OS_MAX_QS > 0u)))
X#if ((OS_MBOX_EN > 0u) ||                     ((OS_Q_EN    > 0u) && (OS_MAX_QS > 0u)))
S                 case OS_EVENT_TYPE_MBOX:
S                 case OS_EVENT_TYPE_Q:
S                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
S                      break;
S#endif
S
S                 case OS_EVENT_TYPE_MUTEX:
S                 case OS_EVENT_TYPE_FLAG:
S                 default:
S                      OS_EXIT_CRITICAL();
S                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
S                     *perr        =  OS_ERR_EVENT_TYPE;
S                      return (events_rdy_nbr);
S             }
S            *perr = OS_ERR_NONE;
S             break;
S
S        case OS_STAT_PEND_ABORT:
S            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
S            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
S             break;
S
S        case OS_STAT_PEND_TO:
S        default:
S            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
S            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
S             break;
S    }
S
S    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
S    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
S    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
S    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
S#if ((OS_MBOX_EN > 0u) ||                 \
S    ((OS_Q_EN    > 0u) && (OS_MAX_QS > 0u)))
X#if ((OS_MBOX_EN > 0u) ||                     ((OS_Q_EN    > 0u) && (OS_MAX_QS > 0u)))
S    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
S#endif
S    OS_EXIT_CRITICAL();
S
S    return (events_rdy_nbr);
S}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           INITIALIZATION
N*
N* Description: This function is used to initialize the internals of uC/OS-II and MUST be called prior to
N*              creating any uC/OS-II object and, prior to calling OSStart().
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nvoid  OSInit (void)
N{
N    OSInitHookBegin();                                           /* Call port specific initialization code   */
N
N    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
N
N    OS_InitRdyList();                                            /* Initialize the Ready List                */
N
N    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
N
N    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
X#if (1 > 0u) && (5 > 0u)
N    OS_FlagInit();                                               /* Initialize the event flag structures     */
N#endif
N
N#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
X#if (1 > 0u) && (0 > 0u)
S    OS_MemInit();                                                /* Initialize the memory manager            */
N#endif
N
N#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
X#if (1 > 0u) && (4 > 0u)
N    OS_QInit();                                                  /* Initialize the message queue structures  */
N#endif
N
N    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
N#if OS_TASK_STAT_EN > 0u
X#if 1 > 0u
N    OS_InitTaskStat();                                           /* Create the Statistic Task                */
N#endif
N
N#if OS_TMR_EN > 0u
X#if 0 > 0u
S    OSTmr_Init();                                                /* Initialize the Timer Manager             */
N#endif
N
N    OSInitHookEnd();                                             /* Call port specific init. code            */
N
N#if OS_DEBUG_EN > 0u
X#if 0 > 0u
S    OSDebugInit();
N#endif
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              ENTER ISR
N*
N* Description: This function is used to notify uC/OS-II that you are about to service an interrupt
N*              service routine (ISR).  This allows uC/OS-II to keep track of interrupt nesting and thus
N*              only perform rescheduling at the last nested ISR.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) This function should be called with interrupts already disabled
N*              2) Your ISR can directly increment OSIntNesting without calling this function because
N*                 OSIntNesting has been declared 'global'.
N*              3) You MUST still call OSIntExit() even though you increment OSIntNesting directly.
N*              4) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every call
N*                 to OSIntEnter() at the beginning of the ISR you MUST have a call to OSIntExit() at the
N*                 end of the ISR.
N*              5) You are allowed to nest interrupts up to 255 levels deep.
N*              6) I removed the OS_ENTER_CRITICAL() and OS_EXIT_CRITICAL() around the increment because
N*                 OSIntEnter() is always called with interrupts disabled.
N*********************************************************************************************************
N*/
N
Nvoid  OSIntEnter (void)
N{
N    if (OSRunning == OS_TRUE) {
X    if (OSRunning == 1u) {
N        if (OSIntNesting < 255u) {
N            OSIntNesting++;                      /* Increment ISR nesting level                        */
N        }
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              EXIT ISR
N*
N* Description: This function is used to notify uC/OS-II that you have completed servicing an ISR.  When
N*              the last nested ISR has completed, uC/OS-II will call the scheduler to determine whether
N*              a new, high-priority task, is ready to run.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every call
N*                 to OSIntEnter() at the beginning of the ISR you MUST have a call to OSIntExit() at the
N*                 end of the ISR.
N*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
N*********************************************************************************************************
N*/
N
Nvoid  OSIntExit (void)
N{
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    if (OSRunning == OS_TRUE) {
X    if (OSRunning == 1u) {
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
N            OSIntNesting--;
N        }
N        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
N            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
N                OS_SchedNew();
N                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
N                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
N#if OS_TASK_PROFILE_EN > 0u
X#if 1 > 0u
N                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
N#endif
N                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
N                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
N                }
N            }
N        }
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                         INDICATE THAT IT'S NO LONGER SAFE TO CREATE OBJECTS
N*
N* Description: This function is called by the application code to indicate that all initialization has
N*              been completed and that kernel objects are no longer allowed to be created.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Note(s)    : 1) You should call this function when you no longer want to allow application code to
N*                 create kernel objects.
N*              2) You need to define the macro 'OS_SAFETY_CRITICAL_IEC61508'
N*********************************************************************************************************
N*/
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
Svoid  OSSafetyCriticalStart (void)
S{
S    OSSafetyCriticalStartFlag = OS_TRUE;
S}
S
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         PREVENT SCHEDULING
N*
N* Description: This function is used to prevent rescheduling to take place.  This allows your application
N*              to prevent context switches until you are ready to permit context switching.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for every
N*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
N*********************************************************************************************************
N*/
N
N#if OS_SCHED_LOCK_EN > 0u
X#if 1 > 0u
Nvoid  OSSchedLock (void)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    if (OSRunning == OS_TRUE) 
X    if (OSRunning == 1u) 
N	{                  /* Make sure multitasking is running                  */
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        if (OSIntNesting == 0u) 
N		{                /* Can't call from an ISR                             */
N            	if (OSLockNesting < 255u) 
N			{          /* Prevent OSLockNesting from wrapping back to 0      */
N                OSLockNesting++;                 /* Increment lock nesting level                       */
N            	}
N        	}
N       	OS_EXIT_CRITICAL();
X       	{OS_CPU_SR_Restore(cpu_sr);};
N    }
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          ENABLE SCHEDULING
N*
N* Description: This function is used to re-allow rescheduling.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for every
N*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
N*********************************************************************************************************
N*/
N
N#if OS_SCHED_LOCK_EN > 0u
X#if 1 > 0u
Nvoid  OSSchedUnlock (void)
N{
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
X    if (OSRunning == 1u) {                             
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
N            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
N                OSLockNesting--;                           /* Decrement lock nesting level             */
N                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
N                    OS_EXIT_CRITICAL();
X                    {OS_CPU_SR_Restore(cpu_sr);};
N                    OS_Sched();                            /* See if a HPT is ready                    */
N                } else {
N                    OS_EXIT_CRITICAL();
X                    {OS_CPU_SR_Restore(cpu_sr);};
N                }
N            } else {
N                OS_EXIT_CRITICAL();
X                {OS_CPU_SR_Restore(cpu_sr);};
N            }
N        } else {
N            OS_EXIT_CRITICAL();
X            {OS_CPU_SR_Restore(cpu_sr);};
N        }
N    }
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         START MULTITASKING
N*
N* Description: This function is used to start the multitasking process which lets uC/OS-II manages the
N*              task that you have created.  Before you can call OSStart(), you MUST have called OSInit()
N*              and you MUST have created at least one task.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Note       : OSStartHighRdy() MUST:
N*                 a) Call OSTaskSwHook() then,
N*                 b) Set OSRunning to OS_TRUE.
N*                 c) Load the context of the task pointed to by OSTCBHighRdy.
N*                 d_ Execute the task.
N*********************************************************************************************************
N*/
N
Nvoid  OSStart (void)
N{
N    if (OSRunning == OS_FALSE) {
X    if (OSRunning == 0u) {
N        OS_SchedNew();                               /* Find highest priority's task priority number   */
N        OSPrioCur     = OSPrioHighRdy;
N        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
N        OSTCBCur      = OSTCBHighRdy;
N        OSStartHighRdy();                            /* Execute target specific code to start task     */
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      STATISTICS INITIALIZATION
N*
N* Description: This function is called by your application to establish CPU usage by first determining
N*              how high a 32-bit counter would count to in 1 second if no other tasks were to execute
N*              during that time.  CPU usage is then determined by a low priority task which keeps track
N*              of this 32-bit counter every second but this time, with other tasks running.  CPU usage is
N*              determined by:
N*
N*                                             OSIdleCtr
N*                 CPU Usage (%) = 100 * (1 - ------------)
N*                                            OSIdleCtrMax
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
N#if OS_TASK_STAT_EN > 0u
X#if 1 > 0u
Nvoid  OSStatInit (void)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
X    OSTimeDly(200 / 10u);            
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
N    OSStatRdy    = OS_TRUE;
X    OSStatRdy    = 1u;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         PROCESS SYSTEM TICK
N*
N* Description: This function is used to signal to uC/OS-II the occurrence of a 'system tick' (also known
N*              as a 'clock tick').  This function should be called by the ticker ISR but, can also be
N*              called by a high priority task.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
NOS_STK T5ms = 0;
N
Nvoid  OSTimeTick (void)
N{
N    OS_TCB    *ptcb;
N#if OS_TICK_STEP_EN > 0u
X#if 1 > 0u
N    BOOLEAN    step;
N#endif
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N	T5ms += 5;
N
N#if OS_TIME_TICK_HOOK_EN > 0u
X#if 1 > 0u
N    OSTimeTickHook();                                      /* Call user definable hook                     */
N#endif
N#if OS_TIME_GET_SET_EN > 0u
X#if 1 > 0u
N    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
X    {cpu_sr = OS_CPU_SR_Save();};                                    
N    OSTime++;
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N#endif
N    if (OSRunning == OS_TRUE) {
X    if (OSRunning == 1u) {
N#if OS_TICK_STEP_EN > 0u
X#if 1 > 0u
N        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
N            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
X            case 0u:                          
N                 step = OS_TRUE;
X                 step = 1u;
N                 break;
N
N            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
X            case 1u:                         
N                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
X                 step = 0u;                           
N                 break;
N
N            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
X            case 2u:                         
N                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
X                 step            = 1u;                 
N                 OSTickStepState = OS_TICK_STEP_WAIT;
X                 OSTickStepState = 1u;
N                 break;
N
N            default:                                       /* Invalid case, correct situation              */
N                 step            = OS_TRUE;
X                 step            = 1u;
N                 OSTickStepState = OS_TICK_STEP_DIS;
X                 OSTickStepState = 0u;
N                 break;
N        }
N        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
X        if (step == 0u) {                             
N            return;
N        }
N#endif
N        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
N        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
X        while (ptcb->OSTCBPrio != (63)) {      
N            OS_ENTER_CRITICAL();
X            {cpu_sr = OS_CPU_SR_Save();};
N            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
N                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
N                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
N
N                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
X                    if ((ptcb->OSTCBStat & (0x01u | 0x02u | 0x04u | 0x10u | 0x20u)) != 0x00u) {
N                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
X                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)(0x01u | 0x02u | 0x04u | 0x10u | 0x20u);           
N                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
X                        ptcb->OSTCBStatPend = 1u;                  
N                    } else {
N                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
X                        ptcb->OSTCBStatPend = 0u;
N                    }
N
N                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
X                    if ((ptcb->OSTCBStat & 0x08u) == 0x00u) {   
N                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
N                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
N                    }
N                }
N            }
N            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
N            OS_EXIT_CRITICAL();
X            {OS_CPU_SR_Restore(cpu_sr);};
N        }
N    }
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             GET VERSION
N*
N* Description: This function is used to return the version number of uC/OS-II.  The returned value 
N*              corresponds to uC/OS-II's version number multiplied by 10000.  In other words, version 
N*              2.01.00 would be returned as 20100.
N*
N* Arguments  : none
N*
N* Returns    : The version number of uC/OS-II multiplied by 10000.
N*********************************************************************************************************
N*/
N
NINT16U  OSVersion (void)
N{
N    return (OS_VERSION);
X    return (29207u);
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           DUMMY FUNCTION
N*
N* Description: This function doesn't do anything.  It is called by OSTaskDel().
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
N#if OS_TASK_DEL_EN > 0u
X#if 1 > 0u
Nvoid  OS_Dummy (void)
N{
N}
N#endif
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                           MAKE TASK READY TO RUN BASED ON EVENT OCCURING
N*
N* Description: This function is called by other uC/OS-II services and is used to ready a task that was
N*              waiting for an event to occur.
N*
N* Arguments  : pevent      is a pointer to the event control block corresponding to the event.
N*
N*              pmsg        is a pointer to a message.  This pointer is used by message oriented services
N*                          such as MAILBOXEs and QUEUEs.  The pointer is not used when called by other
N*                          service functions.
N*
N*              msk         is a mask that is used to clear the status byte of the TCB.  For example,
N*                          OSSemPost() will pass OS_STAT_SEM, OSMboxPost() will pass OS_STAT_MBOX etc.
N*
N*              pend_stat   is used to indicate the readied task's pending status:
N*
N*                          OS_STAT_PEND_OK      Task ready due to a post (or delete), not a timeout or
N*                                               an abort.
N*                          OS_STAT_PEND_ABORT   Task ready due to an abort.
N*
N* Returns    : none
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if (OS_EVENT_EN)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u)))
NINT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
N                        void      *pmsg,
N                        INT8U      msk,
N                        INT8U      pend_stat)
N{
N    OS_TCB   *ptcb;
N    INT8U     y;
N    INT8U     x;
N    INT8U     prio;
N#if OS_LOWEST_PRIO > 63u
X#if 63 > 63u
S    OS_PRIO  *ptbl;
N#endif
N
N
N#if OS_LOWEST_PRIO <= 63u
X#if 63 <= 63u
N    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
N    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
N    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
N#else
S    if ((pevent->OSEventGrp & 0xFFu) != 0u) {           /* Find HPT waiting for message                */
S        y = OSUnMapTbl[ pevent->OSEventGrp & 0xFFu];
S    } else {
S        y = OSUnMapTbl[(OS_PRIO)(pevent->OSEventGrp >> 8u) & 0xFFu] + 8u;
S    }
S    ptbl = &pevent->OSEventTbl[y];
S    if ((*ptbl & 0xFFu) != 0u) {
S        x = OSUnMapTbl[*ptbl & 0xFFu];
S    } else {
S        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
S    }
S    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
N#endif
N
N    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
N    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
N#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
X#if ((1 > 0u) && (4 > 0u)) || (1 > 0u)
N    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
N#else
S    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
N#endif
N    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
N    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
N                                                        /* See if task is ready (could be susp'd)      */
N    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
X    if ((ptcb->OSTCBStat &   0x08u) == 0x00u) {
N        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
N        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
N    }
N
N    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (0 > 0u)
S    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
S        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
S        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
S    }
N#endif
N
N    return (prio);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                  MAKE TASK WAIT FOR EVENT TO OCCUR
N*
N* Description: This function is called by other uC/OS-II services to suspend a task because an event has
N*              not occurred.
N*
N* Arguments  : pevent   is a pointer to the event control block for which the task will be waiting for.
N*
N* Returns    : none
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if (OS_EVENT_EN)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u)))
Nvoid  OS_EventTaskWait (OS_EVENT *pevent)
N{
N    INT8U  y;
N
N
N    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
N
N    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
N    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
N
N    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
N    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
N    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
N        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                         MAKE TASK WAIT FOR ANY OF MULTIPLE EVENTS TO OCCUR
N*
N* Description: This function is called by other uC/OS-II services to suspend a task because any one of
N*              multiple events has not occurred.
N*
N* Arguments  : pevents_wait     is a pointer to an array of event control blocks, NULL-terminated, for
N*                               which the task will be waiting for.
N*
N* Returns    : none.
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
X#if (((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u))) && (0 > 0u))
Svoid  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
S{
S    OS_EVENT **pevents;
S    OS_EVENT  *pevent;
S    INT8U      y;
S
S
S    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
S    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
S
S    pevents =  pevents_wait;
S    pevent  = *pevents;
S    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
S        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
S        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
S        pevents++;
S        pevent = *pevents;
S    }
S
S    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
S    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
S    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
S        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
S    }
S}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                  REMOVE TASK FROM EVENT WAIT LIST
N*
N* Description: Remove a task from an event's wait list.
N*
N* Arguments  : ptcb     is a pointer to the task to remove.
N*
N*              pevent   is a pointer to the event control block.
N*
N* Returns    : none
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if (OS_EVENT_EN)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u)))
Nvoid  OS_EventTaskRemove (OS_TCB   *ptcb,
N                          OS_EVENT *pevent)
N{
N    INT8U  y;
N
N
N    y                       =  ptcb->OSTCBY;
N    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
N    if (pevent->OSEventTbl[y] == 0u) {
N        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                             REMOVE TASK FROM MULTIPLE EVENTS WAIT LISTS
N*
N* Description: Remove a task from multiple events' wait lists.
N*
N* Arguments  : ptcb             is a pointer to the task to remove.
N*
N*              pevents_multi    is a pointer to the array of event control blocks, NULL-terminated.
N*
N* Returns    : none
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
X#if (((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u))) && (0 > 0u))
Svoid  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
S                               OS_EVENT **pevents_multi)
S{
S    OS_EVENT **pevents;
S    OS_EVENT  *pevent;
S    INT8U      y;
S    OS_PRIO    bity;
S    OS_PRIO    bitx;
S
S
S    y       =  ptcb->OSTCBY;
S    bity    =  ptcb->OSTCBBitY;
S    bitx    =  ptcb->OSTCBBitX;
S    pevents =  pevents_multi;
S    pevent  = *pevents;
S    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
S        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
S        if (pevent->OSEventTbl[y] == 0u) {
S            pevent->OSEventGrp &= (OS_PRIO)~bity;
S        }
S        pevents++;
S        pevent = *pevents;
S    }
S}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                             INITIALIZE EVENT CONTROL BLOCK'S WAIT LIST
N*
N* Description: This function is called by other uC/OS-II services to initialize the event wait list.
N*
N* Arguments  : pevent    is a pointer to the event control block allocated to the event.
N*
N* Returns    : none
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N#if (OS_EVENT_EN)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u)))
Nvoid  OS_EventWaitListInit (OS_EVENT *pevent)
N{
N    INT8U  i;
N
N
N    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
N    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
X    for (i = 0u; i < ((63) / 8u + 1u); i++) {
N        pevent->OSEventTbl[i] = 0u;
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                           INITIALIZE THE FREE LIST OF EVENT CONTROL BLOCKS
N*
N* Description: This function is called by OSInit() to initialize the free list of event control blocks.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitEventList (void)
N{
N#if (OS_EVENT_EN) && (OS_MAX_EVENTS > 0u)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u))) && (10 > 0u)
N#if (OS_MAX_EVENTS > 1u)
X#if (10 > 1u)
N    INT16U     ix;
N    INT16U     ix_next;
N    OS_EVENT  *pevent1;
N    OS_EVENT  *pevent2;
N
N
N    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
N    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
X    for (ix = 0u; ix < (10 - 1u); ix++) {         
N        ix_next = ix + 1u;
N        pevent1 = &OSEventTbl[ix];
N        pevent2 = &OSEventTbl[ix_next];
N        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
X        pevent1->OSEventType    = 0u;
N        pevent1->OSEventPtr     = pevent2;
N#if OS_EVENT_NAME_EN > 0u
X#if 0 > 0u
S        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
N#endif
N    }
N    pevent1                         = &OSEventTbl[ix];
N    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
X    pevent1->OSEventType            = 0u;
N    pevent1->OSEventPtr             = (OS_EVENT *)0;
N#if OS_EVENT_NAME_EN > 0u
X#if 0 > 0u
S    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
N#endif
N    OSEventFreeList                 = &OSEventTbl[0];
N#else
S    OSEventFreeList                 = &OSEventTbl[0];       /* Only have ONE event control block       */
S    OSEventFreeList->OSEventType    = OS_EVENT_TYPE_UNUSED;
S    OSEventFreeList->OSEventPtr     = (OS_EVENT *)0;
S#if OS_EVENT_NAME_EN > 0u
S    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
S#endif
N#endif
N#endif
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                                    INITIALIZE MISCELLANEOUS VARIABLES
N*
N* Description: This function is called by OSInit() to initialize miscellaneous variables.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitMisc (void)
N{
N#if OS_TIME_GET_SET_EN > 0u
X#if 1 > 0u
N    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
N#endif
N
N    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
N    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
N
N    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
N
N    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
X    OSRunning                 = 0u;                   
N
N    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
N    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
N
N#if OS_TASK_STAT_EN > 0u
X#if 1 > 0u
N    OSIdleCtrRun              = 0uL;
N    OSIdleCtrMax              = 0uL;
N    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
X    OSStatRdy                 = 0u;                   
N#endif
N
N#ifdef OS_SAFETY_CRITICAL_IEC61508
S    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
N#endif
N
N#if OS_TASK_REG_TBL_SIZE > 0u
X#if 1 > 0u
N    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
N#endif
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                                       INITIALIZE THE READY LIST
N*
N* Description: This function is called by OSInit() to initialize the Ready List.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitRdyList (void)
N{
N    INT8U  i;
N
N
N    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
N    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
X    for (i = 0u; i < ((63) / 8u + 1u); i++) {
N        OSRdyTbl[i] = 0u;
N    }
N
N    OSPrioCur     = 0u;
N    OSPrioHighRdy = 0u;
N
N    OSTCBHighRdy  = (OS_TCB *)0;
N    OSTCBCur      = (OS_TCB *)0;
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                                         CREATING THE IDLE TASK
N*
N* Description: This function creates the Idle Task.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitTaskIdle (void)
N{
N#if OS_TASK_NAME_EN > 0u
X#if 1 > 0u
N    INT8U  err;
N#endif
N
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1 > 0u
N    #if OS_STK_GROWTH == 1u
X    #if 1u == 1u
N    (void)OSTaskCreateExt(OS_TaskIdle,
N                          (void *)0,                                 /* No arguments passed to OS_TaskIdle() */
N                          &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1u],/* Set Top-Of-Stack                     */
X                          &OSTaskIdleStk[128 - 1u], 
N                          OS_TASK_IDLE_PRIO,                         /* Lowest priority level                */
X                          (63),                          
N                          OS_TASK_IDLE_ID,
X                          65535u,
N                          &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
N                          OS_TASK_IDLE_STK_SIZE,
X                          128,
N                          (void *)0,                                 /* No TCB extension                     */
N                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
X                          0x0001u | 0x0002u); 
N    #else
S    (void)OSTaskCreateExt(OS_TaskIdle,
S                          (void *)0,                                 /* No arguments passed to OS_TaskIdle() */
S                          &OSTaskIdleStk[0],                         /* Set Top-Of-Stack                     */
S                          OS_TASK_IDLE_PRIO,                         /* Lowest priority level                */
S                          OS_TASK_IDLE_ID,
S                          &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1u],/* Set Bottom-Of-Stack                  */
S                          OS_TASK_IDLE_STK_SIZE,
S                          (void *)0,                                 /* No TCB extension                     */
S                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
N    #endif
N#else
S    #if OS_STK_GROWTH == 1u
S    (void)OSTaskCreate(OS_TaskIdle,
S                       (void *)0,
S                       &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1u],
S                       OS_TASK_IDLE_PRIO);
S    #else
S    (void)OSTaskCreate(OS_TaskIdle,
S                       (void *)0,
S                       &OSTaskIdleStk[0],
S                       OS_TASK_IDLE_PRIO);
S    #endif
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1 > 0u
N    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
X    OSTaskNameSet((63), (INT8U *)(void *)"uC/OS-II Idle", &err);
N#endif
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                                      CREATING THE STATISTIC TASK
N*
N* Description: This function creates the Statistic Task.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
N#if OS_TASK_STAT_EN > 0u
X#if 1 > 0u
Nstatic  void  OS_InitTaskStat (void)
N{
N#if OS_TASK_NAME_EN > 0u
X#if 1 > 0u
N    INT8U  err;
N#endif
N
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1 > 0u
N    #if OS_STK_GROWTH == 1u
X    #if 1u == 1u
N    (void)OSTaskCreateExt(OS_TaskStat,
N                          (void *)0,                                   /* No args passed to OS_TaskStat()*/
N                          &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1u],  /* Set Top-Of-Stack               */
X                          &OSTaskStatStk[128 - 1u],   
N                          OS_TASK_STAT_PRIO,                           /* One higher than the idle task  */
X                          (63 - 1u),                            
N                          OS_TASK_STAT_ID,
X                          65534u,
N                          &OSTaskStatStk[0],                           /* Set Bottom-Of-Stack            */
N                          OS_TASK_STAT_STK_SIZE,
X                          128,
N                          (void *)0,                                   /* No TCB extension               */
N                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
X                          0x0001u | 0x0002u);   
N    #else
S    (void)OSTaskCreateExt(OS_TaskStat,
S                          (void *)0,                                   /* No args passed to OS_TaskStat()*/
S                          &OSTaskStatStk[0],                           /* Set Top-Of-Stack               */
S                          OS_TASK_STAT_PRIO,                           /* One higher than the idle task  */
S                          OS_TASK_STAT_ID,
S                          &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1u],  /* Set Bottom-Of-Stack            */
S                          OS_TASK_STAT_STK_SIZE,
S                          (void *)0,                                   /* No TCB extension               */
S                          OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
N    #endif
N#else
S    #if OS_STK_GROWTH == 1u
S    (void)OSTaskCreate(OS_TaskStat,
S                       (void *)0,                                      /* No args passed to OS_TaskStat()*/
S                       &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1u],     /* Set Top-Of-Stack               */
S                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
S    #else
S    (void)OSTaskCreate(OS_TaskStat,
S                       (void *)0,                                      /* No args passed to OS_TaskStat()*/
S                       &OSTaskStatStk[0],                              /* Set Top-Of-Stack               */
S                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
S    #endif
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1 > 0u
N    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
X    OSTaskNameSet((63 - 1u), (INT8U *)(void *)"uC/OS-II Stat", &err);
N#endif
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             INITIALIZATION
N*                            INITIALIZE THE FREE LIST OF TASK CONTROL BLOCKS
N*
N* Description: This function is called by OSInit() to initialize the free list of OS_TCBs.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_InitTCBList (void)
N{
N    INT8U    ix;
N    INT8U    ix_next;
N    OS_TCB  *ptcb1;
N    OS_TCB  *ptcb2;
N
N
N    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
N    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
N    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
X    for (ix = 0u; ix < (5 + 2u - 1u); ix++) {     
N        ix_next =  ix + 1u;
N        ptcb1   = &OSTCBTbl[ix];
N        ptcb2   = &OSTCBTbl[ix_next];
N        ptcb1->OSTCBNext = ptcb2;
N#if OS_TASK_NAME_EN > 0u
X#if 1 > 0u
N        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
N#endif
N    }
N    ptcb1                   = &OSTCBTbl[ix];
N    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
N#if OS_TASK_NAME_EN > 0u
X#if 1 > 0u
N    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
N#endif
N    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
N    OSTCBFreeList           = &OSTCBTbl[0];
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      CLEAR A SECTION OF MEMORY
N*
N* Description: This function is called by other uC/OS-II services to clear a contiguous block of RAM.
N*
N* Arguments  : pdest    is the start of the RAM to clear (i.e. write 0x00 to)
N*
N*              size     is the number of bytes to clear.
N*
N* Returns    : none
N*
N* Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
N*              2) Note that we can only clear up to 64K bytes of RAM.  This is not an issue because none
N*                 of the uses of this function gets close to this limit.
N*              3) The clear is done one byte at a time since this will work on any processor irrespective
N*                 of the alignment of the destination.
N*********************************************************************************************************
N*/
N
Nvoid  OS_MemClr (INT8U  *pdest,
N                 INT16U  size)
N{
N    while (size > 0u) {
N        *pdest++ = (INT8U)0;
N        size--;
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       COPY A BLOCK OF MEMORY
N*
N* Description: This function is called by other uC/OS-II services to copy a block of memory from one
N*              location to another.
N*
N* Arguments  : pdest    is a pointer to the 'destination' memory block
N*
N*              psrc     is a pointer to the 'source'      memory block
N*
N*              size     is the number of bytes to copy.
N*
N* Returns    : none
N*
N* Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.  There is
N*                 no provision to handle overlapping memory copy.  However, that's not a problem since this
N*                 is not a situation that will happen.
N*              2) Note that we can only copy up to 64K bytes of RAM
N*              3) The copy is done one byte at a time since this will work on any processor irrespective
N*                 of the alignment of the source and destination.
N*********************************************************************************************************
N*/
N
Nvoid  OS_MemCopy (INT8U  *pdest,
N                  INT8U  *psrc,
N                  INT16U  size)
N{
N    while (size > 0u) {
N        *pdest++ = *psrc++;
N        size--;
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              SCHEDULER
N*
N* Description: This function is called by other uC/OS-II services to determine whether a new, high
N*              priority task has been made ready to run.  This function is invoked by TASK level code
N*              and is not used to reschedule tasks from ISRs (see OSIntExit() for ISR rescheduling).
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
N*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
N*********************************************************************************************************
N*/
N
Nvoid  OS_Sched (void)
N{
N#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
X#if 3u == 3u                            
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
N        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
N            OS_SchedNew();
N            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
N            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
N#if OS_TASK_PROFILE_EN > 0u
X#if 1 > 0u
N                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
N#endif
N                OSCtxSwCtr++;                          /* Increment context switch counter             */
N                OS_TASK_SW();                          /* Perform a context switch                     */
X                OSCtxSw();                           
N            }
N        }
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N}
N
N
N/*
N*********************************************************************************************************
N*                               FIND HIGHEST PRIORITY TASK READY TO RUN
N*
N* Description: This function is called by other uC/OS-II services to determine the highest priority task
N*              that is ready to run.  The global variable 'OSPrioHighRdy' is changed accordingly.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
N*              2) Interrupts are assumed to be disabled when this function is called.
N*********************************************************************************************************
N*/
N
Nstatic  void  OS_SchedNew (void)
N{
N#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
X#if 63 <= 63u                         
N    INT8U   y;
N
N
N    y             = OSUnMapTbl[OSRdyGrp];
N    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
N#else                                            /* We support up to 256 tasks                         */
S    INT8U     y;
S    OS_PRIO  *ptbl;
S
S
S    if ((OSRdyGrp & 0xFFu) != 0u) {
S        y = OSUnMapTbl[OSRdyGrp & 0xFFu];
S    } else {
S        y = OSUnMapTbl[(OS_PRIO)(OSRdyGrp >> 8u) & 0xFFu] + 8u;
S    }
S    ptbl = &OSRdyTbl[y];
S    if ((*ptbl & 0xFFu) != 0u) {
S        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
S    } else {
S        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
S    }
N#endif
N}
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                               DETERMINE THE LENGTH OF AN ASCII STRING
N*
N* Description: This function is called by other uC/OS-II services to determine the size of an ASCII string
N*              (excluding the NUL character).
N*
N* Arguments  : psrc     is a pointer to the string for which we need to know the size.
N*
N* Returns    : The size of the string (excluding the NUL terminating character)
N*
N* Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
N*              2) The string to check must be less than 255 characters long.
N*********************************************************************************************************
N*/
N
N#if (OS_EVENT_NAME_EN > 0u) || (OS_FLAG_NAME_EN > 0u) || (OS_MEM_NAME_EN > 0u) || (OS_TASK_NAME_EN > 0u) || (OS_TMR_CFG_NAME_EN > 0u)
X#if (0 > 0u) || (1 > 0u) || (1 > 0u) || (1 > 0u) || (1 > 0u)
NINT8U  OS_StrLen (INT8U *psrc)
N{
N    INT8U  len;
N
N
N#if OS_ARG_CHK_EN > 0u
X#if 0 > 0u
S    if (psrc == (INT8U *)0) {
S        return (0u);
S    }
N#endif
N
N    len = 0u;
N    while (*psrc != OS_ASCII_NUL) {
X    while (*psrc != (INT8U)0) {
N        psrc++;
N        len++;
N    }
N    return (len);
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              IDLE TASK
N*
N* Description: This task is internal to uC/OS-II and executes whenever no other higher priority tasks
N*              executes because they are ALL waiting for event(s) to occur.
N*
N* Arguments  : none
N*
N* Returns    : none
N*
N* Note(s)    : 1) OSTaskIdleHook() is called after the critical section to ensure that interrupts will be
N*                 enabled for at least a few instructions.  On some processors (ex. Philips XA), enabling
N*                 and then disabling interrupts didn't allow the processor enough time to have interrupts
N*                 enabled before they were disabled again.  uC/OS-II would thus never recognize
N*                 interrupts.
N*              2) This hook has been added to allow you to do such things as STOP the CPU to conserve
N*                 power.
N*********************************************************************************************************
N*/
N
Nvoid  OS_TaskIdle (void *p_arg)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
N    for (;;) {
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        OSIdleCtr++;
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        OSTaskIdleHook();                        /* Call user definable HOOK                           */
N    }
N}
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           STATISTICS TASK
N*
N* Description: This task is internal to uC/OS-II and is used to compute some statistics about the
N*              multitasking environment.  Specifically, OS_TaskStat() computes the CPU usage.
N*              CPU usage is determined by:
N*
N*                                          OSIdleCtr
N*                 OSCPUUsage = 100 * (1 - ------------)     (units are in %)
N*                                         OSIdleCtrMax
N*
N* Arguments  : parg     this pointer is not used at this time.
N*
N* Returns    : none
N*
N* Notes      : 1) This task runs at a priority level higher than the idle task.  In fact, it runs at the
N*                 next higher priority, OS_TASK_IDLE_PRIO-1.
N*              2) You can disable this task by setting the configuration #define OS_TASK_STAT_EN to 0.
N*              3) You MUST have at least a delay of 2/10 seconds to allow for the system to establish the
N*                 maximum value for the idle counter.
N*********************************************************************************************************
N*/
N
N#if OS_TASK_STAT_EN > 0u
X#if 1 > 0u
Nvoid  OS_TaskStat (void *p_arg)
N{
N#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
X#if 3u == 3u                      
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N
N
N
N    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
N    while (OSStatRdy == OS_FALSE) {
X    while (OSStatRdy == 0u) {
N        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
X        OSTimeDly(2u * 200 / 10u);   
N    }
N    OSIdleCtrMax /= 100uL;
N    if (OSIdleCtrMax == 0uL) {
N        OSCPUUsage = 0u;
N#if OS_TASK_SUSPEND_EN > 0u
X#if 1 > 0u
N        (void)OSTaskSuspend(OS_PRIO_SELF);
X        (void)OSTaskSuspend(0xFFu);
N#else
S        for (;;) {
S            OSTimeDly(OS_TICKS_PER_SEC);
S        }
N#endif
N    }
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    for (;;) {
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
N        OSIdleCtr    = 0uL;                      /* Reset the idle counter for the next second         */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        OSCPUUsage   = (INT8U)(100uL - OSIdleCtrRun / OSIdleCtrMax);
N        OSTaskStatHook();                        /* Invoke user definable hook                         */
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1 > 0u) && (1 > 0u)
N        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
N#endif
N        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
X        OSTimeDly(200 / 10u);        
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CHECK ALL TASK STACKS
N*
N* Description: This function is called by OS_TaskStat() to check the stacks of each active task.
N*
N* Arguments  : none
N*
N* Returns    : none
N*********************************************************************************************************
N*/
N
N#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
X#if (1 > 0u) && (1 > 0u)
Nvoid  OS_TaskStatStkChk (void)
N{
N    OS_TCB      *ptcb;
N    OS_STK_DATA  stk_data;
N    INT8U        err;
N    INT8U        prio;
N
N
N    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
X    for (prio = 0u; prio <= (63); prio++) {
N        err = OSTaskStkChk(prio, &stk_data);
N        if (err == OS_ERR_NONE) {
X        if (err == 0u) {
N            ptcb = OSTCBPrioTbl[prio];
N            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
N                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
X                if (ptcb != ((OS_TCB *)1)) {                        
N#if OS_TASK_PROFILE_EN > 0u
X#if 1 > 0u
N                    #if OS_STK_GROWTH == 1u
X                    #if 1u == 1u
N                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
N                    #else
S                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
N                    #endif
N                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
N#endif
N                }
N            }
N        }
N    }
N}
N#endif
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           INITIALIZE TCB
N*
N* Description: This function is internal to uC/OS-II and is used to initialize a Task Control Block when
N*              a task is created (see OSTaskCreate() and OSTaskCreateExt()).
N*
N* Arguments  : prio          is the priority of the task being created
N*
N*              ptos          is a pointer to the task's top-of-stack assuming that the CPU registers
N*                            have been placed on the stack.  Note that the top-of-stack corresponds to a
N*                            'high' memory location is OS_STK_GROWTH is set to 1 and a 'low' memory
N*                            location if OS_STK_GROWTH is set to 0.  Note that stack growth is CPU
N*                            specific.
N*
N*              pbos          is a pointer to the bottom of stack.  A NULL pointer is passed if called by
N*                            'OSTaskCreate()'.
N*
N*              id            is the task's ID (0..65535)
N*
N*              stk_size      is the size of the stack (in 'stack units').  If the stack units are INT8Us
N*                            then, 'stk_size' contains the number of bytes for the stack.  If the stack
N*                            units are INT32Us then, the stack contains '4 * stk_size' bytes.  The stack
N*                            units are established by the #define constant OS_STK which is CPU
N*                            specific.  'stk_size' is 0 if called by 'OSTaskCreate()'.
N*
N*              pext          is a pointer to a user supplied memory area that is used to extend the task
N*                            control block.  This allows you to store the contents of floating-point
N*                            registers, MMU registers or anything else you could find useful during a
N*                            context switch.  You can even assign a name to each task and store this name
N*                            in this TCB extension.  A NULL pointer is passed if called by OSTaskCreate().
N*
N*              opt           options as passed to 'OSTaskCreateExt()' or,
N*                            0 if called from 'OSTaskCreate()'.
N*
N* Returns    : OS_ERR_NONE         if the call was successful
N*              OS_ERR_TASK_NO_MORE_TCB  if there are no more free TCBs to be allocated and thus, the task cannot
N*                                  be created.
N*
N* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
N*********************************************************************************************************
N*/
N
NINT8U  OS_TCBInit (INT8U    prio,
N                   OS_STK  *ptos,
N                   OS_STK  *pbos,
N                   INT16U   id,
N                   INT32U   stk_size,
N                   void    *pext,
N                   INT16U   opt)
N{
N    OS_TCB    *ptcb;
N#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
X#if 3u == 3u                                
N    OS_CPU_SR  cpu_sr = 0u;
N#endif
N#if OS_TASK_REG_TBL_SIZE > 0u
X#if 1 > 0u
N    INT8U      i;
N#endif
N
N
N    OS_ENTER_CRITICAL();
X    {cpu_sr = OS_CPU_SR_Save();};
N    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
N    if (ptcb != (OS_TCB *)0) {
N        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
N        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
N        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
X        ptcb->OSTCBStat          = 0x00u;             
N        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
X        ptcb->OSTCBStatPend      = 0u;         
N        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
N
N#if OS_TASK_CREATE_EXT_EN > 0u
X#if 1 > 0u
N        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
N        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
N        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
N        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
N        ptcb->OSTCBId            = id;                     /* Store task ID                            */
N#else
S        pext                     = pext;                   /* Prevent compiler warning if not used     */
S        stk_size                 = stk_size;
S        pbos                     = pbos;
S        opt                      = opt;
S        id                       = id;
N#endif
N
N#if OS_TASK_DEL_EN > 0u
X#if 1 > 0u
N        ptcb->OSTCBDelReq        = OS_ERR_NONE;
X        ptcb->OSTCBDelReq        = 0u;
N#endif
N
N#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
X#if 63 <= 63u                                          
N        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
N        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
N#else                                                             /* Pre-compute X, Y                  */
S        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
S        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
N#endif
N                                                                  /* Pre-compute BitX and BitY         */
N        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
N        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
N
N#if (OS_EVENT_EN)
X#if ((((1 > 0u) && (4 > 0u)) || (1 > 0u) || (1 > 0u) || (1 > 0u)))
N        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
N#if (OS_EVENT_MULTI_EN > 0u)
X#if (0 > 0u)
S        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
N#endif
N#endif
N
N#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
X#if (1 > 0u) && (5 > 0u) && (1 > 0u)
N        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
N#endif
N
N#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
X#if (1 > 0u) || ((1 > 0u) && (4 > 0u))
N        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
N#endif
N
N#if OS_TASK_PROFILE_EN > 0u
X#if 1 > 0u
N        ptcb->OSTCBCtxSwCtr    = 0uL;                      /* Initialize profiling variables           */
N        ptcb->OSTCBCyclesStart = 0uL;
N        ptcb->OSTCBCyclesTot   = 0uL;
N        ptcb->OSTCBStkBase     = (OS_STK *)0;
N        ptcb->OSTCBStkUsed     = 0uL;
N#endif
N
N#if OS_TASK_NAME_EN > 0u
X#if 1 > 0u
N        ptcb->OSTCBTaskName    = (INT8U *)(void *)"?";
N#endif
N
N#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
X#if 1 > 0u                               
N        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
X        for (i = 0u; i < 1; i++) {
N            ptcb->OSTCBRegTbl[i] = 0u;
N        }
N#endif
N
N        OSTCBInitHook(ptcb);
N
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        OSTCBPrioTbl[prio] = ptcb;
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N
N        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
N
N        OS_ENTER_CRITICAL();
X        {cpu_sr = OS_CPU_SR_Save();};
N        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
N        ptcb->OSTCBPrev    = (OS_TCB *)0;
N        if (OSTCBList != (OS_TCB *)0) {
N            OSTCBList->OSTCBPrev = ptcb;
N        }
N        OSTCBList               = ptcb;
N        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
N        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
N        OSTaskCtr++;                                       /* Increment the #tasks counter             */
N        OS_EXIT_CRITICAL();
X        {OS_CPU_SR_Restore(cpu_sr);};
N        return (OS_ERR_NONE);
X        return (0u);
N    }
N    OS_EXIT_CRITICAL();
X    {OS_CPU_SR_Restore(cpu_sr);};
N    return (OS_ERR_TASK_NO_MORE_TCB);
X    return (66u);
N}
