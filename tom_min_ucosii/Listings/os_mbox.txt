; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\os_mbox.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_mbox.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Libraries\CMSIS\CM3\CoreSupport -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I.\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\main -I.\User -I.\User\include -I.\fatfs -I.\Utilities\STM32_EVAL -I.\Utilities\STM32_EVAL\Common -I.\Utilities\STM32_EVAL\STM3210E_EVAL -I.\UCOSII\CORE -I.\UCOSII\PORTS -I.\UCOSII\CONFIG -I.\RTE\_Target_1 -I"D:\program files (x86)\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"D:\program files (x86)\keil5\ARM\CMSIS\Include" -D__UVISION_VERSION=523 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL --omf_browse=.\objects\os_mbox.crf UCOSII\CORE\os_mbox.c]
                          THUMB

                          AREA ||i.OSMboxAccept||, CODE, READONLY, ALIGN=1

                  OSMboxAccept PROC
;;;48     #if OS_MBOX_ACCEPT_EN > 0u
;;;49     void  *OSMboxAccept (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51         void      *pmsg;
;;;52     #if OS_CRITICAL_METHOD == 3u                              /* Allocate storage for CPU status register  */
;;;53         OS_CPU_SR  cpu_sr = 0u;
000004  2600              MOVS     r6,#0
;;;54     #endif
;;;55     
;;;56     
;;;57     
;;;58     #if OS_ARG_CHK_EN > 0u
;;;59         if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
;;;60             return ((void *)0);
;;;61         }
;;;62     #endif
;;;63         if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
000006  7820              LDRB     r0,[r4,#0]
000008  2801              CMP      r0,#1
00000a  d001              BEQ      |L1.16|
;;;64             return ((void *)0);
00000c  2000              MOVS     r0,#0
                  |L1.14|
;;;65         }
;;;66         OS_ENTER_CRITICAL();
;;;67         pmsg               = pevent->OSEventPtr;
;;;68         pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
;;;69         OS_EXIT_CRITICAL();
;;;70         return (pmsg);                                        /* Return the message received (or NULL)     */
;;;71     }
00000e  bd70              POP      {r4-r6,pc}
                  |L1.16|
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4606              MOV      r6,r0                 ;66
000016  6865              LDR      r5,[r4,#4]            ;67
000018  2000              MOVS     r0,#0                 ;68
00001a  6060              STR      r0,[r4,#4]            ;68
00001c  4630              MOV      r0,r6                 ;69
00001e  f7fffffe          BL       OS_CPU_SR_Restore
000022  4628              MOV      r0,r5                 ;70
000024  e7f3              B        |L1.14|
;;;72     #endif
                          ENDP


                          AREA ||i.OSMboxCreate||, CODE, READONLY, ALIGN=2

                  OSMboxCreate PROC
;;;89     
;;;90     OS_EVENT  *OSMboxCreate (void *pmsg)
000000  b570              PUSH     {r4-r6,lr}
;;;91     {
000002  4605              MOV      r5,r0
;;;92         OS_EVENT  *pevent;
;;;93     #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;94         OS_CPU_SR  cpu_sr = 0u;
000004  2600              MOVS     r6,#0
;;;95     #endif
;;;96     
;;;97     
;;;98     
;;;99     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;100        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;101            OS_SAFETY_CRITICAL_EXCEPTION();
;;;102            return ((OS_EVENT *)0);
;;;103        }
;;;104    #endif
;;;105    
;;;106        if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
000006  480f              LDR      r0,|L2.68|
000008  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000a  b108              CBZ      r0,|L2.16|
;;;107            return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
00000c  2000              MOVS     r0,#0
                  |L2.14|
;;;108        }
;;;109        OS_ENTER_CRITICAL();
;;;110        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;111        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;112            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;113        }
;;;114        OS_EXIT_CRITICAL();
;;;115        if (pevent != (OS_EVENT *)0) {
;;;116            pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
;;;117            pevent->OSEventCnt     = 0u;
;;;118            pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
;;;119    #if OS_EVENT_NAME_EN > 0u
;;;120            pevent->OSEventName    = (INT8U *)(void *)"?";
;;;121    #endif
;;;122            OS_EventWaitListInit(pevent);
;;;123        }
;;;124        return (pevent);                             /* Return pointer to event control block              */
;;;125    }
00000e  bd70              POP      {r4-r6,pc}
                  |L2.16|
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4606              MOV      r6,r0                 ;109
000016  480c              LDR      r0,|L2.72|
000018  6804              LDR      r4,[r0,#0]            ;110  ; OSEventFreeList
00001a  6800              LDR      r0,[r0,#0]            ;111  ; OSEventFreeList
00001c  b120              CBZ      r0,|L2.40|
00001e  480a              LDR      r0,|L2.72|
000020  6800              LDR      r0,[r0,#0]            ;112  ; OSEventFreeList
000022  6840              LDR      r0,[r0,#4]            ;112
000024  4908              LDR      r1,|L2.72|
000026  6008              STR      r0,[r1,#0]            ;112  ; OSEventFreeList
                  |L2.40|
000028  4630              MOV      r0,r6                 ;114
00002a  f7fffffe          BL       OS_CPU_SR_Restore
00002e  b13c              CBZ      r4,|L2.64|
000030  2001              MOVS     r0,#1                 ;116
000032  7020              STRB     r0,[r4,#0]            ;116
000034  2000              MOVS     r0,#0                 ;117
000036  8120              STRH     r0,[r4,#8]            ;117
000038  6065              STR      r5,[r4,#4]            ;118
00003a  4620              MOV      r0,r4                 ;122
00003c  f7fffffe          BL       OS_EventWaitListInit
                  |L2.64|
000040  4620              MOV      r0,r4                 ;124
000042  e7e4              B        |L2.14|
;;;126    /*$PAGE*/
                          ENDP

                  |L2.68|
                          DCD      OSIntNesting
                  |L2.72|
                          DCD      OSEventFreeList

                          AREA ||i.OSMboxDel||, CODE, READONLY, ALIGN=2

                  OSMboxDel PROC
;;;165    #if OS_MBOX_DEL_EN > 0u
;;;166    OS_EVENT  *OSMboxDel (OS_EVENT  *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;167                          INT8U      opt,
;;;168                          INT8U     *perr)
;;;169    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;170        BOOLEAN    tasks_waiting;
;;;171        OS_EVENT  *pevent_return;
;;;172    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;173        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0900          MOV      r9,#0
;;;174    #endif
;;;175    
;;;176    
;;;177    
;;;178    #ifdef OS_SAFETY_CRITICAL
;;;179        if (perr == (INT8U *)0) {
;;;180            OS_SAFETY_CRITICAL_EXCEPTION();
;;;181            return ((OS_EVENT *)0);
;;;182        }
;;;183    #endif
;;;184    
;;;185    #if OS_ARG_CHK_EN > 0u
;;;186        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;187            *perr = OS_ERR_PEVENT_NULL;
;;;188            return (pevent);
;;;189        }
;;;190    #endif
;;;191        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2801              CMP      r0,#1
000012  d004              BEQ      |L3.30|
;;;192            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;193            return (pevent);
000018  4620              MOV      r0,r4
                  |L3.26|
;;;194        }
;;;195        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;196            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;197            return (pevent);
;;;198        }
;;;199        OS_ENTER_CRITICAL();
;;;200        if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mailbox      */
;;;201            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;202        } else {
;;;203            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;204        }
;;;205        switch (opt) {
;;;206            case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
;;;207                 if (tasks_waiting == OS_FALSE) {
;;;208    #if OS_EVENT_NAME_EN > 0u
;;;209                     pevent->OSEventName = (INT8U *)(void *)"?";
;;;210    #endif
;;;211                     pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;212                     pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
;;;213                     pevent->OSEventCnt  = 0u;
;;;214                     OSEventFreeList     = pevent;             /* Get next free event control block        */
;;;215                     OS_EXIT_CRITICAL();
;;;216                     *perr               = OS_ERR_NONE;
;;;217                     pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
;;;218                 } else {
;;;219                     OS_EXIT_CRITICAL();
;;;220                     *perr               = OS_ERR_TASK_WAITING;
;;;221                     pevent_return       = pevent;
;;;222                 }
;;;223                 break;
;;;224    
;;;225            case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
;;;226                 while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mailbox      */
;;;227                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;228                 }
;;;229    #if OS_EVENT_NAME_EN > 0u
;;;230                 pevent->OSEventName    = (INT8U *)(void *)"?";
;;;231    #endif
;;;232                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;233                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;234                 pevent->OSEventCnt     = 0u;
;;;235                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;236                 OS_EXIT_CRITICAL();
;;;237                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;238                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;239                 }
;;;240                 *perr         = OS_ERR_NONE;
;;;241                 pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
;;;242                 break;
;;;243    
;;;244            default:
;;;245                 OS_EXIT_CRITICAL();
;;;246                 *perr         = OS_ERR_INVALID_OPT;
;;;247                 pevent_return = pevent;
;;;248                 break;
;;;249        }
;;;250        return (pevent_return);
;;;251    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L3.30|
00001e  482a              LDR      r0,|L3.200|
000020  7800              LDRB     r0,[r0,#0]            ;195  ; OSIntNesting
000022  b118              CBZ      r0,|L3.44|
000024  200f              MOVS     r0,#0xf               ;196
000026  7028              STRB     r0,[r5,#0]            ;196
000028  4620              MOV      r0,r4                 ;197
00002a  e7f6              B        |L3.26|
                  |L3.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  4681              MOV      r9,r0                 ;199
000032  7aa0              LDRB     r0,[r4,#0xa]          ;200
000034  b108              CBZ      r0,|L3.58|
000036  2701              MOVS     r7,#1                 ;201
000038  e000              B        |L3.60|
                  |L3.58|
00003a  2700              MOVS     r7,#0                 ;203
                  |L3.60|
00003c  f1b80f00          CMP      r8,#0                 ;205
000040  d003              BEQ      |L3.74|
000042  f1b80f01          CMP      r8,#1                 ;205
000046  d135              BNE      |L3.180|
000048  e017              B        |L3.122|
                  |L3.74|
00004a  b97f              CBNZ     r7,|L3.108|
00004c  2000              MOVS     r0,#0                 ;211
00004e  7020              STRB     r0,[r4,#0]            ;211
000050  481e              LDR      r0,|L3.204|
000052  6800              LDR      r0,[r0,#0]            ;212  ; OSEventFreeList
000054  6060              STR      r0,[r4,#4]            ;212
000056  2000              MOVS     r0,#0                 ;213
000058  8120              STRH     r0,[r4,#8]            ;213
00005a  481c              LDR      r0,|L3.204|
00005c  6004              STR      r4,[r0,#0]            ;214  ; OSEventFreeList
00005e  4648              MOV      r0,r9                 ;215
000060  f7fffffe          BL       OS_CPU_SR_Restore
000064  2000              MOVS     r0,#0                 ;216
000066  7028              STRB     r0,[r5,#0]            ;216
000068  2600              MOVS     r6,#0                 ;217
00006a  e005              B        |L3.120|
                  |L3.108|
00006c  4648              MOV      r0,r9                 ;219
00006e  f7fffffe          BL       OS_CPU_SR_Restore
000072  2049              MOVS     r0,#0x49              ;220
000074  7028              STRB     r0,[r5,#0]            ;220
000076  4626              MOV      r6,r4                 ;221
                  |L3.120|
000078  e023              B        |L3.194|
                  |L3.122|
00007a  e005              B        |L3.136|
                  |L3.124|
00007c  2302              MOVS     r3,#2                 ;227
00007e  461a              MOV      r2,r3                 ;227
000080  2100              MOVS     r1,#0                 ;227
000082  4620              MOV      r0,r4                 ;227
000084  f7fffffe          BL       OS_EventTaskRdy
                  |L3.136|
000088  7aa0              LDRB     r0,[r4,#0xa]          ;226
00008a  2800              CMP      r0,#0                 ;226
00008c  d1f6              BNE      |L3.124|
00008e  7020              STRB     r0,[r4,#0]            ;232
000090  480e              LDR      r0,|L3.204|
000092  6800              LDR      r0,[r0,#0]            ;233  ; OSEventFreeList
000094  6060              STR      r0,[r4,#4]            ;233
000096  2000              MOVS     r0,#0                 ;234
000098  8120              STRH     r0,[r4,#8]            ;234
00009a  480c              LDR      r0,|L3.204|
00009c  6004              STR      r4,[r0,#0]            ;235  ; OSEventFreeList
00009e  4648              MOV      r0,r9                 ;236
0000a0  f7fffffe          BL       OS_CPU_SR_Restore
0000a4  2f01              CMP      r7,#1                 ;237
0000a6  d101              BNE      |L3.172|
0000a8  f7fffffe          BL       OS_Sched
                  |L3.172|
0000ac  2000              MOVS     r0,#0                 ;240
0000ae  7028              STRB     r0,[r5,#0]            ;240
0000b0  2600              MOVS     r6,#0                 ;241
0000b2  e006              B        |L3.194|
                  |L3.180|
0000b4  4648              MOV      r0,r9                 ;245
0000b6  f7fffffe          BL       OS_CPU_SR_Restore
0000ba  2007              MOVS     r0,#7                 ;246
0000bc  7028              STRB     r0,[r5,#0]            ;246
0000be  4626              MOV      r6,r4                 ;247
0000c0  bf00              NOP                            ;248
                  |L3.194|
0000c2  bf00              NOP                            ;223
0000c4  4630              MOV      r0,r6                 ;250
0000c6  e7a8              B        |L3.26|
;;;252    #endif
                          ENDP

                  |L3.200|
                          DCD      OSIntNesting
                  |L3.204|
                          DCD      OSEventFreeList

                          AREA ||i.OSMboxPend||, CODE, READONLY, ALIGN=2

                  OSMboxPend PROC
;;;287    /*$PAGE*/
;;;288    void  *OSMboxPend (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;289                       INT32U     timeout,
;;;290                       INT8U     *perr)
;;;291    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;292        void      *pmsg;
;;;293    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;294        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;295    #endif
;;;296    
;;;297    
;;;298    
;;;299    #ifdef OS_SAFETY_CRITICAL
;;;300        if (perr == (INT8U *)0) {
;;;301            OS_SAFETY_CRITICAL_EXCEPTION();
;;;302            return ((void *)0);
;;;303        }
;;;304    #endif
;;;305    
;;;306    #if OS_ARG_CHK_EN > 0u
;;;307        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;308            *perr = OS_ERR_PEVENT_NULL;
;;;309            return ((void *)0);
;;;310        }
;;;311    #endif
;;;312        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
00000e  7828              LDRB     r0,[r5,#0]
000010  2801              CMP      r0,#1
000012  d004              BEQ      |L4.30|
;;;313            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7020              STRB     r0,[r4,#0]
;;;314            return ((void *)0);
000018  2000              MOVS     r0,#0
                  |L4.26|
;;;315        }
;;;316        if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
;;;317            *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
;;;318            return ((void *)0);
;;;319        }
;;;320        if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
;;;321            *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
;;;322            return ((void *)0);
;;;323        }
;;;324        OS_ENTER_CRITICAL();
;;;325        pmsg = pevent->OSEventPtr;
;;;326        if (pmsg != (void *)0) {                          /* See if there is already a message             */
;;;327            pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
;;;328            OS_EXIT_CRITICAL();
;;;329            *perr = OS_ERR_NONE;
;;;330            return (pmsg);                                /* Return the message received (or NULL)         */
;;;331        }
;;;332        OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
;;;333        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;334        OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
;;;335        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;336        OS_EXIT_CRITICAL();
;;;337        OS_Sched();                                       /* Find next highest priority task ready to run  */
;;;338        OS_ENTER_CRITICAL();
;;;339        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;340            case OS_STAT_PEND_OK:
;;;341                 pmsg =  OSTCBCur->OSTCBMsg;
;;;342                *perr =  OS_ERR_NONE;
;;;343                 break;
;;;344    
;;;345            case OS_STAT_PEND_ABORT:
;;;346                 pmsg = (void *)0;
;;;347                *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;348                 break;
;;;349    
;;;350            case OS_STAT_PEND_TO:
;;;351            default:
;;;352                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;353                 pmsg = (void *)0;
;;;354                *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;355                 break;
;;;356        }
;;;357        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;358        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;359        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;360    #if (OS_EVENT_MULTI_EN > 0u)
;;;361        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;362    #endif
;;;363        OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
;;;364        OS_EXIT_CRITICAL();
;;;365        return (pmsg);                                    /* Return received message                       */
;;;366    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L4.30|
00001e  4836              LDR      r0,|L4.248|
000020  7800              LDRB     r0,[r0,#0]            ;316  ; OSIntNesting
000022  b118              CBZ      r0,|L4.44|
000024  2002              MOVS     r0,#2                 ;317
000026  7020              STRB     r0,[r4,#0]            ;317
000028  2000              MOVS     r0,#0                 ;318
00002a  e7f6              B        |L4.26|
                  |L4.44|
00002c  4833              LDR      r0,|L4.252|
00002e  7800              LDRB     r0,[r0,#0]            ;320  ; OSLockNesting
000030  b118              CBZ      r0,|L4.58|
000032  200d              MOVS     r0,#0xd               ;321
000034  7020              STRB     r0,[r4,#0]            ;321
000036  2000              MOVS     r0,#0                 ;322
000038  e7ef              B        |L4.26|
                  |L4.58|
00003a  f7fffffe          BL       OS_CPU_SR_Save
00003e  4680              MOV      r8,r0                 ;324
000040  686e              LDR      r6,[r5,#4]            ;325
000042  b146              CBZ      r6,|L4.86|
000044  2000              MOVS     r0,#0                 ;327
000046  6068              STR      r0,[r5,#4]            ;327
000048  4640              MOV      r0,r8                 ;328
00004a  f7fffffe          BL       OS_CPU_SR_Restore
00004e  2000              MOVS     r0,#0                 ;329
000050  7020              STRB     r0,[r4,#0]            ;329
000052  4630              MOV      r0,r6                 ;330
000054  e7e1              B        |L4.26|
                  |L4.86|
000056  482a              LDR      r0,|L4.256|
000058  6800              LDR      r0,[r0,#0]            ;332  ; OSTCBCur
00005a  f8900030          LDRB     r0,[r0,#0x30]         ;332
00005e  f0400002          ORR      r0,r0,#2              ;332
000062  4927              LDR      r1,|L4.256|
000064  6809              LDR      r1,[r1,#0]            ;332  ; OSTCBCur
000066  f8810030          STRB     r0,[r1,#0x30]         ;332
00006a  2000              MOVS     r0,#0                 ;333
00006c  4924              LDR      r1,|L4.256|
00006e  6809              LDR      r1,[r1,#0]            ;333  ; OSTCBCur
000070  f8810031          STRB     r0,[r1,#0x31]         ;333
000074  4822              LDR      r0,|L4.256|
000076  6800              LDR      r0,[r0,#0]            ;334  ; OSTCBCur
000078  62c7              STR      r7,[r0,#0x2c]         ;334
00007a  4628              MOV      r0,r5                 ;335
00007c  f7fffffe          BL       OS_EventTaskWait
000080  4640              MOV      r0,r8                 ;336
000082  f7fffffe          BL       OS_CPU_SR_Restore
000086  f7fffffe          BL       OS_Sched
00008a  f7fffffe          BL       OS_CPU_SR_Save
00008e  4680              MOV      r8,r0                 ;338
000090  481b              LDR      r0,|L4.256|
000092  6800              LDR      r0,[r0,#0]            ;339  ; OSTCBCur
000094  f8900031          LDRB     r0,[r0,#0x31]         ;339
000098  b120              CBZ      r0,|L4.164|
00009a  2801              CMP      r0,#1                 ;339
00009c  d00d              BEQ      |L4.186|
00009e  2802              CMP      r0,#2                 ;339
0000a0  d10a              BNE      |L4.184|
0000a2  e005              B        |L4.176|
                  |L4.164|
0000a4  4816              LDR      r0,|L4.256|
0000a6  6800              LDR      r0,[r0,#0]            ;341  ; OSTCBCur
0000a8  6a06              LDR      r6,[r0,#0x20]         ;341
0000aa  2000              MOVS     r0,#0                 ;342
0000ac  7020              STRB     r0,[r4,#0]            ;342
0000ae  e00d              B        |L4.204|
                  |L4.176|
0000b0  2600              MOVS     r6,#0                 ;346
0000b2  200e              MOVS     r0,#0xe               ;347
0000b4  7020              STRB     r0,[r4,#0]            ;347
0000b6  e009              B        |L4.204|
                  |L4.184|
0000b8  bf00              NOP                            ;350
                  |L4.186|
0000ba  4629              MOV      r1,r5                 ;352
0000bc  4810              LDR      r0,|L4.256|
0000be  6800              LDR      r0,[r0,#0]            ;352  ; OSTCBCur
0000c0  f7fffffe          BL       OS_EventTaskRemove
0000c4  2600              MOVS     r6,#0                 ;353
0000c6  200a              MOVS     r0,#0xa               ;354
0000c8  7020              STRB     r0,[r4,#0]            ;354
0000ca  bf00              NOP                            ;355
                  |L4.204|
0000cc  bf00              NOP                            ;343
0000ce  2000              MOVS     r0,#0                 ;357
0000d0  490b              LDR      r1,|L4.256|
0000d2  6809              LDR      r1,[r1,#0]            ;357  ; OSTCBCur
0000d4  f8810030          STRB     r0,[r1,#0x30]         ;357
0000d8  4909              LDR      r1,|L4.256|
0000da  6809              LDR      r1,[r1,#0]            ;358  ; OSTCBCur
0000dc  f8810031          STRB     r0,[r1,#0x31]         ;358
0000e0  4907              LDR      r1,|L4.256|
0000e2  6809              LDR      r1,[r1,#0]            ;359  ; OSTCBCur
0000e4  61c8              STR      r0,[r1,#0x1c]         ;359
0000e6  4906              LDR      r1,|L4.256|
0000e8  6809              LDR      r1,[r1,#0]            ;363  ; OSTCBCur
0000ea  6208              STR      r0,[r1,#0x20]         ;363
0000ec  4640              MOV      r0,r8                 ;364
0000ee  f7fffffe          BL       OS_CPU_SR_Restore
0000f2  4630              MOV      r0,r6                 ;365
0000f4  e791              B        |L4.26|
;;;367    /*$PAGE*/
                          ENDP

0000f6  0000              DCW      0x0000
                  |L4.248|
                          DCD      OSIntNesting
                  |L4.252|
                          DCD      OSLockNesting
                  |L4.256|
                          DCD      OSTCBCur

                          AREA ||i.OSMboxPendAbort||, CODE, READONLY, ALIGN=1

                  OSMboxPendAbort PROC
;;;400    #if OS_MBOX_PEND_ABORT_EN > 0u
;;;401    INT8U  OSMboxPendAbort (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;402                            INT8U      opt,
;;;403                            INT8U     *perr)
;;;404    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;405        INT8U      nbr_tasks;
;;;406    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;407        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;408    #endif
;;;409    
;;;410    
;;;411    
;;;412    #ifdef OS_SAFETY_CRITICAL
;;;413        if (perr == (INT8U *)0) {
;;;414            OS_SAFETY_CRITICAL_EXCEPTION();
;;;415            return (0u);
;;;416        }
;;;417    #endif
;;;418    
;;;419    #if OS_ARG_CHK_EN > 0u
;;;420        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;421            *perr = OS_ERR_PEVENT_NULL;
;;;422            return (0u);
;;;423        }
;;;424    #endif
;;;425        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2801              CMP      r0,#1
000012  d004              BEQ      |L5.30|
;;;426            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;427            return (0u);
000018  2000              MOVS     r0,#0
                  |L5.26|
;;;428        }
;;;429        OS_ENTER_CRITICAL();
;;;430        if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on mailbox?      */
;;;431            nbr_tasks = 0u;
;;;432            switch (opt) {
;;;433                case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;434                     while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on mailbox  */
;;;435                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;436                         nbr_tasks++;
;;;437                     }
;;;438                     break;
;;;439    
;;;440                case OS_PEND_OPT_NONE:
;;;441                default:                                       /* No,  ready HPT       waiting on mailbox  */
;;;442                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;443                     nbr_tasks++;
;;;444                     break;
;;;445            }
;;;446            OS_EXIT_CRITICAL();
;;;447            OS_Sched();                                        /* Find HPT ready to run                    */
;;;448            *perr = OS_ERR_PEND_ABORT;
;;;449            return (nbr_tasks);
;;;450        }
;;;451        OS_EXIT_CRITICAL();
;;;452        *perr = OS_ERR_NONE;
;;;453        return (0u);                                           /* No tasks waiting on mailbox              */
;;;454    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L5.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4680              MOV      r8,r0                 ;429
000024  7aa0              LDRB     r0,[r4,#0xa]          ;430
000026  b320              CBZ      r0,|L5.114|
000028  2600              MOVS     r6,#0                 ;431
00002a  b17f              CBZ      r7,|L5.76|
00002c  2f01              CMP      r7,#1                 ;432
00002e  d10c              BNE      |L5.74|
000030  e007              B        |L5.66|
                  |L5.50|
000032  2302              MOVS     r3,#2                 ;435
000034  461a              MOV      r2,r3                 ;435
000036  2100              MOVS     r1,#0                 ;435
000038  4620              MOV      r0,r4                 ;435
00003a  f7fffffe          BL       OS_EventTaskRdy
00003e  1c70              ADDS     r0,r6,#1              ;436
000040  b2c6              UXTB     r6,r0                 ;436
                  |L5.66|
000042  7aa0              LDRB     r0,[r4,#0xa]          ;434
000044  2800              CMP      r0,#0                 ;434
000046  d1f4              BNE      |L5.50|
000048  e009              B        |L5.94|
                  |L5.74|
00004a  bf00              NOP                            ;440
                  |L5.76|
00004c  2302              MOVS     r3,#2                 ;442
00004e  461a              MOV      r2,r3                 ;442
000050  2100              MOVS     r1,#0                 ;442
000052  4620              MOV      r0,r4                 ;442
000054  f7fffffe          BL       OS_EventTaskRdy
000058  1c70              ADDS     r0,r6,#1              ;443
00005a  b2c6              UXTB     r6,r0                 ;443
00005c  bf00              NOP                            ;444
                  |L5.94|
00005e  bf00              NOP                            ;438
000060  4640              MOV      r0,r8                 ;446
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  f7fffffe          BL       OS_Sched
00006a  200e              MOVS     r0,#0xe               ;448
00006c  7028              STRB     r0,[r5,#0]            ;448
00006e  4630              MOV      r0,r6                 ;449
000070  e7d3              B        |L5.26|
                  |L5.114|
000072  4640              MOV      r0,r8                 ;451
000074  f7fffffe          BL       OS_CPU_SR_Restore
000078  2000              MOVS     r0,#0                 ;452
00007a  7028              STRB     r0,[r5,#0]            ;452
00007c  bf00              NOP                            ;453
00007e  e7cc              B        |L5.26|
;;;455    #endif
                          ENDP


                          AREA ||i.OSMboxPost||, CODE, READONLY, ALIGN=1

                  OSMboxPost PROC
;;;480    #if OS_MBOX_POST_EN > 0u
;;;481    INT8U  OSMboxPost (OS_EVENT  *pevent,
000000  b570              PUSH     {r4-r6,lr}
;;;482                       void      *pmsg)
;;;483    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;484    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;485        OS_CPU_SR  cpu_sr = 0u;
000006  2600              MOVS     r6,#0
;;;486    #endif
;;;487    
;;;488    
;;;489    
;;;490    #if OS_ARG_CHK_EN > 0u
;;;491        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;492            return (OS_ERR_PEVENT_NULL);
;;;493        }
;;;494        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;495            return (OS_ERR_POST_NULL_PTR);
;;;496        }
;;;497    #endif
;;;498        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
000008  7820              LDRB     r0,[r4,#0]
00000a  2801              CMP      r0,#1
00000c  d001              BEQ      |L6.18|
;;;499            return (OS_ERR_EVENT_TYPE);
00000e  2001              MOVS     r0,#1
                  |L6.16|
;;;500        }
;;;501        OS_ENTER_CRITICAL();
;;;502        if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
;;;503                                                          /* Ready HPT waiting on event                    */
;;;504            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;505            OS_EXIT_CRITICAL();
;;;506            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;507            return (OS_ERR_NONE);
;;;508        }
;;;509        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;510            OS_EXIT_CRITICAL();
;;;511            return (OS_ERR_MBOX_FULL);
;;;512        }
;;;513        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;514        OS_EXIT_CRITICAL();
;;;515        return (OS_ERR_NONE);
;;;516    }
000010  bd70              POP      {r4-r6,pc}
                  |L6.18|
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  4606              MOV      r6,r0                 ;501
000018  7aa0              LDRB     r0,[r4,#0xa]          ;502
00001a  b160              CBZ      r0,|L6.54|
00001c  2300              MOVS     r3,#0                 ;504
00001e  2202              MOVS     r2,#2                 ;504
000020  4629              MOV      r1,r5                 ;504
000022  4620              MOV      r0,r4                 ;504
000024  f7fffffe          BL       OS_EventTaskRdy
000028  4630              MOV      r0,r6                 ;505
00002a  f7fffffe          BL       OS_CPU_SR_Restore
00002e  f7fffffe          BL       OS_Sched
000032  2000              MOVS     r0,#0                 ;507
000034  e7ec              B        |L6.16|
                  |L6.54|
000036  6860              LDR      r0,[r4,#4]            ;509
000038  b120              CBZ      r0,|L6.68|
00003a  4630              MOV      r0,r6                 ;510
00003c  f7fffffe          BL       OS_CPU_SR_Restore
000040  2014              MOVS     r0,#0x14              ;511
000042  e7e5              B        |L6.16|
                  |L6.68|
000044  6065              STR      r5,[r4,#4]            ;513
000046  4630              MOV      r0,r6                 ;514
000048  f7fffffe          BL       OS_CPU_SR_Restore
00004c  2000              MOVS     r0,#0                 ;515
00004e  e7df              B        |L6.16|
;;;517    #endif
                          ENDP


                          AREA ||i.OSMboxPostOpt||, CODE, READONLY, ALIGN=1

                  OSMboxPostOpt PROC
;;;552    #if OS_MBOX_POST_OPT_EN > 0u
;;;553    INT8U  OSMboxPostOpt (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;554                          void      *pmsg,
;;;555                          INT8U      opt)
;;;556    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;557    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;558        OS_CPU_SR  cpu_sr = 0u;
00000a  2700              MOVS     r7,#0
;;;559    #endif
;;;560    
;;;561    
;;;562    
;;;563    #if OS_ARG_CHK_EN > 0u
;;;564        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;565            return (OS_ERR_PEVENT_NULL);
;;;566        }
;;;567        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;568            return (OS_ERR_POST_NULL_PTR);
;;;569        }
;;;570    #endif
;;;571        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
00000c  7820              LDRB     r0,[r4,#0]
00000e  2801              CMP      r0,#1
000010  d002              BEQ      |L7.24|
;;;572            return (OS_ERR_EVENT_TYPE);
000012  2001              MOVS     r0,#1
                  |L7.20|
;;;573        }
;;;574        OS_ENTER_CRITICAL();
;;;575        if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
;;;576            if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
;;;577                while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on mailbox     */
;;;578                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;579                }
;;;580            } else {                                      /* No,  Post to HPT waiting on mbox              */
;;;581                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;582            }
;;;583            OS_EXIT_CRITICAL();
;;;584            if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
;;;585                OS_Sched();                               /* Find HPT ready to run                         */
;;;586            }
;;;587            return (OS_ERR_NONE);
;;;588        }
;;;589        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;590            OS_EXIT_CRITICAL();
;;;591            return (OS_ERR_MBOX_FULL);
;;;592        }
;;;593        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;594        OS_EXIT_CRITICAL();
;;;595        return (OS_ERR_NONE);
;;;596    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L7.24|
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4607              MOV      r7,r0                 ;574
00001e  7aa0              LDRB     r0,[r4,#0xa]          ;575
000020  b1e8              CBZ      r0,|L7.94|
000022  f0050001          AND      r0,r5,#1              ;576
000026  b150              CBZ      r0,|L7.62|
000028  e005              B        |L7.54|
                  |L7.42|
00002a  2300              MOVS     r3,#0                 ;578
00002c  2202              MOVS     r2,#2                 ;578
00002e  4631              MOV      r1,r6                 ;578
000030  4620              MOV      r0,r4                 ;578
000032  f7fffffe          BL       OS_EventTaskRdy
                  |L7.54|
000036  7aa0              LDRB     r0,[r4,#0xa]          ;577
000038  2800              CMP      r0,#0                 ;577
00003a  d1f6              BNE      |L7.42|
00003c  e005              B        |L7.74|
                  |L7.62|
00003e  2300              MOVS     r3,#0                 ;581
000040  2202              MOVS     r2,#2                 ;581
000042  4631              MOV      r1,r6                 ;581
000044  4620              MOV      r0,r4                 ;581
000046  f7fffffe          BL       OS_EventTaskRdy
                  |L7.74|
00004a  4638              MOV      r0,r7                 ;583
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  f0050004          AND      r0,r5,#4              ;584
000054  b908              CBNZ     r0,|L7.90|
000056  f7fffffe          BL       OS_Sched
                  |L7.90|
00005a  2000              MOVS     r0,#0                 ;587
00005c  e7da              B        |L7.20|
                  |L7.94|
00005e  6860              LDR      r0,[r4,#4]            ;589
000060  b120              CBZ      r0,|L7.108|
000062  4638              MOV      r0,r7                 ;590
000064  f7fffffe          BL       OS_CPU_SR_Restore
000068  2014              MOVS     r0,#0x14              ;591
00006a  e7d3              B        |L7.20|
                  |L7.108|
00006c  6066              STR      r6,[r4,#4]            ;593
00006e  4638              MOV      r0,r7                 ;594
000070  f7fffffe          BL       OS_CPU_SR_Restore
000074  2000              MOVS     r0,#0                 ;595
000076  e7cd              B        |L7.20|
;;;597    #endif
                          ENDP


                          AREA ||i.OSMboxQuery||, CODE, READONLY, ALIGN=1

                  OSMboxQuery PROC
;;;618    #if OS_MBOX_QUERY_EN > 0u
;;;619    INT8U  OSMboxQuery (OS_EVENT      *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;620                        OS_MBOX_DATA  *p_mbox_data)
;;;621    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;622        INT8U       i;
;;;623        OS_PRIO    *psrc;
;;;624        OS_PRIO    *pdest;
;;;625    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;626        OS_CPU_SR   cpu_sr = 0u;
000008  f04f0900          MOV      r9,#0
;;;627    #endif
;;;628    
;;;629    
;;;630    
;;;631    #if OS_ARG_CHK_EN > 0u
;;;632        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;633            return (OS_ERR_PEVENT_NULL);
;;;634        }
;;;635        if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
;;;636            return (OS_ERR_PDATA_NULL);
;;;637        }
;;;638    #endif
;;;639        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
00000c  7820              LDRB     r0,[r4,#0]
00000e  2801              CMP      r0,#1
000010  d002              BEQ      |L8.24|
;;;640            return (OS_ERR_EVENT_TYPE);
000012  2001              MOVS     r0,#1
                  |L8.20|
;;;641        }
;;;642        OS_ENTER_CRITICAL();
;;;643        p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
;;;644        psrc                    = &pevent->OSEventTbl[0];
;;;645        pdest                   = &p_mbox_data->OSEventTbl[0];
;;;646        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
;;;647            *pdest++ = *psrc++;
;;;648        }
;;;649        p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
;;;650        OS_EXIT_CRITICAL();
;;;651        return (OS_ERR_NONE);
;;;652    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L8.24|
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4681              MOV      r9,r0                 ;642
00001e  7aa0              LDRB     r0,[r4,#0xa]          ;643
000020  7328              STRB     r0,[r5,#0xc]          ;643
000022  f104070b          ADD      r7,r4,#0xb            ;644
000026  f1050804          ADD      r8,r5,#4              ;645
00002a  2600              MOVS     r6,#0                 ;646
00002c  e005              B        |L8.58|
                  |L8.46|
00002e  f8170b01          LDRB     r0,[r7],#1            ;647
000032  f8080b01          STRB     r0,[r8],#1            ;647
000036  1c70              ADDS     r0,r6,#1              ;646
000038  b2c6              UXTB     r6,r0                 ;646
                  |L8.58|
00003a  2e08              CMP      r6,#8                 ;646
00003c  d3f7              BCC      |L8.46|
00003e  6860              LDR      r0,[r4,#4]            ;649
000040  6028              STR      r0,[r5,#0]            ;649
000042  4648              MOV      r0,r9                 ;650
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2000              MOVS     r0,#0                 ;651
00004a  e7e3              B        |L8.20|
;;;653    #endif                                                     /* OS_MBOX_QUERY_EN                         */
                          ENDP

