; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\os_q.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_q.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Libraries\CMSIS\CM3\CoreSupport -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I.\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\main -I.\User -I.\User\include -I.\fatfs -I.\Utilities\STM32_EVAL -I.\Utilities\STM32_EVAL\Common -I.\Utilities\STM32_EVAL\STM3210E_EVAL -I.\UCOSII\CORE -I.\UCOSII\PORTS -I.\UCOSII\CONFIG -I.\RTE\_Target_1 -I"D:\program files (x86)\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"D:\program files (x86)\keil5\ARM\CMSIS\Include" -D__UVISION_VERSION=523 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL --omf_browse=.\objects\os_q.crf UCOSII\CORE\os_q.c]
                          THUMB

                          AREA ||i.OSQAccept||, CODE, READONLY, ALIGN=1

                  OSQAccept PROC
;;;62     #if OS_Q_ACCEPT_EN > 0u
;;;63     void  *OSQAccept (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;64                       INT8U     *perr)
;;;65     {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;66         void      *pmsg;
;;;67         OS_Q      *pq;
;;;68     #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;69         OS_CPU_SR  cpu_sr = 0u;
000008  f04f0800          MOV      r8,#0
;;;70     #endif
;;;71     
;;;72     
;;;73     
;;;74     #ifdef OS_SAFETY_CRITICAL
;;;75         if (perr == (INT8U *)0) {
;;;76             OS_SAFETY_CRITICAL_EXCEPTION();
;;;77             return ((void *)0);
;;;78         }
;;;79     #endif
;;;80     
;;;81     #if OS_ARG_CHK_EN > 0u
;;;82         if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
;;;83             *perr = OS_ERR_PEVENT_NULL;
;;;84             return ((void *)0);
;;;85         }
;;;86     #endif
;;;87         if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
00000c  7830              LDRB     r0,[r6,#0]
00000e  2802              CMP      r0,#2
000010  d004              BEQ      |L1.28|
;;;88             *perr = OS_ERR_EVENT_TYPE;
000012  2001              MOVS     r0,#1
000014  7028              STRB     r0,[r5,#0]
;;;89             return ((void *)0);
000016  2000              MOVS     r0,#0
                  |L1.24|
;;;90         }
;;;91         OS_ENTER_CRITICAL();
;;;92         pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
;;;93         if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
;;;94             pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
;;;95             pq->OSQEntries--;                        /* Update the number of entries in the queue          */
;;;96             if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
;;;97                 pq->OSQOut = pq->OSQStart;
;;;98             }
;;;99             *perr = OS_ERR_NONE;
;;;100        } else {
;;;101            *perr = OS_ERR_Q_EMPTY;
;;;102            pmsg  = (void *)0;                       /* Queue is empty                                     */
;;;103        }
;;;104        OS_EXIT_CRITICAL();
;;;105        return (pmsg);                               /* Return message received (or NULL)                  */
;;;106    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4680              MOV      r8,r0                 ;91
000022  6874              LDR      r4,[r6,#4]            ;92
000024  8ae0              LDRH     r0,[r4,#0x16]         ;93
000026  b178              CBZ      r0,|L1.72|
000028  6921              LDR      r1,[r4,#0x10]         ;94
00002a  1d08              ADDS     r0,r1,#4              ;94
00002c  6120              STR      r0,[r4,#0x10]         ;94
00002e  680f              LDR      r7,[r1,#0]            ;94
000030  8ae0              LDRH     r0,[r4,#0x16]         ;95
000032  1e40              SUBS     r0,r0,#1              ;95
000034  82e0              STRH     r0,[r4,#0x16]         ;95
000036  68a1              LDR      r1,[r4,#8]            ;96
000038  6920              LDR      r0,[r4,#0x10]         ;96
00003a  4288              CMP      r0,r1                 ;96
00003c  d101              BNE      |L1.66|
00003e  6860              LDR      r0,[r4,#4]            ;97
000040  6120              STR      r0,[r4,#0x10]         ;97
                  |L1.66|
000042  2000              MOVS     r0,#0                 ;99
000044  7028              STRB     r0,[r5,#0]            ;99
000046  e002              B        |L1.78|
                  |L1.72|
000048  201f              MOVS     r0,#0x1f              ;101
00004a  7028              STRB     r0,[r5,#0]            ;101
00004c  2700              MOVS     r7,#0                 ;102
                  |L1.78|
00004e  4640              MOV      r0,r8                 ;104
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  4638              MOV      r0,r7                 ;105
000056  e7df              B        |L1.24|
;;;107    #endif
                          ENDP


                          AREA ||i.OSQCreate||, CODE, READONLY, ALIGN=2

                  OSQCreate PROC
;;;127    
;;;128    OS_EVENT  *OSQCreate (void    **start,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;129                          INT16U    size)
;;;130    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;131        OS_EVENT  *pevent;
;;;132        OS_Q      *pq;
;;;133    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;134        OS_CPU_SR  cpu_sr = 0u;
000008  f04f0800          MOV      r8,#0
;;;135    #endif
;;;136    
;;;137    
;;;138    
;;;139    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;140        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;141            OS_SAFETY_CRITICAL_EXCEPTION();
;;;142            return ((OS_EVENT *)0);
;;;143        }
;;;144    #endif
;;;145    
;;;146        if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
00000c  481f              LDR      r0,|L2.140|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000010  b110              CBZ      r0,|L2.24|
;;;147            return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
000012  2000              MOVS     r0,#0
                  |L2.20|
;;;148        }
;;;149        OS_ENTER_CRITICAL();
;;;150        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;151        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;152            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;153        }
;;;154        OS_EXIT_CRITICAL();
;;;155        if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
;;;156            OS_ENTER_CRITICAL();
;;;157            pq = OSQFreeList;                        /* Get a free queue control block                     */
;;;158            if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
;;;159                OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
;;;160                OS_EXIT_CRITICAL();
;;;161                pq->OSQStart           = start;               /*      Initialize the queue                 */
;;;162                pq->OSQEnd             = &start[size];
;;;163                pq->OSQIn              = start;
;;;164                pq->OSQOut             = start;
;;;165                pq->OSQSize            = size;
;;;166                pq->OSQEntries         = 0u;
;;;167                pevent->OSEventType    = OS_EVENT_TYPE_Q;
;;;168                pevent->OSEventCnt     = 0u;
;;;169                pevent->OSEventPtr     = pq;
;;;170    #if OS_EVENT_NAME_EN > 0u
;;;171                pevent->OSEventName    = (INT8U *)(void *)"?";
;;;172    #endif
;;;173                OS_EventWaitListInit(pevent);                 /*      Initialize the wait list             */
;;;174            } else {
;;;175                pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
;;;176                OSEventFreeList    = pevent;
;;;177                OS_EXIT_CRITICAL();
;;;178                pevent = (OS_EVENT *)0;
;;;179            }
;;;180        }
;;;181        return (pevent);
;;;182    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L2.24|
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4680              MOV      r8,r0                 ;149
00001e  481c              LDR      r0,|L2.144|
000020  6805              LDR      r5,[r0,#0]            ;150  ; OSEventFreeList
000022  6800              LDR      r0,[r0,#0]            ;151  ; OSEventFreeList
000024  b120              CBZ      r0,|L2.48|
000026  481a              LDR      r0,|L2.144|
000028  6800              LDR      r0,[r0,#0]            ;152  ; OSEventFreeList
00002a  6840              LDR      r0,[r0,#4]            ;152
00002c  4918              LDR      r1,|L2.144|
00002e  6008              STR      r0,[r1,#0]            ;152  ; OSEventFreeList
                  |L2.48|
000030  4640              MOV      r0,r8                 ;154
000032  f7fffffe          BL       OS_CPU_SR_Restore
000036  b33d              CBZ      r5,|L2.136|
000038  f7fffffe          BL       OS_CPU_SR_Save
00003c  4680              MOV      r8,r0                 ;156
00003e  4815              LDR      r0,|L2.148|
000040  6804              LDR      r4,[r0,#0]            ;157  ; OSQFreeList
000042  b1c4              CBZ      r4,|L2.118|
000044  6800              LDR      r0,[r0,#0]            ;159  ; OSQFreeList
000046  6800              LDR      r0,[r0,#0]            ;159
000048  4912              LDR      r1,|L2.148|
00004a  6008              STR      r0,[r1,#0]            ;159  ; OSQFreeList
00004c  4640              MOV      r0,r8                 ;160
00004e  f7fffffe          BL       OS_CPU_SR_Restore
000052  6066              STR      r6,[r4,#4]            ;161
000054  eb060087          ADD      r0,r6,r7,LSL #2       ;162
000058  60a0              STR      r0,[r4,#8]            ;162
00005a  60e6              STR      r6,[r4,#0xc]          ;163
00005c  6126              STR      r6,[r4,#0x10]         ;164
00005e  82a7              STRH     r7,[r4,#0x14]         ;165
000060  2000              MOVS     r0,#0                 ;166
000062  82e0              STRH     r0,[r4,#0x16]         ;166
000064  2002              MOVS     r0,#2                 ;167
000066  7028              STRB     r0,[r5,#0]            ;167
000068  2000              MOVS     r0,#0                 ;168
00006a  8128              STRH     r0,[r5,#8]            ;168
00006c  606c              STR      r4,[r5,#4]            ;169
00006e  4628              MOV      r0,r5                 ;173
000070  f7fffffe          BL       OS_EventWaitListInit
000074  e008              B        |L2.136|
                  |L2.118|
000076  4806              LDR      r0,|L2.144|
000078  6800              LDR      r0,[r0,#0]            ;175  ; OSEventFreeList
00007a  6068              STR      r0,[r5,#4]            ;175
00007c  4804              LDR      r0,|L2.144|
00007e  6005              STR      r5,[r0,#0]            ;176  ; OSEventFreeList
000080  4640              MOV      r0,r8                 ;177
000082  f7fffffe          BL       OS_CPU_SR_Restore
000086  2500              MOVS     r5,#0                 ;178
                  |L2.136|
000088  4628              MOV      r0,r5                 ;181
00008a  e7c3              B        |L2.20|
;;;183    /*$PAGE*/
                          ENDP

                  |L2.140|
                          DCD      OSIntNesting
                  |L2.144|
                          DCD      OSEventFreeList
                  |L2.148|
                          DCD      OSQFreeList

                          AREA ||i.OSQDel||, CODE, READONLY, ALIGN=2

                  OSQDel PROC
;;;227    #if OS_Q_DEL_EN > 0u
;;;228    OS_EVENT  *OSQDel (OS_EVENT  *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;229                       INT8U      opt,
;;;230                       INT8U     *perr)
;;;231    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
;;;232        BOOLEAN    tasks_waiting;
;;;233        OS_EVENT  *pevent_return;
;;;234        OS_Q      *pq;
;;;235    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;236        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0a00          MOV      r10,#0
;;;237    #endif
;;;238    
;;;239    
;;;240    
;;;241    #ifdef OS_SAFETY_CRITICAL
;;;242        if (perr == (INT8U *)0) {
;;;243            OS_SAFETY_CRITICAL_EXCEPTION();
;;;244            return ((OS_EVENT *)0);
;;;245        }
;;;246    #endif
;;;247    
;;;248    #if OS_ARG_CHK_EN > 0u
;;;249        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;250            *perr = OS_ERR_PEVENT_NULL;
;;;251            return (pevent);
;;;252        }
;;;253    #endif
;;;254        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2802              CMP      r0,#2
000012  d004              BEQ      |L3.30|
;;;255            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;256            return (pevent);
000018  4620              MOV      r0,r4
                  |L3.26|
;;;257        }
;;;258        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;259            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;260            return (pevent);
;;;261        }
;;;262        OS_ENTER_CRITICAL();
;;;263        if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on queue        */
;;;264            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;265        } else {
;;;266            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;267        }
;;;268        switch (opt) {
;;;269            case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
;;;270                 if (tasks_waiting == OS_FALSE) {
;;;271    #if OS_EVENT_NAME_EN > 0u
;;;272                     pevent->OSEventName    = (INT8U *)(void *)"?";
;;;273    #endif
;;;274                     pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
;;;275                     pq->OSQPtr             = OSQFreeList;
;;;276                     OSQFreeList            = pq;
;;;277                     pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;278                     pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
;;;279                     pevent->OSEventCnt     = 0u;
;;;280                     OSEventFreeList        = pevent;          /* Get next free event control block        */
;;;281                     OS_EXIT_CRITICAL();
;;;282                     *perr                  = OS_ERR_NONE;
;;;283                     pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
;;;284                 } else {
;;;285                     OS_EXIT_CRITICAL();
;;;286                     *perr                  = OS_ERR_TASK_WAITING;
;;;287                     pevent_return          = pevent;
;;;288                 }
;;;289                 break;
;;;290    
;;;291            case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
;;;292                 while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
;;;293                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;294                 }
;;;295    #if OS_EVENT_NAME_EN > 0u
;;;296                 pevent->OSEventName    = (INT8U *)(void *)"?";
;;;297    #endif
;;;298                 pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
;;;299                 pq->OSQPtr             = OSQFreeList;
;;;300                 OSQFreeList            = pq;
;;;301                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;302                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;303                 pevent->OSEventCnt     = 0u;
;;;304                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;305                 OS_EXIT_CRITICAL();
;;;306                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;307                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;308                 }
;;;309                 *perr                  = OS_ERR_NONE;
;;;310                 pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
;;;311                 break;
;;;312    
;;;313            default:
;;;314                 OS_EXIT_CRITICAL();
;;;315                 *perr                  = OS_ERR_INVALID_OPT;
;;;316                 pevent_return          = pevent;
;;;317                 break;
;;;318        }
;;;319        return (pevent_return);
;;;320    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L3.30|
00001e  4833              LDR      r0,|L3.236|
000020  7800              LDRB     r0,[r0,#0]            ;258  ; OSIntNesting
000022  b118              CBZ      r0,|L3.44|
000024  200f              MOVS     r0,#0xf               ;259
000026  7028              STRB     r0,[r5,#0]            ;259
000028  4620              MOV      r0,r4                 ;260
00002a  e7f6              B        |L3.26|
                  |L3.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  4682              MOV      r10,r0                ;262
000032  7aa0              LDRB     r0,[r4,#0xa]          ;263
000034  b110              CBZ      r0,|L3.60|
000036  f04f0801          MOV      r8,#1                 ;264
00003a  e001              B        |L3.64|
                  |L3.60|
00003c  f04f0800          MOV      r8,#0                 ;266
                  |L3.64|
000040  f1b90f00          CMP      r9,#0                 ;268
000044  d003              BEQ      |L3.78|
000046  f1b90f01          CMP      r9,#1                 ;268
00004a  d145              BNE      |L3.216|
00004c  e01f              B        |L3.142|
                  |L3.78|
00004e  f1b80f00          CMP      r8,#0                 ;270
000052  d115              BNE      |L3.128|
000054  6866              LDR      r6,[r4,#4]            ;274
000056  4826              LDR      r0,|L3.240|
000058  6800              LDR      r0,[r0,#0]            ;275  ; OSQFreeList
00005a  6030              STR      r0,[r6,#0]            ;275
00005c  4824              LDR      r0,|L3.240|
00005e  6006              STR      r6,[r0,#0]            ;276  ; OSQFreeList
000060  2000              MOVS     r0,#0                 ;277
000062  7020              STRB     r0,[r4,#0]            ;277
000064  4823              LDR      r0,|L3.244|
000066  6800              LDR      r0,[r0,#0]            ;278  ; OSEventFreeList
000068  6060              STR      r0,[r4,#4]            ;278
00006a  2000              MOVS     r0,#0                 ;279
00006c  8120              STRH     r0,[r4,#8]            ;279
00006e  4821              LDR      r0,|L3.244|
000070  6004              STR      r4,[r0,#0]            ;280  ; OSEventFreeList
000072  4650              MOV      r0,r10                ;281
000074  f7fffffe          BL       OS_CPU_SR_Restore
000078  2000              MOVS     r0,#0                 ;282
00007a  7028              STRB     r0,[r5,#0]            ;282
00007c  2700              MOVS     r7,#0                 ;283
00007e  e005              B        |L3.140|
                  |L3.128|
000080  4650              MOV      r0,r10                ;285
000082  f7fffffe          BL       OS_CPU_SR_Restore
000086  2049              MOVS     r0,#0x49              ;286
000088  7028              STRB     r0,[r5,#0]            ;286
00008a  4627              MOV      r7,r4                 ;287
                  |L3.140|
00008c  e02b              B        |L3.230|
                  |L3.142|
00008e  e005              B        |L3.156|
                  |L3.144|
000090  2302              MOVS     r3,#2                 ;293
000092  2204              MOVS     r2,#4                 ;293
000094  2100              MOVS     r1,#0                 ;293
000096  4620              MOV      r0,r4                 ;293
000098  f7fffffe          BL       OS_EventTaskRdy
                  |L3.156|
00009c  7aa0              LDRB     r0,[r4,#0xa]          ;292
00009e  2800              CMP      r0,#0                 ;292
0000a0  d1f6              BNE      |L3.144|
0000a2  6866              LDR      r6,[r4,#4]            ;298
0000a4  4812              LDR      r0,|L3.240|
0000a6  6800              LDR      r0,[r0,#0]            ;299  ; OSQFreeList
0000a8  6030              STR      r0,[r6,#0]            ;299
0000aa  4811              LDR      r0,|L3.240|
0000ac  6006              STR      r6,[r0,#0]            ;300  ; OSQFreeList
0000ae  2000              MOVS     r0,#0                 ;301
0000b0  7020              STRB     r0,[r4,#0]            ;301
0000b2  4810              LDR      r0,|L3.244|
0000b4  6800              LDR      r0,[r0,#0]            ;302  ; OSEventFreeList
0000b6  6060              STR      r0,[r4,#4]            ;302
0000b8  2000              MOVS     r0,#0                 ;303
0000ba  8120              STRH     r0,[r4,#8]            ;303
0000bc  480d              LDR      r0,|L3.244|
0000be  6004              STR      r4,[r0,#0]            ;304  ; OSEventFreeList
0000c0  4650              MOV      r0,r10                ;305
0000c2  f7fffffe          BL       OS_CPU_SR_Restore
0000c6  f1b80f01          CMP      r8,#1                 ;306
0000ca  d101              BNE      |L3.208|
0000cc  f7fffffe          BL       OS_Sched
                  |L3.208|
0000d0  2000              MOVS     r0,#0                 ;309
0000d2  7028              STRB     r0,[r5,#0]            ;309
0000d4  2700              MOVS     r7,#0                 ;310
0000d6  e006              B        |L3.230|
                  |L3.216|
0000d8  4650              MOV      r0,r10                ;314
0000da  f7fffffe          BL       OS_CPU_SR_Restore
0000de  2007              MOVS     r0,#7                 ;315
0000e0  7028              STRB     r0,[r5,#0]            ;315
0000e2  4627              MOV      r7,r4                 ;316
0000e4  bf00              NOP                            ;317
                  |L3.230|
0000e6  bf00              NOP                            ;289
0000e8  4638              MOV      r0,r7                 ;319
0000ea  e796              B        |L3.26|
;;;321    #endif
                          ENDP

                  |L3.236|
                          DCD      OSIntNesting
                  |L3.240|
                          DCD      OSQFreeList
                  |L3.244|
                          DCD      OSEventFreeList

                          AREA ||i.OSQFlush||, CODE, READONLY, ALIGN=1

                  OSQFlush PROC
;;;343    #if OS_Q_FLUSH_EN > 0u
;;;344    INT8U  OSQFlush (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;345    {
000002  4605              MOV      r5,r0
;;;346        OS_Q      *pq;
;;;347    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;348        OS_CPU_SR  cpu_sr = 0u;
000004  2600              MOVS     r6,#0
;;;349    #endif
;;;350    
;;;351    
;;;352    
;;;353    #if OS_ARG_CHK_EN > 0u
;;;354        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;355            return (OS_ERR_PEVENT_NULL);
;;;356        }
;;;357        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
;;;358            return (OS_ERR_EVENT_TYPE);
;;;359        }
;;;360    #endif
;;;361        OS_ENTER_CRITICAL();
000006  f7fffffe          BL       OS_CPU_SR_Save
00000a  4606              MOV      r6,r0
;;;362        pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
00000c  686c              LDR      r4,[r5,#4]
;;;363        pq->OSQIn      = pq->OSQStart;
00000e  6860              LDR      r0,[r4,#4]
000010  60e0              STR      r0,[r4,#0xc]
;;;364        pq->OSQOut     = pq->OSQStart;
000012  6860              LDR      r0,[r4,#4]
000014  6120              STR      r0,[r4,#0x10]
;;;365        pq->OSQEntries = 0u;
000016  2000              MOVS     r0,#0
000018  82e0              STRH     r0,[r4,#0x16]
;;;366        OS_EXIT_CRITICAL();
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       OS_CPU_SR_Restore
;;;367        return (OS_ERR_NONE);
000020  2000              MOVS     r0,#0
;;;368    }
000022  bd70              POP      {r4-r6,pc}
;;;369    #endif
                          ENDP


                          AREA ||i.OSQPend||, CODE, READONLY, ALIGN=2

                  OSQPend PROC
;;;407    
;;;408    void  *OSQPend (OS_EVENT  *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;409                    INT32U     timeout,
;;;410                    INT8U     *perr)
;;;411    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;412        void      *pmsg;
;;;413        OS_Q      *pq;
;;;414    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;415        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0900          MOV      r9,#0
;;;416    #endif
;;;417    
;;;418    
;;;419    
;;;420    #ifdef OS_SAFETY_CRITICAL
;;;421        if (perr == (INT8U *)0) {
;;;422            OS_SAFETY_CRITICAL_EXCEPTION();
;;;423            return ((void *)0);
;;;424        }
;;;425    #endif
;;;426    
;;;427    #if OS_ARG_CHK_EN > 0u
;;;428        if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
;;;429            *perr = OS_ERR_PEVENT_NULL;
;;;430            return ((void *)0);
;;;431        }
;;;432    #endif
;;;433        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
00000e  7838              LDRB     r0,[r7,#0]
000010  2802              CMP      r0,#2
000012  d004              BEQ      |L5.30|
;;;434            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;435            return ((void *)0);
000018  2000              MOVS     r0,#0
                  |L5.26|
;;;436        }
;;;437        if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
;;;438            *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
;;;439            return ((void *)0);
;;;440        }
;;;441        if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
;;;442            *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
;;;443            return ((void *)0);
;;;444        }
;;;445        OS_ENTER_CRITICAL();
;;;446        pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
;;;447        if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
;;;448            pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
;;;449            pq->OSQEntries--;                        /* Update the number of entries in the queue          */
;;;450            if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
;;;451                pq->OSQOut = pq->OSQStart;
;;;452            }
;;;453            OS_EXIT_CRITICAL();
;;;454            *perr = OS_ERR_NONE;
;;;455            return (pmsg);                           /* Return message received                            */
;;;456        }
;;;457        OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
;;;458        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;459        OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
;;;460        OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
;;;461        OS_EXIT_CRITICAL();
;;;462        OS_Sched();                                  /* Find next highest priority task ready to run       */
;;;463        OS_ENTER_CRITICAL();
;;;464        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;465            case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
;;;466                 pmsg =  OSTCBCur->OSTCBMsg;
;;;467                *perr =  OS_ERR_NONE;
;;;468                 break;
;;;469    
;;;470            case OS_STAT_PEND_ABORT:
;;;471                 pmsg = (void *)0;
;;;472                *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;473                 break;
;;;474    
;;;475            case OS_STAT_PEND_TO:
;;;476            default:
;;;477                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;478                 pmsg = (void *)0;
;;;479                *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;480                 break;
;;;481        }
;;;482        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;483        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;484        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;485    #if (OS_EVENT_MULTI_EN > 0u)
;;;486        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;487    #endif
;;;488        OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
;;;489        OS_EXIT_CRITICAL();
;;;490        return (pmsg);                                    /* Return received message                       */
;;;491    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L5.30|
00001e  483c              LDR      r0,|L5.272|
000020  7800              LDRB     r0,[r0,#0]            ;437  ; OSIntNesting
000022  b118              CBZ      r0,|L5.44|
000024  2002              MOVS     r0,#2                 ;438
000026  7028              STRB     r0,[r5,#0]            ;438
000028  2000              MOVS     r0,#0                 ;439
00002a  e7f6              B        |L5.26|
                  |L5.44|
00002c  4839              LDR      r0,|L5.276|
00002e  7800              LDRB     r0,[r0,#0]            ;441  ; OSLockNesting
000030  b118              CBZ      r0,|L5.58|
000032  200d              MOVS     r0,#0xd               ;442
000034  7028              STRB     r0,[r5,#0]            ;442
000036  2000              MOVS     r0,#0                 ;443
000038  e7ef              B        |L5.26|
                  |L5.58|
00003a  f7fffffe          BL       OS_CPU_SR_Save
00003e  4681              MOV      r9,r0                 ;445
000040  687c              LDR      r4,[r7,#4]            ;446
000042  8ae0              LDRH     r0,[r4,#0x16]         ;447
000044  b198              CBZ      r0,|L5.110|
000046  6921              LDR      r1,[r4,#0x10]         ;448
000048  1d08              ADDS     r0,r1,#4              ;448
00004a  6120              STR      r0,[r4,#0x10]         ;448
00004c  680e              LDR      r6,[r1,#0]            ;448
00004e  8ae0              LDRH     r0,[r4,#0x16]         ;449
000050  1e40              SUBS     r0,r0,#1              ;449
000052  82e0              STRH     r0,[r4,#0x16]         ;449
000054  68a1              LDR      r1,[r4,#8]            ;450
000056  6920              LDR      r0,[r4,#0x10]         ;450
000058  4288              CMP      r0,r1                 ;450
00005a  d101              BNE      |L5.96|
00005c  6860              LDR      r0,[r4,#4]            ;451
00005e  6120              STR      r0,[r4,#0x10]         ;451
                  |L5.96|
000060  4648              MOV      r0,r9                 ;453
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  2000              MOVS     r0,#0                 ;454
000068  7028              STRB     r0,[r5,#0]            ;454
00006a  4630              MOV      r0,r6                 ;455
00006c  e7d5              B        |L5.26|
                  |L5.110|
00006e  482a              LDR      r0,|L5.280|
000070  6800              LDR      r0,[r0,#0]            ;457  ; OSTCBCur
000072  f8900030          LDRB     r0,[r0,#0x30]         ;457
000076  f0400004          ORR      r0,r0,#4              ;457
00007a  4927              LDR      r1,|L5.280|
00007c  6809              LDR      r1,[r1,#0]            ;457  ; OSTCBCur
00007e  f8810030          STRB     r0,[r1,#0x30]         ;457
000082  2000              MOVS     r0,#0                 ;458
000084  4924              LDR      r1,|L5.280|
000086  6809              LDR      r1,[r1,#0]            ;458  ; OSTCBCur
000088  f8810031          STRB     r0,[r1,#0x31]         ;458
00008c  4822              LDR      r0,|L5.280|
00008e  6800              LDR      r0,[r0,#0]            ;459  ; OSTCBCur
000090  f8c0802c          STR      r8,[r0,#0x2c]         ;459
000094  4638              MOV      r0,r7                 ;460
000096  f7fffffe          BL       OS_EventTaskWait
00009a  4648              MOV      r0,r9                 ;461
00009c  f7fffffe          BL       OS_CPU_SR_Restore
0000a0  f7fffffe          BL       OS_Sched
0000a4  f7fffffe          BL       OS_CPU_SR_Save
0000a8  4681              MOV      r9,r0                 ;463
0000aa  481b              LDR      r0,|L5.280|
0000ac  6800              LDR      r0,[r0,#0]            ;464  ; OSTCBCur
0000ae  f8900031          LDRB     r0,[r0,#0x31]         ;464
0000b2  b120              CBZ      r0,|L5.190|
0000b4  2801              CMP      r0,#1                 ;464
0000b6  d00d              BEQ      |L5.212|
0000b8  2802              CMP      r0,#2                 ;464
0000ba  d10a              BNE      |L5.210|
0000bc  e005              B        |L5.202|
                  |L5.190|
0000be  4816              LDR      r0,|L5.280|
0000c0  6800              LDR      r0,[r0,#0]            ;466  ; OSTCBCur
0000c2  6a06              LDR      r6,[r0,#0x20]         ;466
0000c4  2000              MOVS     r0,#0                 ;467
0000c6  7028              STRB     r0,[r5,#0]            ;467
0000c8  e00d              B        |L5.230|
                  |L5.202|
0000ca  2600              MOVS     r6,#0                 ;471
0000cc  200e              MOVS     r0,#0xe               ;472
0000ce  7028              STRB     r0,[r5,#0]            ;472
0000d0  e009              B        |L5.230|
                  |L5.210|
0000d2  bf00              NOP                            ;475
                  |L5.212|
0000d4  4639              MOV      r1,r7                 ;477
0000d6  4810              LDR      r0,|L5.280|
0000d8  6800              LDR      r0,[r0,#0]            ;477  ; OSTCBCur
0000da  f7fffffe          BL       OS_EventTaskRemove
0000de  2600              MOVS     r6,#0                 ;478
0000e0  200a              MOVS     r0,#0xa               ;479
0000e2  7028              STRB     r0,[r5,#0]            ;479
0000e4  bf00              NOP                            ;480
                  |L5.230|
0000e6  bf00              NOP                            ;468
0000e8  2000              MOVS     r0,#0                 ;482
0000ea  490b              LDR      r1,|L5.280|
0000ec  6809              LDR      r1,[r1,#0]            ;482  ; OSTCBCur
0000ee  f8810030          STRB     r0,[r1,#0x30]         ;482
0000f2  4909              LDR      r1,|L5.280|
0000f4  6809              LDR      r1,[r1,#0]            ;483  ; OSTCBCur
0000f6  f8810031          STRB     r0,[r1,#0x31]         ;483
0000fa  4907              LDR      r1,|L5.280|
0000fc  6809              LDR      r1,[r1,#0]            ;484  ; OSTCBCur
0000fe  61c8              STR      r0,[r1,#0x1c]         ;484
000100  4905              LDR      r1,|L5.280|
000102  6809              LDR      r1,[r1,#0]            ;488  ; OSTCBCur
000104  6208              STR      r0,[r1,#0x20]         ;488
000106  4648              MOV      r0,r9                 ;489
000108  f7fffffe          BL       OS_CPU_SR_Restore
00010c  4630              MOV      r0,r6                 ;490
00010e  e784              B        |L5.26|
;;;492    /*$PAGE*/
                          ENDP

                  |L5.272|
                          DCD      OSIntNesting
                  |L5.276|
                          DCD      OSLockNesting
                  |L5.280|
                          DCD      OSTCBCur

                          AREA ||i.OSQPendAbort||, CODE, READONLY, ALIGN=1

                  OSQPendAbort PROC
;;;525    #if OS_Q_PEND_ABORT_EN > 0u
;;;526    INT8U  OSQPendAbort (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;527                         INT8U      opt,
;;;528                         INT8U     *perr)
;;;529    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;530        INT8U      nbr_tasks;
;;;531    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;532        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;533    #endif
;;;534    
;;;535    
;;;536    
;;;537    #ifdef OS_SAFETY_CRITICAL
;;;538        if (perr == (INT8U *)0) {
;;;539            OS_SAFETY_CRITICAL_EXCEPTION();
;;;540            return (0u);
;;;541        }
;;;542    #endif
;;;543    
;;;544    #if OS_ARG_CHK_EN > 0u
;;;545        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;546            *perr = OS_ERR_PEVENT_NULL;
;;;547            return (0u);
;;;548        }
;;;549    #endif
;;;550        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2802              CMP      r0,#2
000012  d004              BEQ      |L6.30|
;;;551            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;552            return (0u);
000018  2000              MOVS     r0,#0
                  |L6.26|
;;;553        }
;;;554        OS_ENTER_CRITICAL();
;;;555        if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on queue?        */
;;;556            nbr_tasks = 0u;
;;;557            switch (opt) {
;;;558                case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;559                     while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
;;;560                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;561                         nbr_tasks++;
;;;562                     }
;;;563                     break;
;;;564    
;;;565                case OS_PEND_OPT_NONE:
;;;566                default:                                       /* No,  ready HPT       waiting on queue    */
;;;567                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;568                     nbr_tasks++;
;;;569                     break;
;;;570            }
;;;571            OS_EXIT_CRITICAL();
;;;572            OS_Sched();                                        /* Find HPT ready to run                    */
;;;573            *perr = OS_ERR_PEND_ABORT;
;;;574            return (nbr_tasks);
;;;575        }
;;;576        OS_EXIT_CRITICAL();
;;;577        *perr = OS_ERR_NONE;
;;;578        return (0u);                                           /* No tasks waiting on queue                */
;;;579    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L6.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4680              MOV      r8,r0                 ;554
000024  7aa0              LDRB     r0,[r4,#0xa]          ;555
000026  b320              CBZ      r0,|L6.114|
000028  2600              MOVS     r6,#0                 ;556
00002a  b17f              CBZ      r7,|L6.76|
00002c  2f01              CMP      r7,#1                 ;557
00002e  d10c              BNE      |L6.74|
000030  e007              B        |L6.66|
                  |L6.50|
000032  2302              MOVS     r3,#2                 ;560
000034  2204              MOVS     r2,#4                 ;560
000036  2100              MOVS     r1,#0                 ;560
000038  4620              MOV      r0,r4                 ;560
00003a  f7fffffe          BL       OS_EventTaskRdy
00003e  1c70              ADDS     r0,r6,#1              ;561
000040  b2c6              UXTB     r6,r0                 ;561
                  |L6.66|
000042  7aa0              LDRB     r0,[r4,#0xa]          ;559
000044  2800              CMP      r0,#0                 ;559
000046  d1f4              BNE      |L6.50|
000048  e009              B        |L6.94|
                  |L6.74|
00004a  bf00              NOP                            ;565
                  |L6.76|
00004c  2302              MOVS     r3,#2                 ;567
00004e  2204              MOVS     r2,#4                 ;567
000050  2100              MOVS     r1,#0                 ;567
000052  4620              MOV      r0,r4                 ;567
000054  f7fffffe          BL       OS_EventTaskRdy
000058  1c70              ADDS     r0,r6,#1              ;568
00005a  b2c6              UXTB     r6,r0                 ;568
00005c  bf00              NOP                            ;569
                  |L6.94|
00005e  bf00              NOP                            ;563
000060  4640              MOV      r0,r8                 ;571
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  f7fffffe          BL       OS_Sched
00006a  200e              MOVS     r0,#0xe               ;573
00006c  7028              STRB     r0,[r5,#0]            ;573
00006e  4630              MOV      r0,r6                 ;574
000070  e7d3              B        |L6.26|
                  |L6.114|
000072  4640              MOV      r0,r8                 ;576
000074  f7fffffe          BL       OS_CPU_SR_Restore
000078  2000              MOVS     r0,#0                 ;577
00007a  7028              STRB     r0,[r5,#0]            ;577
00007c  bf00              NOP                            ;578
00007e  e7cc              B        |L6.26|
;;;580    #endif
                          ENDP


                          AREA ||i.OSQPost||, CODE, READONLY, ALIGN=1

                  OSQPost PROC
;;;602    #if OS_Q_POST_EN > 0u
;;;603    INT8U  OSQPost (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;604                    void      *pmsg)
;;;605    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;606        OS_Q      *pq;
;;;607    #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;608        OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;609    #endif
;;;610    
;;;611    
;;;612    
;;;613    #if OS_ARG_CHK_EN > 0u
;;;614        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;615            return (OS_ERR_PEVENT_NULL);
;;;616        }
;;;617    #endif
;;;618        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
00000a  7828              LDRB     r0,[r5,#0]
00000c  2802              CMP      r0,#2
00000e  d002              BEQ      |L7.22|
;;;619            return (OS_ERR_EVENT_TYPE);
000010  2001              MOVS     r0,#1
                  |L7.18|
;;;620        }
;;;621        OS_ENTER_CRITICAL();
;;;622        if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
;;;623                                                           /* Ready highest priority task waiting on event */
;;;624            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;625            OS_EXIT_CRITICAL();
;;;626            OS_Sched();                                    /* Find highest priority task ready to run      */
;;;627            return (OS_ERR_NONE);
;;;628        }
;;;629        pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
;;;630        if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
;;;631            OS_EXIT_CRITICAL();
;;;632            return (OS_ERR_Q_FULL);
;;;633        }
;;;634        *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
;;;635        pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
;;;636        if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
;;;637            pq->OSQIn = pq->OSQStart;
;;;638        }
;;;639        OS_EXIT_CRITICAL();
;;;640        return (OS_ERR_NONE);
;;;641    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L7.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4607              MOV      r7,r0                 ;621
00001c  7aa8              LDRB     r0,[r5,#0xa]          ;622
00001e  b160              CBZ      r0,|L7.58|
000020  2300              MOVS     r3,#0                 ;624
000022  2204              MOVS     r2,#4                 ;624
000024  4631              MOV      r1,r6                 ;624
000026  4628              MOV      r0,r5                 ;624
000028  f7fffffe          BL       OS_EventTaskRdy
00002c  4638              MOV      r0,r7                 ;625
00002e  f7fffffe          BL       OS_CPU_SR_Restore
000032  f7fffffe          BL       OS_Sched
000036  2000              MOVS     r0,#0                 ;627
000038  e7eb              B        |L7.18|
                  |L7.58|
00003a  686c              LDR      r4,[r5,#4]            ;629
00003c  8ae0              LDRH     r0,[r4,#0x16]         ;630
00003e  8aa1              LDRH     r1,[r4,#0x14]         ;630
000040  4288              CMP      r0,r1                 ;630
000042  db04              BLT      |L7.78|
000044  4638              MOV      r0,r7                 ;631
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  201e              MOVS     r0,#0x1e              ;632
00004c  e7e1              B        |L7.18|
                  |L7.78|
00004e  68e1              LDR      r1,[r4,#0xc]          ;634
000050  1d08              ADDS     r0,r1,#4              ;634
000052  60e0              STR      r0,[r4,#0xc]          ;634
000054  600e              STR      r6,[r1,#0]            ;634
000056  8ae0              LDRH     r0,[r4,#0x16]         ;635
000058  1c40              ADDS     r0,r0,#1              ;635
00005a  82e0              STRH     r0,[r4,#0x16]         ;635
00005c  e9d41002          LDRD     r1,r0,[r4,#8]         ;636
000060  4288              CMP      r0,r1                 ;636
000062  d101              BNE      |L7.104|
000064  6860              LDR      r0,[r4,#4]            ;637
000066  60e0              STR      r0,[r4,#0xc]          ;637
                  |L7.104|
000068  4638              MOV      r0,r7                 ;639
00006a  f7fffffe          BL       OS_CPU_SR_Restore
00006e  2000              MOVS     r0,#0                 ;640
000070  e7cf              B        |L7.18|
;;;642    #endif
                          ENDP


                          AREA ||i.OSQPostFront||, CODE, READONLY, ALIGN=1

                  OSQPostFront PROC
;;;665    #if OS_Q_POST_FRONT_EN > 0u
;;;666    INT8U  OSQPostFront (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;667                         void      *pmsg)
;;;668    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;669        OS_Q      *pq;
;;;670    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;671        OS_CPU_SR  cpu_sr = 0u;
000008  2700              MOVS     r7,#0
;;;672    #endif
;;;673    
;;;674    
;;;675    
;;;676    #if OS_ARG_CHK_EN > 0u
;;;677        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;678            return (OS_ERR_PEVENT_NULL);
;;;679        }
;;;680    #endif
;;;681        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
00000a  7828              LDRB     r0,[r5,#0]
00000c  2802              CMP      r0,#2
00000e  d002              BEQ      |L8.22|
;;;682            return (OS_ERR_EVENT_TYPE);
000010  2001              MOVS     r0,#1
                  |L8.18|
;;;683        }
;;;684        OS_ENTER_CRITICAL();
;;;685        if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on queue              */
;;;686                                                          /* Ready highest priority task waiting on event  */
;;;687            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;688            OS_EXIT_CRITICAL();
;;;689            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;690            return (OS_ERR_NONE);
;;;691        }
;;;692        pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
;;;693        if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
;;;694            OS_EXIT_CRITICAL();
;;;695            return (OS_ERR_Q_FULL);
;;;696        }
;;;697        if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
;;;698            pq->OSQOut = pq->OSQEnd;
;;;699        }
;;;700        pq->OSQOut--;
;;;701        *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
;;;702        pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
;;;703        OS_EXIT_CRITICAL();
;;;704        return (OS_ERR_NONE);
;;;705    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L8.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4607              MOV      r7,r0                 ;684
00001c  7aa8              LDRB     r0,[r5,#0xa]          ;685
00001e  b160              CBZ      r0,|L8.58|
000020  2300              MOVS     r3,#0                 ;687
000022  2204              MOVS     r2,#4                 ;687
000024  4631              MOV      r1,r6                 ;687
000026  4628              MOV      r0,r5                 ;687
000028  f7fffffe          BL       OS_EventTaskRdy
00002c  4638              MOV      r0,r7                 ;688
00002e  f7fffffe          BL       OS_CPU_SR_Restore
000032  f7fffffe          BL       OS_Sched
000036  2000              MOVS     r0,#0                 ;690
000038  e7eb              B        |L8.18|
                  |L8.58|
00003a  686c              LDR      r4,[r5,#4]            ;692
00003c  8ae0              LDRH     r0,[r4,#0x16]         ;693
00003e  8aa1              LDRH     r1,[r4,#0x14]         ;693
000040  4288              CMP      r0,r1                 ;693
000042  db04              BLT      |L8.78|
000044  4638              MOV      r0,r7                 ;694
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  201e              MOVS     r0,#0x1e              ;695
00004c  e7e1              B        |L8.18|
                  |L8.78|
00004e  6861              LDR      r1,[r4,#4]            ;697
000050  6920              LDR      r0,[r4,#0x10]         ;697
000052  4288              CMP      r0,r1                 ;697
000054  d101              BNE      |L8.90|
000056  68a0              LDR      r0,[r4,#8]            ;698
000058  6120              STR      r0,[r4,#0x10]         ;698
                  |L8.90|
00005a  6920              LDR      r0,[r4,#0x10]         ;700
00005c  1f00              SUBS     r0,r0,#4              ;700
00005e  6120              STR      r0,[r4,#0x10]         ;700
000060  6920              LDR      r0,[r4,#0x10]         ;701
000062  6006              STR      r6,[r0,#0]            ;701
000064  8ae0              LDRH     r0,[r4,#0x16]         ;702
000066  1c40              ADDS     r0,r0,#1              ;702
000068  82e0              STRH     r0,[r4,#0x16]         ;702
00006a  4638              MOV      r0,r7                 ;703
00006c  f7fffffe          BL       OS_CPU_SR_Restore
000070  2000              MOVS     r0,#0                 ;704
000072  e7ce              B        |L8.18|
;;;706    #endif
                          ENDP


                          AREA ||i.OSQPostOpt||, CODE, READONLY, ALIGN=1

                  OSQPostOpt PROC
;;;737    #if OS_Q_POST_OPT_EN > 0u
;;;738    INT8U  OSQPostOpt (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;739                       void      *pmsg,
;;;740                       INT8U      opt)
;;;741    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;742        OS_Q      *pq;
;;;743    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;744        OS_CPU_SR  cpu_sr = 0u;
00000a  f04f0800          MOV      r8,#0
;;;745    #endif
;;;746    
;;;747    
;;;748    
;;;749    #if OS_ARG_CHK_EN > 0u
;;;750        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;751            return (OS_ERR_PEVENT_NULL);
;;;752        }
;;;753    #endif
;;;754        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
00000e  7828              LDRB     r0,[r5,#0]
000010  2802              CMP      r0,#2
000012  d002              BEQ      |L9.26|
;;;755            return (OS_ERR_EVENT_TYPE);
000014  2001              MOVS     r0,#1
                  |L9.22|
;;;756        }
;;;757        OS_ENTER_CRITICAL();
;;;758        if (pevent->OSEventGrp != 0x00u) {                /* See if any task pending on queue              */
;;;759            if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
;;;760                while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
;;;761                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;762                }
;;;763            } else {                                      /* No,  Post to HPT waiting on queue             */
;;;764                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;765            }
;;;766            OS_EXIT_CRITICAL();
;;;767            if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
;;;768                OS_Sched();                               /* Find highest priority task ready to run       */
;;;769            }
;;;770            return (OS_ERR_NONE);
;;;771        }
;;;772        pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
;;;773        if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
;;;774            OS_EXIT_CRITICAL();
;;;775            return (OS_ERR_Q_FULL);
;;;776        }
;;;777        if ((opt & OS_POST_OPT_FRONT) != 0x00u) {         /* Do we post to the FRONT of the queue?         */
;;;778            if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
;;;779                pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
;;;780            }
;;;781            pq->OSQOut--;
;;;782            *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
;;;783        } else {                                          /* No,  Post as FIFO                             */
;;;784            *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
;;;785            if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
;;;786                pq->OSQIn = pq->OSQStart;
;;;787            }
;;;788        }
;;;789        pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
;;;790        OS_EXIT_CRITICAL();
;;;791        return (OS_ERR_NONE);
;;;792    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L9.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4680              MOV      r8,r0                 ;757
000020  7aa8              LDRB     r0,[r5,#0xa]          ;758
000022  b1e8              CBZ      r0,|L9.96|
000024  f0060001          AND      r0,r6,#1              ;759
000028  b150              CBZ      r0,|L9.64|
00002a  e005              B        |L9.56|
                  |L9.44|
00002c  2300              MOVS     r3,#0                 ;761
00002e  2204              MOVS     r2,#4                 ;761
000030  4639              MOV      r1,r7                 ;761
000032  4628              MOV      r0,r5                 ;761
000034  f7fffffe          BL       OS_EventTaskRdy
                  |L9.56|
000038  7aa8              LDRB     r0,[r5,#0xa]          ;760
00003a  2800              CMP      r0,#0                 ;760
00003c  d1f6              BNE      |L9.44|
00003e  e005              B        |L9.76|
                  |L9.64|
000040  2300              MOVS     r3,#0                 ;764
000042  2204              MOVS     r2,#4                 ;764
000044  4639              MOV      r1,r7                 ;764
000046  4628              MOV      r0,r5                 ;764
000048  f7fffffe          BL       OS_EventTaskRdy
                  |L9.76|
00004c  4640              MOV      r0,r8                 ;766
00004e  f7fffffe          BL       OS_CPU_SR_Restore
000052  f0060004          AND      r0,r6,#4              ;767
000056  b908              CBNZ     r0,|L9.92|
000058  f7fffffe          BL       OS_Sched
                  |L9.92|
00005c  2000              MOVS     r0,#0                 ;770
00005e  e7da              B        |L9.22|
                  |L9.96|
000060  686c              LDR      r4,[r5,#4]            ;772
000062  8ae0              LDRH     r0,[r4,#0x16]         ;773
000064  8aa1              LDRH     r1,[r4,#0x14]         ;773
000066  4288              CMP      r0,r1                 ;773
000068  db04              BLT      |L9.116|
00006a  4640              MOV      r0,r8                 ;774
00006c  f7fffffe          BL       OS_CPU_SR_Restore
000070  201e              MOVS     r0,#0x1e              ;775
000072  e7d0              B        |L9.22|
                  |L9.116|
000074  f0060002          AND      r0,r6,#2              ;777
000078  b158              CBZ      r0,|L9.146|
00007a  6861              LDR      r1,[r4,#4]            ;778
00007c  6920              LDR      r0,[r4,#0x10]         ;778
00007e  4288              CMP      r0,r1                 ;778
000080  d101              BNE      |L9.134|
000082  68a0              LDR      r0,[r4,#8]            ;779
000084  6120              STR      r0,[r4,#0x10]         ;779
                  |L9.134|
000086  6920              LDR      r0,[r4,#0x10]         ;781
000088  1f00              SUBS     r0,r0,#4              ;781
00008a  6120              STR      r0,[r4,#0x10]         ;781
00008c  6920              LDR      r0,[r4,#0x10]         ;782
00008e  6007              STR      r7,[r0,#0]            ;782
000090  e009              B        |L9.166|
                  |L9.146|
000092  68e1              LDR      r1,[r4,#0xc]          ;784
000094  1d08              ADDS     r0,r1,#4              ;784
000096  60e0              STR      r0,[r4,#0xc]          ;784
000098  600f              STR      r7,[r1,#0]            ;784
00009a  e9d41002          LDRD     r1,r0,[r4,#8]         ;785
00009e  4288              CMP      r0,r1                 ;785
0000a0  d101              BNE      |L9.166|
0000a2  6860              LDR      r0,[r4,#4]            ;786
0000a4  60e0              STR      r0,[r4,#0xc]          ;786
                  |L9.166|
0000a6  8ae0              LDRH     r0,[r4,#0x16]         ;789
0000a8  1c40              ADDS     r0,r0,#1              ;789
0000aa  82e0              STRH     r0,[r4,#0x16]         ;789
0000ac  4640              MOV      r0,r8                 ;790
0000ae  f7fffffe          BL       OS_CPU_SR_Restore
0000b2  2000              MOVS     r0,#0                 ;791
0000b4  e7af              B        |L9.22|
;;;793    #endif
                          ENDP


                          AREA ||i.OSQQuery||, CODE, READONLY, ALIGN=1

                  OSQQuery PROC
;;;813    #if OS_Q_QUERY_EN > 0u
;;;814    INT8U  OSQQuery (OS_EVENT  *pevent,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;815                     OS_Q_DATA *p_q_data)
;;;816    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;817        OS_Q       *pq;
;;;818        INT8U       i;
;;;819        OS_PRIO    *psrc;
;;;820        OS_PRIO    *pdest;
;;;821    #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;822        OS_CPU_SR   cpu_sr = 0u;
000008  f04f0a00          MOV      r10,#0
;;;823    #endif
;;;824    
;;;825    
;;;826    
;;;827    #if OS_ARG_CHK_EN > 0u
;;;828        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;829            return (OS_ERR_PEVENT_NULL);
;;;830        }
;;;831        if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
;;;832            return (OS_ERR_PDATA_NULL);
;;;833        }
;;;834    #endif
;;;835        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
00000c  7828              LDRB     r0,[r5,#0]
00000e  2802              CMP      r0,#2
000010  d002              BEQ      |L10.24|
;;;836            return (OS_ERR_EVENT_TYPE);
000012  2001              MOVS     r0,#1
                  |L10.20|
;;;837        }
;;;838        OS_ENTER_CRITICAL();
;;;839        p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
;;;840        psrc                 = &pevent->OSEventTbl[0];
;;;841        pdest                = &p_q_data->OSEventTbl[0];
;;;842        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
;;;843            *pdest++ = *psrc++;
;;;844        }
;;;845        pq = (OS_Q *)pevent->OSEventPtr;
;;;846        if (pq->OSQEntries > 0u) {
;;;847            p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
;;;848        } else {
;;;849            p_q_data->OSMsg = (void *)0;
;;;850        }
;;;851        p_q_data->OSNMsgs = pq->OSQEntries;
;;;852        p_q_data->OSQSize = pq->OSQSize;
;;;853        OS_EXIT_CRITICAL();
;;;854        return (OS_ERR_NONE);
;;;855    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L10.24|
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4682              MOV      r10,r0                ;838
00001e  7aa8              LDRB     r0,[r5,#0xa]          ;839
000020  7420              STRB     r0,[r4,#0x10]         ;839
000022  f105080b          ADD      r8,r5,#0xb            ;840
000026  f1040908          ADD      r9,r4,#8              ;841
00002a  2700              MOVS     r7,#0                 ;842
00002c  e005              B        |L10.58|
                  |L10.46|
00002e  f8180b01          LDRB     r0,[r8],#1            ;843
000032  f8090b01          STRB     r0,[r9],#1            ;843
000036  1c78              ADDS     r0,r7,#1              ;842
000038  b2c7              UXTB     r7,r0                 ;842
                  |L10.58|
00003a  2f08              CMP      r7,#8                 ;842
00003c  d3f7              BCC      |L10.46|
00003e  686e              LDR      r6,[r5,#4]            ;845
000040  8af0              LDRH     r0,[r6,#0x16]         ;846
000042  b118              CBZ      r0,|L10.76|
000044  6930              LDR      r0,[r6,#0x10]         ;847
000046  6800              LDR      r0,[r0,#0]            ;847
000048  6020              STR      r0,[r4,#0]            ;847
00004a  e001              B        |L10.80|
                  |L10.76|
00004c  2000              MOVS     r0,#0                 ;849
00004e  6020              STR      r0,[r4,#0]            ;849
                  |L10.80|
000050  8af0              LDRH     r0,[r6,#0x16]         ;851
000052  80a0              STRH     r0,[r4,#4]            ;851
000054  8ab0              LDRH     r0,[r6,#0x14]         ;852
000056  80e0              STRH     r0,[r4,#6]            ;852
000058  4650              MOV      r0,r10                ;853
00005a  f7fffffe          BL       OS_CPU_SR_Restore
00005e  2000              MOVS     r0,#0                 ;854
000060  e7d8              B        |L10.20|
;;;856    #endif                                                 /* OS_Q_QUERY_EN                                */
                          ENDP


                          AREA ||i.OS_QInit||, CODE, READONLY, ALIGN=2

                  OS_QInit PROC
;;;873    
;;;874    void  OS_QInit (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;875    {
;;;876    #if OS_MAX_QS == 1u
;;;877        OSQFreeList         = &OSQTbl[0];                /* Only ONE queue!                                */
;;;878        OSQFreeList->OSQPtr = (OS_Q *)0;
;;;879    #endif
;;;880    
;;;881    #if OS_MAX_QS >= 2u
;;;882        INT16U   ix;
;;;883        INT16U   ix_next;
;;;884        OS_Q    *pq1;
;;;885        OS_Q    *pq2;
;;;886    
;;;887    
;;;888    
;;;889        OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
000004  2160              MOVS     r1,#0x60
000006  4810              LDR      r0,|L11.72|
000008  f7fffffe          BL       OS_MemClr
;;;890        for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
00000c  2400              MOVS     r4,#0
00000e  e00d              B        |L11.44|
                  |L11.16|
;;;891            ix_next = ix + 1u;
000010  1c60              ADDS     r0,r4,#1
000012  b286              UXTH     r6,r0
;;;892            pq1 = &OSQTbl[ix];
000014  eb040044          ADD      r0,r4,r4,LSL #1
000018  490b              LDR      r1,|L11.72|
00001a  eb0105c0          ADD      r5,r1,r0,LSL #3
;;;893            pq2 = &OSQTbl[ix_next];
00001e  eb060046          ADD      r0,r6,r6,LSL #1
000022  eb0107c0          ADD      r7,r1,r0,LSL #3
;;;894            pq1->OSQPtr = pq2;
000026  602f              STR      r7,[r5,#0]
000028  1c60              ADDS     r0,r4,#1              ;890
00002a  b284              UXTH     r4,r0                 ;890
                  |L11.44|
00002c  2c03              CMP      r4,#3                 ;890
00002e  d3ef              BCC      |L11.16|
;;;895        }
;;;896        pq1         = &OSQTbl[ix];
000030  eb040044          ADD      r0,r4,r4,LSL #1
000034  4904              LDR      r1,|L11.72|
000036  eb0105c0          ADD      r5,r1,r0,LSL #3
;;;897        pq1->OSQPtr = (OS_Q *)0;
00003a  2000              MOVS     r0,#0
00003c  6028              STR      r0,[r5,#0]
;;;898        OSQFreeList = &OSQTbl[0];
00003e  4608              MOV      r0,r1
000040  4902              LDR      r1,|L11.76|
000042  6008              STR      r0,[r1,#0]  ; OSQFreeList
;;;899    #endif
;;;900    }
000044  e8bd81f0          POP      {r4-r8,pc}
;;;901    #endif                                               /* OS_Q_EN                                        */
                          ENDP

                  |L11.72|
                          DCD      OSQTbl
                  |L11.76|
                          DCD      OSQFreeList
